syntax = "proto3";

package tkd.treatment.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "buf/validate/validate.proto";
import "tkd/common/v1/descriptor.proto";

enum IconType {
    ICON_TYPE_UNSPECIFIED = 0;
    ICON_TYPE_UNICODE = 1;
    ICON_TYPE_URL = 2;
    ICON_TYPE_IMAGE_WEBP = 3;
}

message Icon {
    // Data holds the actual icon data. It's interpretation depends
    // on the value of IconType type field. 
    bytes data = 1;

    // Type defines the type of the icon and how the data field needs to
    // be parsed/interpreted.
    IconType type = 2;
}

// Species is a well-known species for which treatments are available.
message Species {
    // Name is the unique name of the species.
    string name = 1;

    // DisplayName is a human readable name for the species to be used in the
    // self-booking user interface.
    string display_name = 2;

    // RequestCastrationStatus can be set to true if the self-booking user interface
    // should request the castration status of the patient.
    bool request_castration_status = 3;

    // Since species are not always entered correctly, the following field
    // is used to match multiple values to a given species.
    // When used together with the tkd.customer.v1.Patient message,
    // it's species and breed values will be compared.
    repeated string match_words = 4;

    // Icon holds a small icon for the species.
    Icon icon = 5;
}

service SpeciesService {
    rpc CreateSpecies(Species) returns (Species) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
    rpc ListSpecies(ListSpeciesRequest) returns (ListSpeciesResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
    rpc UpdateSpecies(UpdateSpeciesRequest) returns (Species) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
    rpc DeleteSpecies(DeleteSpeciesRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
    rpc DetectSpecies(DetectSpeciesRequest) returns (ListSpeciesResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
}

message DetectSpeciesRequest {
    repeated string values = 1;
}

message ListSpeciesRequest {
    repeated string names = 1;
}

message ListSpeciesResponse {
    repeated Species species = 1;
}

message UpdateSpeciesRequest {
    string name = 1 [
        (buf.validate.field).required = true
    ];

    Species species = 2 [
        (buf.validate.field).required = true
    ];

    google.protobuf.FieldMask update_mask = 3;
}

message DeleteSpeciesRequest {
    string name = 1 [
        (buf.validate.field).required = true
    ];

}