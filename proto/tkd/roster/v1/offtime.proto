
syntax = "proto3";

package tkd.roster.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "tkd/common/v1/descriptor.proto";
import "buf/validate/validate.proto";

message OffTimeApproval {
    // Approved is set to true when the off-time request has been approved
    // by a manager.
    bool approved = 2;

    // ApprovedAt is set to the time-stamp the off-time request has been
    // approved.
    google.protobuf.Timestamp approved_at = 3;

    // ApproverId holds the ID of the user that approved the request.
    string approver_id = 4;
    
    // Comment may hold an additional comment from management.
    string comment = 5;
}

message OffTimeCosts {
    string id = 1;

    // OfftimeId is the ID of the off-time request, if any.
    string offtime_id = 2;

    // RosterId is the ID of the roster this OffTimeCosts belong to.
    string roster_id = 3;

    // UserId is the ID of the user this off-time costs belong to.
    string user_id = 4 [
        (buf.validate.field).required = true
    ];

    // CreatedAt is set to the time this off-time-costs entry has been
    // created. This field must not be set during OffTimeService.AddOffTimeCosts.
    google.protobuf.Timestamp created_at = 5;

    // CreatorId holds the ID of the user that created this entry.
    // This field must not be set during OffTimeService.AddOffTimeCosts.
    string creator_id = 6;

    // The actual duration costs of this entry.
    google.protobuf.Duration costs = 7 [
        (buf.validate.field).required = true
    ];

    // IsVacation is set to true if the off-time-costs apply to the vacation
    // credits. If set to false, the off-time costs are for time compensation.
    bool is_vacation = 8;

    // Date holds the date of the off-time costs.
    google.protobuf.Timestamp date = 9;

    // Comment may holde an optional comment for the off-time costs.
    string comment = 10;
}

enum OffTimeType {
    // Unspecified means that the requestor does not care whether the off-time
    // is based on vacation credits of time compenstation.
    OFF_TIME_TYPE_UNSPECIFIED = 0;

    // Vacation is used to tell the manager that this off-time is highly required
    // and the requestor is fine with spending vacation credits.
    OFF_TIME_TYPE_VACATION = 1;

    // TimeOff is used to tell the manager that this off-time is not mandatory
    // and that the requestor is only willing to spend time-compensation.
    OFF_TIME_TYPE_TIME_OFF = 2;
}

message OffTimeEntry {
    // Id is a unique identifier for this off-time entry.
    string id = 1;

    // RequestorId is the ID of the user that requested off-time.
    string requestor_id = 2;

    // The date/time (inclusive) at which the off-time should start.
    google.protobuf.Timestamp from = 3;

    // The date/time (inclusive) at which the off-time should end.
    google.protobuf.Timestamp to = 4;

    // An optional description for management in Markdown format.
    string description = 5;

    // The type of the off-time request.
    OffTimeType type = 6;

    // If approved/rejected by management, this field will be poluated.
    OffTimeApproval approval = 7;

    google.protobuf.Timestamp created_at = 8;

    string creator_id = 9;
}

service OffTimeService {
    rpc GetOffTimeEntry(GetOffTimeEntryRequest) returns (GetOffTimeEntryResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    };

    rpc CreateOffTimeRequest(CreateOffTimeRequestRequest) returns (CreateOffTimeRequestResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    };

    rpc DeleteOffTimeRequest(DeleteOffTimeRequestRequest) returns (DeleteOffTimeRequestResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    };

    rpc FindOffTimeRequests(FindOffTimeRequestsRequest) returns (FindOffTimeRequestsResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    };

    rpc ApproveOrReject(ApproveOrRejectRequest) returns (ApproveOrRejectResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
            allowed_roles: ["idm_superuser", "roster_manager"]
        };
    };

    rpc AddOffTimeCosts(AddOffTimeCostsRequest) returns (AddOffTimeCostsResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
            allowed_roles: ["idm_superuser", "roster_manager"]
        };
    }

    rpc GetOffTimeCosts(GetOffTimeCostsRequest) returns (GetOffTimeCostsResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
    
    rpc DeleteOffTimeCosts(DeleteOffTimeCostsRequest) returns (DeleteOffTimeCostsResponse){
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
}

message GetOffTimeEntryRequest {
    // A list of OffTimeEntry IDs to load.
    repeated string ids = 1 [
        (buf.validate.field).required = true
    ];
}

message GetOffTimeEntryResponse {
    repeated OffTimeEntry entry =  1;
}

message CreateOffTimeRequestRequest {
    google.protobuf.Timestamp from = 1 [
        (buf.validate.field).required = true,
        (buf.validate.field).timestamp.gt_now = true
    ];

    google.protobuf.Timestamp to = 2 [
        (buf.validate.field).required = true,
        (buf.validate.field).timestamp.gt_now = true
    ];

    // The ID of the user that requests off-time. Only administrators may
    // set this field.
    // For non-administrators, or if the field is empty, it defaults to the
    // user-id that performs the request.
    string requestor_id = 3;

    // An optional description of the off-time-request.
    string description = 4;

    // The type of off-time request.
    OffTimeType request_type = 5; 
}

message CreateOffTimeRequestResponse {
    // Holds the created off-time request entry.
    OffTimeEntry entry =  1;
}

// Request deletion of one or more off-time-request.
message DeleteOffTimeRequestRequest {
    repeated string id = 1 [(buf.validate.field).required = true];
}

message DeleteOffTimeRequestResponse {}

message FindOffTimeRequestsRequest {
    google.protobuf.Timestamp from = 1;
    google.protobuf.Timestamp to = 2;
    repeated string user_ids = 3;
    
    google.protobuf.BoolValue approved = 4;
    google.protobuf.FieldMask read_mask = 5;
}

message FindOffTimeRequestsResponse {
    repeated OffTimeEntry results = 1;
}

enum ApprovalRequestType {
    APPROVAL_REQUEST_TYPE_UNSPECIFIED = 0;
    APPROVAL_REQUEST_TYPE_APPROVED = 1;
    APPROVAL_REQUEST_TYPE_REJECTED = 2;
}

message ApproveOrRejectRequest {
    string id = 1 [(buf.validate.field).required = true];
    string comment = 2;
    ApprovalRequestType type = 3 [(buf.validate.field).required = true];
}

message ApproveOrRejectResponse {
    OffTimeEntry entry = 1;
}

message AddOffTimeCostsRequest {
    repeated OffTimeCosts add_costs = 1 [
        (buf.validate.field).required = true
    ];
}

message AddOffTimeCostsResponse {}

message CostsForUsers {
    repeated string user_ids = 1;
}

message GetOffTimeCostsRequest {
    CostsForUsers for_users = 1;
    google.protobuf.FieldMask read_mask = 2;
}

message OffTimeCostSummary {
    google.protobuf.Duration vacation = 1;
    google.protobuf.Duration time_off = 2;
}

message UserOffTimeCosts {
    string user_id = 1;
    repeated OffTimeCosts costs = 2;
    OffTimeCostSummary summary = 3;
}

message GetOffTimeCostsResponse {
    repeated UserOffTimeCosts results = 1;
}

message DeleteOffTimeCostsRequest {
    repeated string ids = 1;
}

message DeleteOffTimeCostsResponse {}