syntax = "proto3";

package tkd.tasks.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "buf/validate/validate.proto";
import "tkd/common/v1/geolocation.proto";
import "tkd/common/v1/pagination.proto";
import "tkd/common/v1/view.proto";
import "tkd/common/v1/descriptor.proto";
import "tkd/common/v1/list_wrappers.proto";
import "tkd/common/v1/time_range.proto";
import "tkd/customer/v1/customer.proto";
import "tkd/tasks/v1/boards.proto";

message Attachment {
    // Name is a task-unique name for the attachment.
    string name = 1;

    // ContentType is the MIME content type of the attachment.
    string content_type = 2;
}

message Task {
    // ID is a unique, opaque, backend-generated ID for this todo-entry.
    // It's not guaranteed that the ID is unique accross different boards.
    string id = 1;

    // BoardId is the id of the board that this task belongs to.
    string board_id = 2;

    // Title is the title of the task. This one must be set.
    string title = 3;

    // Description is an optional task description in markdown format.
    string description = 4;

    // CreatorId is the id of the user that created the task
    string creator_id = 5;

    // AssigneeId is the id of the user that is currently assigned to the task.
    string assignee_id = 6;

    // Location optionally holds the geo-location associated with the task.
    oneof location {
        tkd.common.v1.GeoLocation geo_location = 7;
        tkd.customer.v1.Address address = 8;
    }

    // Tags is a list of opaque string tags.
    repeated string tags = 9;

    // Status may hold an additional task status. Note that status values
    // are opaque to the TaskService.
    string status = 10;

    // AssignedBy holds the id of the user that assigned to task
    // to AssigneeId.
    string assigned_by = 11;

    // Attachments may hold additional attachments for this task.
    repeated Attachment attachments = 12;

    // TravelTime holds the travel time to the task location.
    // This field is only set if a task location is available and
    // the request to retrieve this task specified a reference location.
    // See TaskService for more information.
    google.protobuf.Duration travel_time = 13;

    // DueTime holds the time at which the task is expected to be
    // completed.
    google.protobuf.Timestamp due_time = 14;

    // Properties may hold application specific properties.
    map<string, google.protobuf.Any> properties = 15;

    // Subscriptions is a map, indexed by user_id, that holds subscription
    // settings.
    map<string, tkd.tasks.v1.Subscription> subscriptions = 16;

    // Priority is the task priortiy.
    google.protobuf.Int32Value priority = 17;

    // CreateTime is the time at which the task has been created.
    google.protobuf.Timestamp create_time = 90;

    // UpdateTime is the time at which the task has been modified last.
    google.protobuf.Timestamp update_time = 91;

    // CompleteTime is the time at which the task has been marked as completed.
    google.protobuf.Timestamp complete_time = 92;

    // AssignTime is the time at which this task has been assigned to AssigneeId.
    google.protobuf.Timestamp assign_time = 93;
}

message TaskValueChange {
    string field_name = 1 [
        (buf.validate.field).required = true
    ];

    google.protobuf.Value old_value = 2;
    google.protobuf.Value new_value = 3;
}

message TaskReaction {
    string user_id = 1;
    string reaction = 2;
}

message TaskComment {
    // Comment holds the task comment in markdown format
    string comment = 1;

    // Reactions holds a list of user reactions to that comment.
    repeated TaskReaction reactions = 2;

    // EditTime holds the time the comment has been last edited.
    // If the comment has never been edited by it's user, this field
    // is empty.
    google.protobuf.Timestamp edit_time = 3;

    // DeleteTime is set to the time when the comment has been deleted.
    google.protobuf.Timestamp delete_time = 4;

    // MarkAsOfftopicTime is set to the them when the comment has been marked
    // as off-topic.
    google.protobuf.Timestamp mark_as_offtopic_time = 5;
}

message TaskTimelineEntry {
    // Id is the id of the timeline entry
    string id = 1;

    // TaskId is the ID of the task to which this time-line entry
    // belongs.
    string task_id = 2 [
        (buf.validate.field).required = true
    ];

    // CreateTime is the timestamp at which the timeline entry
    // has been created.
    google.protobuf.Timestamp create_time = 3 [
        (buf.validate.field).required = true
    ];

    // UserId is the id of the user that created the timeline entry.
    string user_id = 4;

    // Kind describes the kind of timeline entry.
    oneof kind {
        TaskValueChange value_change = 6;
        TaskComment comment = 7;

        option (buf.validate.oneof).required = true;
    }
}

service TaskService {
    rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc AssignTask(AssignTaskRequest) returns (AssignTaskResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc CompleteTask(CompleteTaskRequest) returns (CompleteTaskResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc DeleteTask(DeleteTaskRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc QueryView(QueryViewRequest) returns (QueryViewResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc FilterTasks(FilterTasksRequest) returns (ListTasksResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc ParseFilter(ParseFilterRequest) returns (ParseFilterResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc AddTaskAttachment(AddTaskAttachmentRequest) returns (AddTaskAttachmentResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc DeleteTaskAttachment(DeleteTaskAttachmentRequest) returns (DeleteTaskAttachmentResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc ManageSubscription(tkd.tasks.v1.ManageSubscriptionRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc GetTimeline(GetTimelineRequest) returns (GetTimelineResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc CreateTaskComment(CreateTaskCommentRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc AddTaskCommentReaction(AddTaskCommentReactionRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    rpc UpdateTaskComment(UpdateTaskCommentRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
}

message CreateTaskRequest {
    // BoardId is the id of the board that this task belongs to.
    string board_id = 1;

    // Title is the title of the task. This one must be set.
    string title = 2;

    // Description is an optional task description in markdown format.
    string description = 3;

    // AssigneeId is the id of the user that is currently assigned to the task.
    string assignee_id = 4;

    // Location optionally holds the geo-location associated with the task.
    oneof location {
        tkd.common.v1.GeoLocation geo_location = 5;
        tkd.customer.v1.Address address = 6;
    }

    // Tags is a list of opaque string tags.
    repeated string tags = 7;

    // Status may hold an additional task status. Note that status values
    // are opaque to the TaskService.
    string status = 8;

    // Attachments may hold additional attachments for this task.
    repeated Attachment attachments = 9;

    // DueTime holds the time at which the task is expected to be
    // completed.
    google.protobuf.Timestamp due_time = 10;

    // Properties may hold application specific properties.
    map<string, google.protobuf.Any> properties = 11;

    // Priority is the task priority.
    google.protobuf.Int32Value priority = 12;
}

message CreateTaskResponse {
    Task task = 1;
}

message UpdateTaskRequest {
    // TaskId is the id of the task to update
    string task_id = 1;

    // Title is the title of the task. This one must be set.
    string title = 2;

    // Description is an optional task description in markdown format.
    string description = 3;

    // AssigneeId is the id of the user that is currently assigned to the task.
    string assignee_id = 4;

    // Location optionally holds the geo-location associated with the task.
    oneof location {
        tkd.common.v1.GeoLocation geo_location = 5;
        tkd.customer.v1.Address address = 6;
    }

    // Tags is a list of opaque string tags.
    oneof tags {
        tkd.common.v1.StringList add_tags = 7;
        tkd.common.v1.StringList delete_tags = 9;
        tkd.common.v1.StringList replace_tags = 14;
    }

    // Status may hold an additional task status. Note that status values
    // are opaque to the TaskService.
    string status = 10;

    // DueTime holds the time at which the task is expected to be
    // completed.
    google.protobuf.Timestamp due_time = 11;

    oneof properties {
        AddProperties add_properties = 12;
        tkd.common.v1.StringList delete_properties = 13;
    }

    // Priority is the new priority value.
    google.protobuf.Int32Value priority = 15;

    google.protobuf.FieldMask update_mask = 99;
}

message AddProperties {
    repeated AddProperty properties = 12;
}

message AddProperty {
    string key = 1 [
        (buf.validate.field).required = true
    ];

    google.protobuf.Any value = 2;
}

message UpdateTaskResponse {
    Task task = 1;
}

message AssignTaskRequest {
    string task_id = 1;
    string assignee_id = 2;
}

message AssignTaskResponse {
    Task task = 1;
}

message CompleteTaskRequest {
    string task_id = 1;
}

message CompleteTaskResponse {
    Task task = 1;
}

message DeleteTaskRequest {
    string task_id = 1;
}

message GetTaskRequest {
    string task_id = 1;
}

message GetTaskResponse {
    Task task = 1;
}

message TaskQuery {
    repeated string board_id = 1;
    repeated string statuses = 2;
    repeated string tags = 3;
    repeated string assigned_to = 4;
    repeated string created_by = 5;
    tkd.common.v1.TimeRange due_between = 6;
    google.protobuf.BoolValue completed = 7;
}

message ListTasksRequest {
    repeated TaskQuery queries = 1;

    tkd.common.v1.View view = 91;
    tkd.common.v1.Pagination pagination = 90;
}

message FilterTasksRequest {
    string query = 1;
    string board_id = 2;
    
    tkd.common.v1.View view = 91;
    tkd.common.v1.Pagination pagination = 90;
}

message ParseFilterRequest {
    string query = 1;
    string board_id = 2;
}

message ParseFilterResponse {
    string expected_token = 1;
    repeated string values = 2;
}

message ListTasksResponse {
    repeated Task tasks = 1;
    int64 total_count = 2;
}

message AddTaskAttachmentRequest {
    string task_id = 1 [
        (buf.validate.field).required = true
    ];

    string name = 2 [
        (buf.validate.field).required = true
    ];

    string content_type = 3 [
        (buf.validate.field).required = true
    ];

    bytes content = 4 [
        (buf.validate.field).required = true
    ];
}

message AddTaskAttachmentResponse {
    Task task = 1;
}

message DeleteTaskAttachmentRequest {
    string task_id = 1 [
        (buf.validate.field).required = true
    ];

    string name = 2 [
        (buf.validate.field).required = true
    ];
}

message DeleteTaskAttachmentResponse {
    Task task = 1;
}

message GetTimelineRequest {
    repeated string task_ids = 2;
}

message GetTimelineResponse {
    repeated TaskTimelineEntry timeline = 1;
}

message CreateTaskCommentRequest {
    string task_id = 1 [
        (buf.validate.field).required = true
    ];

    string comment = 2 [
        (buf.validate.field).required = true
    ];
}

message AddTaskCommentReactionRequest {
    string comment_id = 1 [
        (buf.validate.field).required = true
    ];

    string reaction = 2 [
        (buf.validate.field).required = true
    ];
}

message UpdateTaskCommentRequest {
    string timeline_id = 1 [
        (buf.validate.field).required = true
    ];

    oneof kind {
        string new_text = 2;
        bool delete = 3;
        bool off_topic = 4;
    }
}

message QueryViewRequest {
    // View describes the view to query.
    tkd.tasks.v1.View view = 1 [
        (buf.validate.field).required = true
    ];

    // BoardIds might be set to a list of board ids to further limit
    // the returned tasks.
    repeated string board_ids = 2;

    // Pagination holds pagination settings for the query.
    // Note that the Pagination.Sort field is ignored
    // since sorting is already specified in the QueryViewRequest.View.Sort.
    tkd.common.v1.Pagination pagination = 3;
}

message TaskGroup{
    // GroupValue holds the value for this group.
    google.protobuf.Any group_value = 1;

    // Tasks holds all tasks for that group.
    repeated Task tasks = 2;

    // ReadMask can be used to limit which fields of the response
    // message should be set.
    // If unset or with empty paths, the full response is returned.
    google.protobuf.FieldMask read_mask = 3;
}

message QueryViewResponse {
    // GroupByField holds the field name that was used for
    // grouping. This one is copied from the QueryViewRequest.view.group_by_field
    string group_by_field = 1;

    // Groups holds all returned task groups.
    repeated TaskGroup groups = 2; 

    // Board holds all definitions of all tasks boards that are part of
    // the response.
    repeated Board boards = 3;
}