syntax = "proto3";

package tkd.survey.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "buf/validate/validate.proto";
import "tkd/common/v1/descriptor.proto";

message Survey {
    // Name is the name of the survey and must be unique.
    string name = 1 [
        (buf.validate.field).required = true
    ];

    // DisplayName holds a human readable display name for the survey.
    string display_name = 2 [
        (buf.validate.field).required = true
    ];

    // Definition holds the surveyjs.io JSON defintion.
    google.protobuf.Struct definition = 3 [
        (buf.validate.field).required = true
    ];

    // Schema holds the JSON schema used to validate
    // answers.
    google.protobuf.Struct schema = 10 [
        (buf.validate.field).required = true
    ];

    // CreateTime is the time when the survey has been created.
    google.protobuf.Timestamp create_time = 4;

    // Creator is the ID of the user that created the survey 
    string creator = 5;

    // ValidUntil holds the time until the survey is valid and
    // can be filled out.
    google.protobuf.Timestamp valid_until = 6;

    // Published indicates whether or not the survey is ready
    // and can be filled out.
    bool published = 7;

    // EligibleUserIds holds a list of user ids that are permitted
    // for this survey.
    //
    // If eligible_user_ids and eligible_role_ids are both empty,
    // every user is allowed to perform the survey.
    repeated string eligible_user_ids = 8;

    // EligibleRoleIds holds a list of role ids that are permitted
    // for this survey.
    //
    // If eligible_user_ids and eligible_role_ids are both empty,
    // every user is allowed to perform the survey.
    repeated string eligible_role_ids = 9;
}

service SurveyService {
    rpc CreateSurvey(CreateSurveyRequest) returns (Survey){
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }

    rpc DeleteSurvey(DeleteSurveyRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }

    rpc ListSurveyDefinitions(ListSurveyDefinitionsRequest) returns (ListSurveyDefinitionsResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }

    rpc SaveSurveyVote(SaveSurveyVoteRequest) returns (google.protobuf.Empty) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED,
        };
    }
}

message CreateSurveyRequest {
    Survey survey = 1 [
        (buf.validate.field).required = true
    ];
}

message DeleteSurveyRequest {
    string survey_name = 1 [
        (buf.validate.field).required = true
    ];
}

message ListSurveyDefinitionsRequest {
    // TODO(ppacher): add pagination and filtering support
}

message ListSurveyDefinitionsResponse {
    repeated Survey surveys = 1;
}

message SaveSurveyVoteRequest {
    string survey_name = 1 [
        (buf.validate.field).required = true
    ];

    google.protobuf.Struct values = 2;
}