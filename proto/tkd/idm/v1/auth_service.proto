syntax = "proto3";

package tkd.idm.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "tkd/idm/v1/user.proto";
import "tkd/common/v1/descriptor.proto";
import "buf/validate/validate.proto";

// AuthService provides methods for authentication to the
// services hosted and managed by Tierklinik Dobersberg (TKD).
service AuthService {
  // Login requests authentication. The authentication type (flow) is
  // determined by the initial request and may require sub-sequent calls
  // to full-fill the requirements of the choosen authentication flow.
  //
  // Upon success, a LoginResponse with a AccessTokenResponse is returned to
  // the caller containing a short lived access token (typically about ~24h).
  // In addition, a "Set-Cookie" header is appended to the response that contains
  // a HttpOnly, Secure (if not in dev-mode) cookie with a long-lived refresh token
  // (~ about a month).
  //
  // In case the access token expires the client is expected to call the RefreshToken
  // endpoint to retrieve a new access token.
  //
  // Refresh tokens cannot be re-newed like this but require a full re-authentication
  // using the Login method.
  rpc Login(LoginRequest) returns (LoginResponse) {}

  // Logout invalidates the current access token that was used to call the 
  // method. If a refresh token is appended in the logout request, it will be invalidated
  // as well.
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (tkd.common.v1.auth) = {
      require: AUTH_REQ_REQUIRED;
    };
  }

  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse) {}
  
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}

  rpc Introspect(IntrospectRequest) returns (IntrospectResponse) {
    option (tkd.common.v1.auth) = {
      require: AUTH_REQ_REQUIRED
    };
  }

  rpc GenerateRegistrationToken (GenerateRegistrationTokenRequest) returns (GenerateRegistrationTokenResponse) {
    option (tkd.common.v1.auth) = {
      require: AUTH_REQ_REQUIRED,
      allowed_roles: ["idm_superuser", "idm_user_inviter"]
    };
  }

  // Unauthenticated on purpose
  rpc ValidateRegistrationToken (ValidateRegistrationTokenRequest) returns (ValidateRegistrationTokenResponse) {}

  // Unauthenticated on purpose
  rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse) {}
}

enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0;
  AUTH_TYPE_PASSWORD = 1;
  AUTH_TYPE_TOTP = 2;
}

message PasswordAuth {
  string username = 1;
  string password = 2;
}

message TotpAuth {
  string code = 1;
  string state = 2;
}

message LoginRequest {
  AuthType auth_type = 1;
  bool no_refresh_token = 2;

  oneof auth {
    PasswordAuth password = 3;
    TotpAuth totp = 4;
  }

  // The URL that should be redirected to
  // once the authentication is successfull.
  string requested_redirect = 5;
  google.protobuf.Duration ttl = 6;
}

message AccessTokenResponse {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
  User user = 3;
}

enum RequiredMFAKind {
  REQUIRED_MFA_KIND_UNSPECIFIED = 0;
  REQUIRED_MFA_KIND_TOTP = 1;
}

message MFARequiredResponse {
  RequiredMFAKind kind = 1; 
  string state = 2;
}

message LoginResponse {
  oneof response {
    AccessTokenResponse access_token = 1;
    MFARequiredResponse mfa_required = 2;
  }

  // If set, the client is expected to redirect the
  // user to the returned URL. The url is sanitized and
  // validated to not allow open-redirects.
  string redirect_to = 5;
}

message LogoutRequest {
  // empty on purpose
}
message LogoutResponse {
  // empty on purpose
}

message RefreshTokenRequest {
  google.protobuf.Duration ttl = 1;
  string requested_redirect = 2;
}

message RefreshTokenResponse {
  AccessTokenResponse access_token = 1;
  string redirect_to = 2;
}

message IntrospectRequest {
  // empty on purpose
}

message IntrospectResponse {
  Profile profile = 1;
}

message GenerateRegistrationTokenRequest {
  google.protobuf.Duration ttl = 1;
  uint64 max_count = 2;
  repeated string initial_roles = 3;
}

message GenerateRegistrationTokenResponse {
  string token = 1;
}

message ValidateRegistrationTokenRequest {
  string token = 1;
}

message ValidateRegistrationTokenResponse {}

message RegisterUserRequest {
  string registration_token = 1;

  string username = 2 [
    (buf.validate.field).required = true
  ];

  string password = 3 [
    (buf.validate.field).required = true
  ];
}

message RegisterUserResponse {
  AccessTokenResponse access_token = 1;
}

message PasswordReset {
  string token = 1 [(buf.validate.field).required = true];
  string new_password = 2 [(buf.validate.field).required = true];
}

message RequestPasswordResetRequest {
  oneof kind {
    string email = 1;
    PasswordReset password_reset = 2;
  }
}
message RequestPasswordResetResponse {}