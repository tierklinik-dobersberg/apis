syntax = "proto3";

package tkd.idm.v1;

import "buf/validate/validate.proto";
import "tkd/idm/v1/user.proto";
import "tkd/common/v1/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";

service SelfServiceService {
    rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    // E-Mails
    rpc AddEmailAddress (AddEmailAddressRequest) returns (AddEmailAddressResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc DeleteEmailAddress (DeleteEmailAddressRequest) returns (DeleteEmailAddressResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc MarkEmailAsPrimary (MarkEmailAsPrimaryRequest) returns (MarkEmailAsPrimaryResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc ValidateEmail (ValidateEmailRequest) returns (ValidateEmailResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    // Addresses
    rpc AddAddress (AddAddressRequest) returns (AddAddressResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc UpdateAddress (UpdateAddressRequest) returns (UpdateAddressResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    // Phone Numbers
    rpc AddPhoneNumber(AddPhoneNumberRequest) returns (AddPhoneNumberResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc DeletePhoneNumber(DeletePhoneNumberRequest) returns (DeletePhoneNumberResponse){
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc MarkPhoneNumberAsPrimary (MarkPhoneNumberAsPrimaryRequest) returns (MarkPhoneNumberAsPrimaryResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc ValidatePhoneNumber (ValidatePhoneNumberRequest) returns (ValidatePhoneNumberResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    // WebAuthN
    rpc GetRegisteredPasskeys(GetRegisteredPasskeysRequest) returns (GetRegisteredPasskeysResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc RemovePasskey(RemovePasskeyRequest) returns (RemovePasskeyResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }

    // TODO(ppacher): add WebAuthN support here

    // Two-Factor authentication
    rpc Enroll2FA (Enroll2FARequest) returns (Enroll2FAResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc Remove2FA (Remove2FARequest) returns (Remove2FAResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
    rpc GenerateRecoveryCodes(GenerateRecoveryCodesRequest) returns (GenerateRecoveryCodesResponse) {
        option (tkd.common.v1.auth) = {
            require: AUTH_REQ_REQUIRED
        };
    }
}

message ChangePasswordRequest {
    string old_password = 1 [
        (buf.validate.field).string.min_len = 1
    ];

    string new_password = 2 [
        (buf.validate.field).string.min_len = 4
    ];
}
message ChangePasswordResponse {}

message UpdateProfileRequest {
    string username = 1 [
        (buf.validate.field).string.min_len = 3,
        (buf.validate.field).ignore_empty = true
    ];

    string display_name = 2 [
        (buf.validate.field).string.min_len = 3,
        (buf.validate.field).ignore_empty = true
    ];

    string first_name = 3;
    string last_name = 4;

    map<string, google.protobuf.Value> extra = 5;

    string avatar = 6;
    string birthday = 7;


    google.protobuf.FieldMask field_mask = 8;
}

message UpdateProfileResponse {
    User user = 1;
}

message ValidateEmailRequest {
    oneof kind {
        string email_id = 1;
        string token = 2;
    }
}

message ValidateEmailResponse {}

message AddEmailAddressRequest {
    string email = 1 [
        (buf.validate.field).string.email = true
    ];
}

message AddEmailAddressResponse {
    repeated EMail emails = 1;
}

message DeleteEmailAddressRequest {
    string id = 1;
}

message DeleteEmailAddressResponse {
    repeated EMail emails = 1;
}

message AddAddressRequest {
  string city_code = 2 [
        (buf.validate.field).string = {
        pattern: "[0-9]+",
        max_bytes: 16
    }
  ];
  string city_name = 3 [
    (buf.validate.field).string.min_len = 1
  ];
  string street = 4 [
    (buf.validate.field).string.min_len = 1
  ];
  string extra = 5;
}

message AddAddressResponse {
    repeated Address addresses = 1;
}

message UpdateAddressRequest {
  string id = 1 [
    (buf.validate.field).required = true
  ];

  string city_code = 2 [
    (buf.validate.field).string = {
        pattern: "[0-9]+",
        max_bytes: 16
    },
    (buf.validate.field).ignore_empty = true
  ];
  string city_name = 3 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).ignore_empty = true
  ];
  string street = 4 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).ignore_empty = true
  ];
  string extra = 5;

  google.protobuf.FieldMask field_mask = 6;
}

message UpdateAddressResponse {
    repeated Address addresses = 1;
}

message DeleteAddressRequest {
    string id = 1 [(buf.validate.field).required = true];
}
message DeleteAddressResponse {
    repeated Address addresses = 1;
}

message MarkEmailAsPrimaryRequest {
    string id = 1 [(buf.validate.field).required = true];
}
message MarkEmailAsPrimaryResponse {
    // TODO(ppacher): return all emails here?
}

message AddPhoneNumberRequest {
    string number = 1 [(buf.validate.field).required = true];
}

message AddPhoneNumberResponse {
    PhoneNumber phone_number = 1;
}
message DeletePhoneNumberRequest {
    string id = 1 [(buf.validate.field).required = true];
}
message DeletePhoneNumberResponse {}
message MarkPhoneNumberAsPrimaryRequest {
    string id = 1 [(buf.validate.field).required = true];
}
message MarkPhoneNumberAsPrimaryResponse{}

message ValidatePhoneNumberRequest{
    oneof step {
        string id = 1;
        string code = 2; 
    }
}

message ValidatePhoneNumberResponse{
}

message EnrollTOTPRequestStep1 {}

message EnrollTOTPRequestStep2 {
    string verify_code = 1;
    string secret = 2;
    string secret_hmac = 3;
}

message Enroll2FARequest {
    oneof kind {
        EnrollTOTPRequestStep1 totp_step1 = 1;
        EnrollTOTPRequestStep2 totp_step2 = 2;
    }
}

message EnrollTOTPResponseStep1 {
    string secret = 2;
    string qr_code = 3;
    string secret_hmac = 4;
    string url = 5;
}

message EnrollTOTPResponseStep2 {}

message Enroll2FAResponse {
    oneof kind {
        EnrollTOTPResponseStep1 totp_step1 = 1;
        EnrollTOTPResponseStep2 totp_step2 = 2;
    }
}

message Remove2FARequest {
    oneof kind {
        // If set and valid, the TOTP 2FA will be disabled.
        string totp_code = 1;
    }
}

message Remove2FAResponse {}
message GenerateRecoveryCodesRequest {}
message GenerateRecoveryCodesResponse {
    repeated string recovery_codes = 1;
}

message RegisteredPasskey {
    string id = 1;
    string client_name = 2;
    string client_os = 3;
    string client_device = 4;
    string cred_type = 5;
}

message GetRegisteredPasskeysRequest {}
message GetRegisteredPasskeysResponse {
    repeated RegisteredPasskey passkeys = 1;
}

message RemovePasskeyRequest {
   string id = 1 [(buf.validate.field).required = true];
}
message RemovePasskeyResponse {}