// @generated by protoc-gen-es v1.2.0 with parameter "target=js+ts"
// @generated from file tkd/userd/v1/user.proto (package tkd.userd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * @generated from message tkd.userd.v1.EMail
 */
export class EMail extends Message<EMail> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bool verified = 2;
   */
  verified = false;

  constructor(data?: PartialMessage<EMail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.userd.v1.EMail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EMail {
    return new EMail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EMail {
    return new EMail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EMail {
    return new EMail().fromJsonString(jsonString, options);
  }

  static equals(a: EMail | PlainMessage<EMail> | undefined, b: EMail | PlainMessage<EMail> | undefined): boolean {
    return proto3.util.equals(EMail, a, b);
  }
}

/**
 * @generated from message tkd.userd.v1.Address
 */
export class Address extends Message<Address> {
  /**
   * @generated from field: string city_code = 1;
   */
  cityCode = "";

  /**
   * @generated from field: string city_name = 2;
   */
  cityName = "";

  /**
   * @generated from field: string street = 3;
   */
  street = "";

  /**
   * @generated from field: string extra = 4;
   */
  extra = "";

  constructor(data?: PartialMessage<Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.userd.v1.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "city_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extra", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address {
    return new Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJsonString(jsonString, options);
  }

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean {
    return proto3.util.equals(Address, a, b);
  }
}

/**
 * @generated from message tkd.userd.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: string first_name = 4;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 5;
   */
  lastName = "";

  /**
   * @generated from field: repeated tkd.userd.v1.Address addresses = 6;
   */
  addresses: Address[] = [];

  /**
   * @generated from field: repeated string phone_numbers = 7;
   */
  phoneNumbers: string[] = [];

  /**
   * @generated from field: repeated tkd.userd.v1.EMail email_addresses = 8;
   */
  emailAddresses: EMail[] = [];

  /**
   * @generated from field: map<string, google.protobuf.Value> extra = 9;
   */
  extra: { [key: string]: Value } = {};

  /**
   * @generated from field: string avatar = 10;
   */
  avatar = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.userd.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "addresses", kind: "message", T: Address, repeated: true },
    { no: 7, name: "phone_numbers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "email_addresses", kind: "message", T: EMail, repeated: true },
    { no: 9, name: "extra", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 10, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

