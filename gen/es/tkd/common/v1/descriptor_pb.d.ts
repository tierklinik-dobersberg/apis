// @generated by protoc-gen-es v1.3.0 with parameter "target=js+dts"
// @generated from file tkd/common/v1/descriptor.proto (package tkd.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum tkd.common.v1.AuthRequirement
 */
export declare enum AuthRequirement {
  /**
   * @generated from enum value: AUTH_REQ_UNSPECIFIED = 0;
   */
  AUTH_REQ_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTH_REQ_REQUIRED = 1;
   */
  AUTH_REQ_REQUIRED = 1,
}

/**
 * @generated from message tkd.common.v1.AuthDecorator
 */
export declare class AuthDecorator extends Message<AuthDecorator> {
  /**
   * @generated from field: tkd.common.v1.AuthRequirement require = 1;
   */
  require: AuthRequirement;

  /**
   * @generated from field: repeated string allowed_roles = 2;
   */
  allowedRoles: string[];

  constructor(data?: PartialMessage<AuthDecorator>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.common.v1.AuthDecorator";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthDecorator;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthDecorator;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthDecorator;

  static equals(a: AuthDecorator | PlainMessage<AuthDecorator> | undefined, b: AuthDecorator | PlainMessage<AuthDecorator> | undefined): boolean;
}

/**
 * @generated from message tkd.common.v1.PrivacyACL
 */
export declare class PrivacyACL extends Message<PrivacyACL> {
  /**
   * The field mask defined which field are accessible to
   * anyone (maybe authenticated) if none of the other
   * settings allow access to all fields.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 1;
   */
  fieldMask?: FieldMask;

  /**
   * The name of the owner ID field. If set, and the authenticated
   * user has the same ID, access to all fields is permitted.
   *
   * @generated from field: string owner_field_name = 2;
   */
  ownerFieldName: string;

  /**
   * A list of roles that have access to all fields.
   *
   * @generated from field: repeated string allowed_roles = 3;
   */
  allowedRoles: string[];

  constructor(data?: PartialMessage<PrivacyACL>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.common.v1.PrivacyACL";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyACL;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyACL;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyACL;

  static equals(a: PrivacyACL | PlainMessage<PrivacyACL> | undefined, b: PrivacyACL | PlainMessage<PrivacyACL> | undefined): boolean;
}

