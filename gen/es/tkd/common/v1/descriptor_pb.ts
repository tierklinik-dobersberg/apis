// @generated by protoc-gen-es v1.2.1 with parameter "target=js+ts"
// @generated from file tkd/common/v1/descriptor.proto (package tkd.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum tkd.common.v1.AuthRequirement
 */
export enum AuthRequirement {
  /**
   * @generated from enum value: AUTH_REQ_UNSPECIFIED = 0;
   */
  AUTH_REQ_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTH_REQ_REQUIRED = 1;
   */
  AUTH_REQ_REQUIRED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthRequirement)
proto3.util.setEnumType(AuthRequirement, "tkd.common.v1.AuthRequirement", [
  { no: 0, name: "AUTH_REQ_UNSPECIFIED" },
  { no: 1, name: "AUTH_REQ_REQUIRED" },
]);

/**
 * @generated from message tkd.common.v1.AuthDecorator
 */
export class AuthDecorator extends Message<AuthDecorator> {
  /**
   * @generated from field: tkd.common.v1.AuthRequirement require = 1;
   */
  require = AuthRequirement.AUTH_REQ_UNSPECIFIED;

  /**
   * @generated from field: repeated string allowed_roles = 2;
   */
  allowedRoles: string[] = [];

  constructor(data?: PartialMessage<AuthDecorator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.common.v1.AuthDecorator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "require", kind: "enum", T: proto3.getEnumType(AuthRequirement) },
    { no: 2, name: "allowed_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthDecorator {
    return new AuthDecorator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthDecorator {
    return new AuthDecorator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthDecorator {
    return new AuthDecorator().fromJsonString(jsonString, options);
  }

  static equals(a: AuthDecorator | PlainMessage<AuthDecorator> | undefined, b: AuthDecorator | PlainMessage<AuthDecorator> | undefined): boolean {
    return proto3.util.equals(AuthDecorator, a, b);
  }
}

/**
 * @generated from message tkd.common.v1.PrivacyACL
 */
export class PrivacyACL extends Message<PrivacyACL> {
  /**
   * The field mask defined which field are accessible to
   * anyone (maybe authenticated) if none of the other
   * settings allow access to all fields.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 1;
   */
  fieldMask?: FieldMask;

  /**
   * The name of the owner ID field. If set, and the authenticated
   * user has the same ID, access to all fields is permitted.
   *
   * @generated from field: string owner_field_name = 2;
   */
  ownerFieldName = "";

  /**
   * A list of roles that have access to all fields.
   *
   * @generated from field: repeated string allowed_roles = 3;
   */
  allowedRoles: string[] = [];

  constructor(data?: PartialMessage<PrivacyACL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.common.v1.PrivacyACL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_mask", kind: "message", T: FieldMask },
    { no: 2, name: "owner_field_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allowed_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyACL {
    return new PrivacyACL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyACL {
    return new PrivacyACL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyACL {
    return new PrivacyACL().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyACL | PlainMessage<PrivacyACL> | undefined, b: PrivacyACL | PlainMessage<PrivacyACL> | undefined): boolean {
    return proto3.util.equals(PrivacyACL, a, b);
  }
}

