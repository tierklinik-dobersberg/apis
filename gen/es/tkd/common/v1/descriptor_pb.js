// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts"
// @generated from file tkd/common/v1/descriptor.proto (package tkd.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FieldMask, MessageOptions, MethodOptions, proto3, ServiceOptions } from "@bufbuild/protobuf";

/**
 * @generated from enum tkd.common.v1.AuthRequirement
 */
export const AuthRequirement = /*@__PURE__*/ proto3.makeEnum(
  "tkd.common.v1.AuthRequirement",
  [
    {no: 0, name: "AUTH_REQ_UNSPECIFIED"},
    {no: 1, name: "AUTH_REQ_REQUIRED"},
    {no: 2, name: "AUTH_REQ_ADMIN"},
  ],
);

/**
 * @generated from message tkd.common.v1.ServiceAuthDecorator
 */
export const ServiceAuthDecorator = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.common.v1.ServiceAuthDecorator",
  () => [
    { no: 1, name: "admin_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message tkd.common.v1.AuthDecorator
 */
export const AuthDecorator = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.common.v1.AuthDecorator",
  () => [
    { no: 1, name: "require", kind: "enum", T: proto3.getEnumType(AuthRequirement) },
    { no: 2, name: "allowed_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "admin_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message tkd.common.v1.PrivacyACL
 */
export const PrivacyACL = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.common.v1.PrivacyACL",
  () => [
    { no: 1, name: "field_mask", kind: "message", T: FieldMask },
    { no: 2, name: "owner_field_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allowed_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from extension: string default_host = 2022;
 */
export const default_host = proto3.makeExtension(
  "tkd.common.v1.default_host", 
  ServiceOptions, 
  { no: 2022, kind: "scalar", T: 9 /* ScalarType.STRING */ },
);

/**
 * @generated from extension: tkd.common.v1.ServiceAuthDecorator service_auth = 2023;
 */
export const service_auth = proto3.makeExtension(
  "tkd.common.v1.service_auth", 
  ServiceOptions, 
  () => ({ no: 2023, kind: "message", T: ServiceAuthDecorator }),
);

/**
 * @generated from extension: tkd.common.v1.AuthDecorator auth = 2022;
 */
export const auth = proto3.makeExtension(
  "tkd.common.v1.auth", 
  MethodOptions, 
  () => ({ no: 2022, kind: "message", T: AuthDecorator }),
);

/**
 * @generated from extension: tkd.common.v1.PrivacyACL readable = 2026;
 */
export const readable = proto3.makeExtension(
  "tkd.common.v1.readable", 
  MessageOptions, 
  () => ({ no: 2026, kind: "message", T: PrivacyACL }),
);

/**
 * @generated from extension: tkd.common.v1.PrivacyACL self_service = 2027;
 */
export const self_service = proto3.makeExtension(
  "tkd.common.v1.self_service", 
  MessageOptions, 
  () => ({ no: 2027, kind: "message", T: PrivacyACL }),
);

