// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file tkd/comment/v1/comment.proto (package tkd.comment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file tkd/comment/v1/comment.proto.
 */
export declare const file_tkd_comment_v1_comment: GenFile;

/**
 * @generated from message tkd.comment.v1.Scope
 */
export declare type Scope = Message<"tkd.comment.v1.Scope"> & {
  /**
   * The unique identifier of the scope. This must not be changed
   * once created and is referenced by comments.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The display name of the comment scope. This is used
   * for notifications.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * If set, the type of notification that will be sent for answers and
   * mentions.
   *
   * @generated from field: tkd.comment.v1.NotificationType notifcation_type = 3;
   */
  notifcationType: NotificationType;

  /**
   * A go template/text template to generate a URL to open the comment.
   * The template context is set to the comment.
   *
   * Example:
   *      "https://roster.dobersberg.vet/comment/open/{{ .Scope }}//{{ .Id }}"
   *
   * @generated from field: string view_comment_url_template = 4;
   */
  viewCommentUrlTemplate: string;

  /**
   * A list of user IDs that are marked as scope owners.
   * Owners will always get notfied when a new comment has been
   * created in an owned scope.
   *
   * @generated from field: repeated string scope_owner_ids = 5;
   */
  scopeOwnerIds: string[];
};

/**
 * Describes the message tkd.comment.v1.Scope.
 * Use `create(ScopeSchema)` to create a new message.
 */
export declare const ScopeSchema: GenMessage<Scope>;

/**
 * @generated from message tkd.comment.v1.Comment
 */
export declare type Comment = Message<"tkd.comment.v1.Comment"> & {
  /**
   * The scope of the comment.
   *
   * @generated from field: string scope = 1;
   */
  scope: string;

  /**
   * The scope-unique ID of the comment.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The content of the comment in markdown format.
   *
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * An optional Id of the parent comment. This is only set if the
   * comment is an answer to another comment.
   *
   * @generated from field: string parent_id = 4;
   */
  parentId: string;

  /**
   * The timestamp at which the comment has been created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * The user identifier that created the comment.
   *
   * @generated from field: string creator_id = 6;
   */
  creatorId: string;

  /**
   * A opaque reference of the comment.
   *
   * @generated from field: string reference = 7;
   */
  reference: string;
};

/**
 * Describes the message tkd.comment.v1.Comment.
 * Use `create(CommentSchema)` to create a new message.
 */
export declare const CommentSchema: GenMessage<Comment>;

/**
 * @generated from message tkd.comment.v1.CommentTree
 */
export declare type CommentTree = Message<"tkd.comment.v1.CommentTree"> & {
  /**
   * The actual comment.
   *
   * @generated from field: tkd.comment.v1.Comment comment = 1;
   */
  comment?: Comment;

  /**
   * A list of answers to this comment.
   *
   * @generated from field: repeated tkd.comment.v1.CommentTree answers = 2;
   */
  answers: CommentTree[];
};

/**
 * Describes the message tkd.comment.v1.CommentTree.
 * Use `create(CommentTreeSchema)` to create a new message.
 */
export declare const CommentTreeSchema: GenMessage<CommentTree>;

/**
 * CreateScopeRequest is used to create a new comment scope.
 *
 * @generated from message tkd.comment.v1.CreateScopeRequest
 */
export declare type CreateScopeRequest = Message<"tkd.comment.v1.CreateScopeRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: tkd.comment.v1.NotificationType notifcation_type = 3;
   */
  notifcationType: NotificationType;

  /**
   * See Scope.view_comment_url_template
   *
   * @generated from field: string view_comment_url_template = 4;
   */
  viewCommentUrlTemplate: string;

  /**
   * @generated from field: repeated string scope_owner_ids = 5;
   */
  scopeOwnerIds: string[];
};

/**
 * Describes the message tkd.comment.v1.CreateScopeRequest.
 * Use `create(CreateScopeRequestSchema)` to create a new message.
 */
export declare const CreateScopeRequestSchema: GenMessage<CreateScopeRequest>;

/**
 * CreateScopeResponse is returned when a new comment scope has been created
 * and includes the created scope definition.
 *
 * @generated from message tkd.comment.v1.CreateScopeResponse
 */
export declare type CreateScopeResponse = Message<"tkd.comment.v1.CreateScopeResponse"> & {
  /**
   * @generated from field: tkd.comment.v1.Scope scope = 1;
   */
  scope?: Scope;
};

/**
 * Describes the message tkd.comment.v1.CreateScopeResponse.
 * Use `create(CreateScopeResponseSchema)` to create a new message.
 */
export declare const CreateScopeResponseSchema: GenMessage<CreateScopeResponse>;

/**
 * @generated from message tkd.comment.v1.UpdateScopeRequest
 */
export declare type UpdateScopeRequest = Message<"tkd.comment.v1.UpdateScopeRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: tkd.comment.v1.NotificationType notifcation_type = 3;
   */
  notifcationType: NotificationType;

  /**
   * @generated from field: string view_comment_url_template = 4;
   */
  viewCommentUrlTemplate: string;

  /**
   * @generated from field: repeated string add_scope_owner_ids = 5;
   */
  addScopeOwnerIds: string[];

  /**
   * @generated from field: repeated string remove_scope_owner_ids = 6;
   */
  removeScopeOwnerIds: string[];

  /**
   * @generated from field: google.protobuf.FieldMask write_mask = 7;
   */
  writeMask?: FieldMask;
};

/**
 * Describes the message tkd.comment.v1.UpdateScopeRequest.
 * Use `create(UpdateScopeRequestSchema)` to create a new message.
 */
export declare const UpdateScopeRequestSchema: GenMessage<UpdateScopeRequest>;

/**
 * @generated from message tkd.comment.v1.UpdateScopeResponse
 */
export declare type UpdateScopeResponse = Message<"tkd.comment.v1.UpdateScopeResponse"> & {
  /**
   * @generated from field: tkd.comment.v1.Scope scope = 1;
   */
  scope?: Scope;
};

/**
 * Describes the message tkd.comment.v1.UpdateScopeResponse.
 * Use `create(UpdateScopeResponseSchema)` to create a new message.
 */
export declare const UpdateScopeResponseSchema: GenMessage<UpdateScopeResponse>;

/**
 *
 *
 * @generated from message tkd.comment.v1.ListScopeRequest
 */
export declare type ListScopeRequest = Message<"tkd.comment.v1.ListScopeRequest"> & {
};

/**
 * Describes the message tkd.comment.v1.ListScopeRequest.
 * Use `create(ListScopeRequestSchema)` to create a new message.
 */
export declare const ListScopeRequestSchema: GenMessage<ListScopeRequest>;

/**
 * @generated from message tkd.comment.v1.ListScopeResponse
 */
export declare type ListScopeResponse = Message<"tkd.comment.v1.ListScopeResponse"> & {
  /**
   * @generated from field: repeated tkd.comment.v1.Scope scopes = 1;
   */
  scopes: Scope[];
};

/**
 * Describes the message tkd.comment.v1.ListScopeResponse.
 * Use `create(ListScopeResponseSchema)` to create a new message.
 */
export declare const ListScopeResponseSchema: GenMessage<ListScopeResponse>;

/**
 * Delete Scope
 *
 * @generated from message tkd.comment.v1.DeleteScopeRequest
 */
export declare type DeleteScopeRequest = Message<"tkd.comment.v1.DeleteScopeRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tkd.comment.v1.DeleteScopeRequest.
 * Use `create(DeleteScopeRequestSchema)` to create a new message.
 */
export declare const DeleteScopeRequestSchema: GenMessage<DeleteScopeRequest>;

/**
 * @generated from message tkd.comment.v1.DeleteScopeResponse
 */
export declare type DeleteScopeResponse = Message<"tkd.comment.v1.DeleteScopeResponse"> & {
};

/**
 * Describes the message tkd.comment.v1.DeleteScopeResponse.
 * Use `create(DeleteScopeResponseSchema)` to create a new message.
 */
export declare const DeleteScopeResponseSchema: GenMessage<DeleteScopeResponse>;

/**
 * @generated from message tkd.comment.v1.RootComment
 */
export declare type RootComment = Message<"tkd.comment.v1.RootComment"> & {
  /**
   * @generated from field: string scope = 1;
   */
  scope: string;

  /**
   * @generated from field: string reference = 2;
   */
  reference: string;
};

/**
 * Describes the message tkd.comment.v1.RootComment.
 * Use `create(RootCommentSchema)` to create a new message.
 */
export declare const RootCommentSchema: GenMessage<RootComment>;

/**
 * Create Comment
 *
 * @generated from message tkd.comment.v1.CreateCommentRequest
 */
export declare type CreateCommentRequest = Message<"tkd.comment.v1.CreateCommentRequest"> & {
  /**
   * @generated from oneof tkd.comment.v1.CreateCommentRequest.kind
   */
  kind: {
    /**
     * @generated from field: tkd.comment.v1.RootComment root = 1;
     */
    value: RootComment;
    case: "root";
  } | {
    /**
     * @generated from field: string parent_id = 2;
     */
    value: string;
    case: "parentId";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * @generated from field: google.protobuf.FieldMask read_mask = 4;
   */
  readMask?: FieldMask;
};

/**
 * Describes the message tkd.comment.v1.CreateCommentRequest.
 * Use `create(CreateCommentRequestSchema)` to create a new message.
 */
export declare const CreateCommentRequestSchema: GenMessage<CreateCommentRequest>;

/**
 * @generated from message tkd.comment.v1.CreateCommentResponse
 */
export declare type CreateCommentResponse = Message<"tkd.comment.v1.CreateCommentResponse"> & {
  /**
   * @generated from field: tkd.comment.v1.Comment comment = 1;
   */
  comment?: Comment;
};

/**
 * Describes the message tkd.comment.v1.CreateCommentResponse.
 * Use `create(CreateCommentResponseSchema)` to create a new message.
 */
export declare const CreateCommentResponseSchema: GenMessage<CreateCommentResponse>;

/**
 * List Comments
 *
 * @generated from message tkd.comment.v1.ListCommentsRequest
 */
export declare type ListCommentsRequest = Message<"tkd.comment.v1.ListCommentsRequest"> & {
  /**
   * @generated from field: string scope = 1;
   */
  scope: string;

  /**
   * @generated from field: string reference = 2;
   */
  reference: string;

  /**
   * @generated from field: bool recurse = 3;
   */
  recurse: boolean;

  /**
   * @generated from field: bool render_html = 4;
   */
  renderHtml: boolean;
};

/**
 * Describes the message tkd.comment.v1.ListCommentsRequest.
 * Use `create(ListCommentsRequestSchema)` to create a new message.
 */
export declare const ListCommentsRequestSchema: GenMessage<ListCommentsRequest>;

/**
 * @generated from message tkd.comment.v1.ListCommentsResponse
 */
export declare type ListCommentsResponse = Message<"tkd.comment.v1.ListCommentsResponse"> & {
  /**
   * @generated from field: repeated tkd.comment.v1.CommentTree result = 2;
   */
  result: CommentTree[];
};

/**
 * Describes the message tkd.comment.v1.ListCommentsResponse.
 * Use `create(ListCommentsResponseSchema)` to create a new message.
 */
export declare const ListCommentsResponseSchema: GenMessage<ListCommentsResponse>;

/**
 * Get Comments
 *
 * @generated from message tkd.comment.v1.GetCommentRequest
 */
export declare type GetCommentRequest = Message<"tkd.comment.v1.GetCommentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool recurse = 2;
   */
  recurse: boolean;

  /**
   * @generated from field: bool render_html = 3;
   */
  renderHtml: boolean;
};

/**
 * Describes the message tkd.comment.v1.GetCommentRequest.
 * Use `create(GetCommentRequestSchema)` to create a new message.
 */
export declare const GetCommentRequestSchema: GenMessage<GetCommentRequest>;

/**
 * @generated from message tkd.comment.v1.GetCommentResponse
 */
export declare type GetCommentResponse = Message<"tkd.comment.v1.GetCommentResponse"> & {
  /**
   * @generated from field: tkd.comment.v1.CommentTree result = 2;
   */
  result?: CommentTree;
};

/**
 * Describes the message tkd.comment.v1.GetCommentResponse.
 * Use `create(GetCommentResponseSchema)` to create a new message.
 */
export declare const GetCommentResponseSchema: GenMessage<GetCommentResponse>;

/**
 * @generated from enum tkd.comment.v1.NotificationType
 */
export enum NotificationType {
  /**
   * @generated from enum value: NOTIFICATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NOTIFICATION_TYPE_MAIL = 1;
   */
  MAIL = 1,

  /**
   * @generated from enum value: NOTIFICATION_TYPE_SMS = 2;
   */
  SMS = 2,
}

/**
 * Describes the enum tkd.comment.v1.NotificationType.
 */
export declare const NotificationTypeSchema: GenEnum<NotificationType>;

/**
 * @generated from service tkd.comment.v1.CommentService
 */
export declare const CommentService: GenService<{
  /**
   * @generated from rpc tkd.comment.v1.CommentService.CreateScope
   */
  createScope: {
    methodKind: "unary";
    input: typeof CreateScopeRequestSchema;
    output: typeof CreateScopeResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.UpdateScope
   */
  updateScope: {
    methodKind: "unary";
    input: typeof UpdateScopeRequestSchema;
    output: typeof UpdateScopeResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.ListScope
   */
  listScope: {
    methodKind: "unary";
    input: typeof ListScopeRequestSchema;
    output: typeof ListScopeResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.DeleteScope
   */
  deleteScope: {
    methodKind: "unary";
    input: typeof DeleteScopeRequestSchema;
    output: typeof DeleteScopeResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.CreateComment
   */
  createComment: {
    methodKind: "unary";
    input: typeof CreateCommentRequestSchema;
    output: typeof CreateCommentResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.GetComment
   */
  getComment: {
    methodKind: "unary";
    input: typeof GetCommentRequestSchema;
    output: typeof GetCommentResponseSchema;
  },
  /**
   * @generated from rpc tkd.comment.v1.CommentService.ListComments
   */
  listComments: {
    methodKind: "unary";
    input: typeof ListCommentsRequestSchema;
    output: typeof ListCommentsResponseSchema;
  },
}>;

