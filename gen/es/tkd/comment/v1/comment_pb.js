// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file tkd/comment/v1/comment.proto (package tkd.comment.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import { file_tkd_common_v1_descriptor } from "../../common/v1/descriptor_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file tkd/comment/v1/comment.proto.
 */
export const file_tkd_comment_v1_comment = /*@__PURE__*/
  fileDesc("Chx0a2QvY29tbWVudC92MS9jb21tZW50LnByb3RvEg50a2QuY29tbWVudC52MSKvAQoFU2NvcGUSFwoCaWQYASABKAlCC/r3GAfIAQFyAhADEhUKBG5hbWUYAiABKAlCB/r3GAPIAQESOgoQbm90aWZjYXRpb25fdHlwZRgDIAEoDjIgLnRrZC5jb21tZW50LnYxLk5vdGlmaWNhdGlvblR5cGUSIQoZdmlld19jb21tZW50X3VybF90ZW1wbGF0ZRgEIAEoCRIXCg9zY29wZV9vd25lcl9pZHMYBSADKAki0AEKB0NvbW1lbnQSGgoFc2NvcGUYASABKAlCC/r3GAfIAQFyAhADEhMKAmlkGAIgASgJQgf69xgDyAEBEhgKB2NvbnRlbnQYAyABKAlCB/r3GAPIAQESEQoJcGFyZW50X2lkGAQgASgJEjcKCmNyZWF0ZWRfYXQYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgf69xgDyAEBEhsKCmNyZWF0b3JfaWQYBiABKAlCB/r3GAPIAQESEQoJcmVmZXJlbmNlGAcgASgJImUKC0NvbW1lbnRUcmVlEigKB2NvbW1lbnQYASABKAsyFy50a2QuY29tbWVudC52MS5Db21tZW50EiwKB2Fuc3dlcnMYAiADKAsyGy50a2QuY29tbWVudC52MS5Db21tZW50VHJlZSK8AQoSQ3JlYXRlU2NvcGVSZXF1ZXN0EhcKAmlkGAEgASgJQgv69xgHyAEBcgIQAxIVCgRuYW1lGAIgASgJQgf69xgDyAEBEjoKEG5vdGlmY2F0aW9uX3R5cGUYAyABKA4yIC50a2QuY29tbWVudC52MS5Ob3RpZmljYXRpb25UeXBlEiEKGXZpZXdfY29tbWVudF91cmxfdGVtcGxhdGUYBCABKAkSFwoPc2NvcGVfb3duZXJfaWRzGAUgAygJIjsKE0NyZWF0ZVNjb3BlUmVzcG9uc2USJAoFc2NvcGUYASABKAsyFS50a2QuY29tbWVudC52MS5TY29wZSKHAgoSVXBkYXRlU2NvcGVSZXF1ZXN0EhcKAmlkGAEgASgJQgv69xgHyAEBcgIQAxIMCgRuYW1lGAIgASgJEjoKEG5vdGlmY2F0aW9uX3R5cGUYAyABKA4yIC50a2QuY29tbWVudC52MS5Ob3RpZmljYXRpb25UeXBlEiEKGXZpZXdfY29tbWVudF91cmxfdGVtcGxhdGUYBCABKAkSGwoTYWRkX3Njb3BlX293bmVyX2lkcxgFIAMoCRIeChZyZW1vdmVfc2NvcGVfb3duZXJfaWRzGAYgAygJEi4KCndyaXRlX21hc2sYByABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrIjsKE1VwZGF0ZVNjb3BlUmVzcG9uc2USJAoFc2NvcGUYASABKAsyFS50a2QuY29tbWVudC52MS5TY29wZSISChBMaXN0U2NvcGVSZXF1ZXN0IjoKEUxpc3RTY29wZVJlc3BvbnNlEiUKBnNjb3BlcxgBIAMoCzIVLnRrZC5jb21tZW50LnYxLlNjb3BlIikKEkRlbGV0ZVNjb3BlUmVxdWVzdBITCgJpZBgBIAEoCUIH+vcYA8gBASIVChNEZWxldGVTY29wZVJlc3BvbnNlIkEKC1Jvb3RDb21tZW50EhYKBXNjb3BlGAEgASgJQgf69xgDyAEBEhoKCXJlZmVyZW5jZRgCIAEoCUIH+vcYA8gBASKxAQoUQ3JlYXRlQ29tbWVudFJlcXVlc3QSKwoEcm9vdBgBIAEoCzIbLnRrZC5jb21tZW50LnYxLlJvb3RDb21tZW50SAASEwoJcGFyZW50X2lkGAIgASgJSAASGAoHY29udGVudBgDIAEoCUIH+vcYA8gBARItCglyZWFkX21hc2sYBCABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrQg4KBGtpbmQSBvr3GAIIASJBChVDcmVhdGVDb21tZW50UmVzcG9uc2USKAoHY29tbWVudBgBIAEoCzIXLnRrZC5jb21tZW50LnYxLkNvbW1lbnQiZgoTTGlzdENvbW1lbnRzUmVxdWVzdBIWCgVzY29wZRgBIAEoCUIH+vcYA8gBARIRCglyZWZlcmVuY2UYAiABKAkSDwoHcmVjdXJzZRgDIAEoCBITCgtyZW5kZXJfaHRtbBgEIAEoCCJDChRMaXN0Q29tbWVudHNSZXNwb25zZRIrCgZyZXN1bHQYAiADKAsyGy50a2QuY29tbWVudC52MS5Db21tZW50VHJlZSJFChFHZXRDb21tZW50UmVxdWVzdBIKCgJpZBgBIAEoCRIPCgdyZWN1cnNlGAIgASgIEhMKC3JlbmRlcl9odG1sGAMgASgIIkEKEkdldENvbW1lbnRSZXNwb25zZRIrCgZyZXN1bHQYAiABKAsyGy50a2QuY29tbWVudC52MS5Db21tZW50VHJlZSpsChBOb3RpZmljYXRpb25UeXBlEiEKHU5PVElGSUNBVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASGgoWTk9USUZJQ0FUSU9OX1RZUEVfTUFJTBABEhkKFU5PVElGSUNBVElPTl9UWVBFX1NNUxACMr0FCg5Db21tZW50U2VydmljZRJdCgtDcmVhdGVTY29wZRIiLnRrZC5jb21tZW50LnYxLkNyZWF0ZVNjb3BlUmVxdWVzdBojLnRrZC5jb21tZW50LnYxLkNyZWF0ZVNjb3BlUmVzcG9uc2UiBbJ+AggCEl0KC1VwZGF0ZVNjb3BlEiIudGtkLmNvbW1lbnQudjEuVXBkYXRlU2NvcGVSZXF1ZXN0GiMudGtkLmNvbW1lbnQudjEuVXBkYXRlU2NvcGVSZXNwb25zZSIFsn4CCAISVwoJTGlzdFNjb3BlEiAudGtkLmNvbW1lbnQudjEuTGlzdFNjb3BlUmVxdWVzdBohLnRrZC5jb21tZW50LnYxLkxpc3RTY29wZVJlc3BvbnNlIgWyfgIIAhJdCgtEZWxldGVTY29wZRIiLnRrZC5jb21tZW50LnYxLkRlbGV0ZVNjb3BlUmVxdWVzdBojLnRrZC5jb21tZW50LnYxLkRlbGV0ZVNjb3BlUmVzcG9uc2UiBbJ+AggCEmMKDUNyZWF0ZUNvbW1lbnQSJC50a2QuY29tbWVudC52MS5DcmVhdGVDb21tZW50UmVxdWVzdBolLnRrZC5jb21tZW50LnYxLkNyZWF0ZUNvbW1lbnRSZXNwb25zZSIFsn4CCAESWgoKR2V0Q29tbWVudBIhLnRrZC5jb21tZW50LnYxLkdldENvbW1lbnRSZXF1ZXN0GiIudGtkLmNvbW1lbnQudjEuR2V0Q29tbWVudFJlc3BvbnNlIgWyfgIIARJgCgxMaXN0Q29tbWVudHMSIy50a2QuY29tbWVudC52MS5MaXN0Q29tbWVudHNSZXF1ZXN0GiQudGtkLmNvbW1lbnQudjEuTGlzdENvbW1lbnRzUmVzcG9uc2UiBbJ+AggBGhK6fg8KDWlkbV9zdXBlcnVzZXJCwwEKEmNvbS50a2QuY29tbWVudC52MUIMQ29tbWVudFByb3RvUAFaRWdpdGh1Yi5jb20vdGllcmtsaW5pay1kb2JlcnNiZXJnL2FwaXMvZ2VuL2dvL3RrZC9jb21tZW50L3YxO2NvbW1lbnR2MaICA1RDWKoCDlRrZC5Db21tZW50LlYxygIOVGtkXENvbW1lbnRcVjHiAhpUa2RcQ29tbWVudFxWMVxHUEJNZXRhZGF0YeoCEFRrZDo6Q29tbWVudDo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_tkd_common_v1_descriptor, file_google_protobuf_timestamp, file_google_protobuf_field_mask]);

/**
 * Describes the message tkd.comment.v1.Scope.
 * Use `create(ScopeSchema)` to create a new message.
 */
export const ScopeSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 0);

/**
 * Describes the message tkd.comment.v1.Comment.
 * Use `create(CommentSchema)` to create a new message.
 */
export const CommentSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 1);

/**
 * Describes the message tkd.comment.v1.CommentTree.
 * Use `create(CommentTreeSchema)` to create a new message.
 */
export const CommentTreeSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 2);

/**
 * Describes the message tkd.comment.v1.CreateScopeRequest.
 * Use `create(CreateScopeRequestSchema)` to create a new message.
 */
export const CreateScopeRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 3);

/**
 * Describes the message tkd.comment.v1.CreateScopeResponse.
 * Use `create(CreateScopeResponseSchema)` to create a new message.
 */
export const CreateScopeResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 4);

/**
 * Describes the message tkd.comment.v1.UpdateScopeRequest.
 * Use `create(UpdateScopeRequestSchema)` to create a new message.
 */
export const UpdateScopeRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 5);

/**
 * Describes the message tkd.comment.v1.UpdateScopeResponse.
 * Use `create(UpdateScopeResponseSchema)` to create a new message.
 */
export const UpdateScopeResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 6);

/**
 * Describes the message tkd.comment.v1.ListScopeRequest.
 * Use `create(ListScopeRequestSchema)` to create a new message.
 */
export const ListScopeRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 7);

/**
 * Describes the message tkd.comment.v1.ListScopeResponse.
 * Use `create(ListScopeResponseSchema)` to create a new message.
 */
export const ListScopeResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 8);

/**
 * Describes the message tkd.comment.v1.DeleteScopeRequest.
 * Use `create(DeleteScopeRequestSchema)` to create a new message.
 */
export const DeleteScopeRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 9);

/**
 * Describes the message tkd.comment.v1.DeleteScopeResponse.
 * Use `create(DeleteScopeResponseSchema)` to create a new message.
 */
export const DeleteScopeResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 10);

/**
 * Describes the message tkd.comment.v1.RootComment.
 * Use `create(RootCommentSchema)` to create a new message.
 */
export const RootCommentSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 11);

/**
 * Describes the message tkd.comment.v1.CreateCommentRequest.
 * Use `create(CreateCommentRequestSchema)` to create a new message.
 */
export const CreateCommentRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 12);

/**
 * Describes the message tkd.comment.v1.CreateCommentResponse.
 * Use `create(CreateCommentResponseSchema)` to create a new message.
 */
export const CreateCommentResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 13);

/**
 * Describes the message tkd.comment.v1.ListCommentsRequest.
 * Use `create(ListCommentsRequestSchema)` to create a new message.
 */
export const ListCommentsRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 14);

/**
 * Describes the message tkd.comment.v1.ListCommentsResponse.
 * Use `create(ListCommentsResponseSchema)` to create a new message.
 */
export const ListCommentsResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 15);

/**
 * Describes the message tkd.comment.v1.GetCommentRequest.
 * Use `create(GetCommentRequestSchema)` to create a new message.
 */
export const GetCommentRequestSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 16);

/**
 * Describes the message tkd.comment.v1.GetCommentResponse.
 * Use `create(GetCommentResponseSchema)` to create a new message.
 */
export const GetCommentResponseSchema = /*@__PURE__*/
  messageDesc(file_tkd_comment_v1_comment, 17);

/**
 * Describes the enum tkd.comment.v1.NotificationType.
 */
export const NotificationTypeSchema = /*@__PURE__*/
  enumDesc(file_tkd_comment_v1_comment, 0);

/**
 * @generated from enum tkd.comment.v1.NotificationType
 */
export const NotificationType = /*@__PURE__*/
  tsEnum(NotificationTypeSchema);

/**
 * @generated from service tkd.comment.v1.CommentService
 */
export const CommentService = /*@__PURE__*/
  serviceDesc(file_tkd_comment_v1_comment, 0);

