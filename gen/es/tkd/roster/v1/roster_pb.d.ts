// @generated by protoc-gen-es v1.10.0 with parameter "target=js+dts"
// @generated from file tkd/roster/v1/roster.proto (package tkd.roster.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ConstraintViolationList } from "./constraint_pb.js";
import type { TimeRange } from "../../common/v1/time_range_pb.js";
import type { WorkShift } from "./workshift_pb.js";
import type { DeliveryNotification } from "../../idm/v1/notify_service_pb.js";

/**
 * @generated from enum tkd.roster.v1.DayType
 */
export declare enum DayType {
  /**
   * @generated from enum value: DAY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DAY_TYPE_WORKDAY = 1;
   */
  WORKDAY = 1,

  /**
   * @generated from enum value: DAY_TYPE_WEEKEND = 2;
   */
  WEEKEND = 2,

  /**
   * @generated from enum value: DAY_TYPE_HOLIDAY = 3;
   */
  HOLIDAY = 3,
}

/**
 * @generated from enum tkd.roster.v1.ExportRosterType
 */
export declare enum ExportRosterType {
  /**
   * @generated from enum value: EXPORT_ROSTER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EXPORT_ROSTER_TYPE_PDF = 1;
   */
  PDF = 1,

  /**
   * @generated from enum value: EXPORT_ROSTER_TYPE_ICAL = 2;
   */
  ICAL = 2,

  /**
   * @generated from enum value: EXPORT_ROSTER_TYPE_HTML = 3;
   */
  HTML = 3,
}

/**
 * @generated from message tkd.roster.v1.RequiredShift
 */
export declare class RequiredShift extends Message<RequiredShift> {
  /**
   * From holds the time at which the shift begins.
   *
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * To holds the time at which the shift ends.
   *
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;

  /**
   * WorkShiftID is the ID of the work-shift definition.
   *
   * @generated from field: string work_shift_id = 3;
   */
  workShiftId: string;

  /**
   * EligibleUserIds is set to a list of user ids that are eligible for this
   * work-shift.
   *
   * @generated from field: repeated string eligible_user_ids = 4;
   */
  eligibleUserIds: string[];

  /**
   * OnHoliday is set to true if the shift is on a public holiday.
   *
   * @generated from field: bool on_holiday = 5;
   */
  onHoliday: boolean;

  /**
   * OnWeekend is set to true if the shift is on a week-end day (Saturday or Sunday).
   *
   * @generated from field: bool on_weekend = 6;
   */
  onWeekend: boolean;

  /**
   * ViolationsPerUserId is a map indexed with user ids that holds a list of
   * violations and resoning of why a user is not part of RequiredShift.eligible_user_ids
   * even if the user would be eligible by WorkShift.eligible_roles.
   *
   * @generated from field: map<string, tkd.roster.v1.ConstraintViolationList> violations_per_user_id = 7;
   */
  violationsPerUserId: { [key: string]: ConstraintViolationList };

  /**
   * A unique ID to match PlannedShifts against RequiredShifts
   *
   * @generated from field: string unique_id = 8;
   */
  uniqueId: string;

  constructor(data?: PartialMessage<RequiredShift>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.RequiredShift";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequiredShift;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequiredShift;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequiredShift;

  static equals(a: RequiredShift | PlainMessage<RequiredShift> | undefined, b: RequiredShift | PlainMessage<RequiredShift> | undefined): boolean;
}

/**
 * PlannedShift is a planned work-shift in a roster.
 *
 * @generated from message tkd.roster.v1.PlannedShift
 */
export declare class PlannedShift extends Message<PlannedShift> {
  /**
   * From holds the time at which the shift begins.
   *
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * To holds the time at which the shift ends.
   *
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;

  /**
   * AsssignedUserIds is a list of user IDs that are assigned to work
   * during the shift.
   *
   * @generated from field: repeated string assigned_user_ids = 3;
   */
  assignedUserIds: string[];

  /**
   * WorkShiftId is the ID of the work-shift definition.
   *
   * @generated from field: string work_shift_id = 4;
   */
  workShiftId: string;

  /**
   * A unique ID to match PlannedShifts against RequiredShifts.
   *
   * @generated from field: string unique_id = 5;
   */
  uniqueId: string;

  constructor(data?: PartialMessage<PlannedShift>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.PlannedShift";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlannedShift;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlannedShift;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlannedShift;

  static equals(a: PlannedShift | PlainMessage<PlannedShift> | undefined, b: PlannedShift | PlainMessage<PlannedShift> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.RosterType
 */
export declare class RosterType extends Message<RosterType> {
  /**
   * UniqueName is a unique name for this roster type.
   *
   * @generated from field: string unique_name = 1;
   */
  uniqueName: string;

  /**
   * A list of shift tags that are applicable to this roster type.
   *
   * @generated from field: repeated string shift_tags = 2;
   */
  shiftTags: string[];

  /**
   * A list of shift tags that are used for on-call requests.
   *
   * @generated from field: repeated string on_call_tags = 3;
   */
  onCallTags: string[];

  constructor(data?: PartialMessage<RosterType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.RosterType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RosterType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RosterType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RosterType;

  static equals(a: RosterType | PlainMessage<RosterType> | undefined, b: RosterType | PlainMessage<RosterType> | undefined): boolean;
}

/**
 * Roster is a planned roster for a given time period.
 *
 * @generated from message tkd.roster.v1.Roster
 */
export declare class Roster extends Message<Roster> {
  /**
   * ID is a unique identifier for the roster.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * From holds the date of the first day in the roster.
   * It should follow the format YYYY-MM-DD as in 2006-01-02.
   *
   * @generated from field: string from = 2;
   */
  from: string;

  /**
   * To holds the date of the lalst day in the roster.
   * It should follow the format YYYY-MM-DD as in 2006-01-02.
   *
   * @generated from field: string to = 3;
   */
  to: string;

  /**
   * Shifts holds all planned work-shifts for the roster.
   * Implementations should sort the shifts by increasing
   * from time.
   *
   * @generated from field: repeated tkd.roster.v1.PlannedShift shifts = 4;
   */
  shifts: PlannedShift[];

  /**
   * Approved is set to true when the roster has been approved by
   * management.
   *
   * @generated from field: bool approved = 5;
   */
  approved: boolean;

  /**
   * ApprovedAt is set to the timestamp at which the roster has been
   * approved by management.
   *
   * @generated from field: google.protobuf.Timestamp approved_at = 6;
   */
  approvedAt?: Timestamp;

  /**
   * ApproverUserId is set to the ID of the management user that approved
   * the roster.
   *
   * @generated from field: string approver_user_id = 7;
   */
  approverUserId: string;

  /**
   * LastModifiedBy is set to the ID of the user that last changed the roster.
   *
   * @generated from field: string last_modified_by = 8;
   */
  lastModifiedBy: string;

  /**
   * CreatedAt is set to the timestamp at which the roster has been initially
   * created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt is set to the timestamp at which the roster has been updated
   * last.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  /**
   * RosterTypeName is the unique name of the roster type.
   *
   * @generated from field: string roster_type_name = 11;
   */
  rosterTypeName: string;

  /**
   * CASIndex is used to ensure atomic updates to rosters.
   *
   * @generated from field: uint64 cas_index = 12;
   */
  casIndex: bigint;

  constructor(data?: PartialMessage<Roster>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.Roster";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Roster;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Roster;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Roster;

  static equals(a: Roster | PlainMessage<Roster> | undefined, b: Roster | PlainMessage<Roster> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.SaveRosterRequest
 */
export declare class SaveRosterRequest extends Message<SaveRosterRequest> {
  /**
   * ID is the unique ID of the roster. If the roster is created for the first
   * time this field may be empty. Subsequent SaveRosterRequests should populate
   * the ID returned in the response of the first SaveRosterRequest.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * From holds the date of the first day in the roster.
   * It should follow the format YYYY-MM-DD as in 2006-01-02.
   * Note that chaning the from-time after the roster has been
   * initialy created is not allowed.
   *
   * @generated from field: string from = 2;
   */
  from: string;

  /**
   * To holds the date of the lalst day in the roster.
   * It should follow the format YYYY-MM-DD as in 2006-01-02.
   * Note that chaning the to-time after the roster has been
   * initialy created is not allowed.
   *
   * @generated from field: string to = 3;
   */
  to: string;

  /**
   * Shifts is a list of planned roster shifts.
   *
   * @generated from field: repeated tkd.roster.v1.PlannedShift shifts = 4;
   */
  shifts: PlannedShift[];

  /**
   * ReadMask may be used to limit the response of the SaveRosterRequest.
   *
   * @generated from field: google.protobuf.FieldMask read_mask = 5;
   */
  readMask?: FieldMask;

  /**
   * See Roster.shift_tags.
   * This field must not be changed once saved.
   *
   * @generated from field: repeated string shift_tags = 7;
   */
  shiftTags: string[];

  /**
   * RosterTypeName is the unique name of the roster type.
   *
   * @generated from field: string roster_type_name = 8;
   */
  rosterTypeName: string;

  /**
   * TimeTrackingOnly can be set to true to include work time analysis only for
   * work-time entries with time-tracking enabled.
   *
   * @generated from field: bool time_tracking_only = 9;
   */
  timeTrackingOnly: boolean;

  /**
   * CASIndex can be set to the CASIndex returned by GetRoster to ensure
   * there have been no changes.
   *
   * @generated from field: uint64 cas_index = 10;
   */
  casIndex: bigint;

  constructor(data?: PartialMessage<SaveRosterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.SaveRosterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveRosterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveRosterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveRosterRequest;

  static equals(a: SaveRosterRequest | PlainMessage<SaveRosterRequest> | undefined, b: SaveRosterRequest | PlainMessage<SaveRosterRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.WorkTimeAnalysisWeek
 */
export declare class WorkTimeAnalysisWeek extends Message<WorkTimeAnalysisWeek> {
  /**
   * @generated from field: int32 year = 1;
   */
  year: number;

  /**
   * @generated from field: int32 week = 2;
   */
  week: number;

  /**
   * @generated from field: int32 working_days = 3;
   */
  workingDays: number;

  /**
   * @generated from field: google.protobuf.Duration expected_work = 4;
   */
  expectedWork?: Duration;

  /**
   * @generated from field: google.protobuf.Duration planned = 5;
   */
  planned?: Duration;

  constructor(data?: PartialMessage<WorkTimeAnalysisWeek>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.WorkTimeAnalysisWeek";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkTimeAnalysisWeek;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkTimeAnalysisWeek;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkTimeAnalysisWeek;

  static equals(a: WorkTimeAnalysisWeek | PlainMessage<WorkTimeAnalysisWeek> | undefined, b: WorkTimeAnalysisWeek | PlainMessage<WorkTimeAnalysisWeek> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.WorkTimeAnalysisStep
 */
export declare class WorkTimeAnalysisStep extends Message<WorkTimeAnalysisStep> {
  /**
   * @generated from field: string work_time_id = 1;
   */
  workTimeId: string;

  /**
   * @generated from field: repeated tkd.roster.v1.WorkTimeAnalysisWeek weeks = 2;
   */
  weeks: WorkTimeAnalysisWeek[];

  /**
   * @generated from field: google.protobuf.Duration expected_work_time = 3;
   */
  expectedWorkTime?: Duration;

  /**
   * @generated from field: google.protobuf.Duration work_time_per_week = 4;
   */
  workTimePerWeek?: Duration;

  /**
   * YYYY-MM-DD
   *
   * @generated from field: string from = 5;
   */
  from: string;

  /**
   * YYYY-MM-DD
   *
   * @generated from field: string to = 6;
   */
  to: string;

  /**
   * @generated from field: google.protobuf.Duration planned = 7;
   */
  planned?: Duration;

  /**
   * Overtime holds the overtime of the user taking overtime allowance per month
   * into consideration.
   *
   * @generated from field: google.protobuf.Duration overtime = 8;
   */
  overtime?: Duration;

  constructor(data?: PartialMessage<WorkTimeAnalysisStep>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.WorkTimeAnalysisStep";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkTimeAnalysisStep;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkTimeAnalysisStep;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkTimeAnalysisStep;

  static equals(a: WorkTimeAnalysisStep | PlainMessage<WorkTimeAnalysisStep> | undefined, b: WorkTimeAnalysisStep | PlainMessage<WorkTimeAnalysisStep> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.WorkTimeAnalysis
 */
export declare class WorkTimeAnalysis extends Message<WorkTimeAnalysis> {
  /**
   * UserId is the ID of the user this WorkTimeAnalysis belongs to.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * PlannedTime is the actual working time that is planned for the
   * user.
   *
   * @generated from field: google.protobuf.Duration planned_time = 2;
   */
  plannedTime?: Duration;

  /**
   * ExpectedTime holds the work-time that the user is expected to
   * deliver.
   *
   * @generated from field: google.protobuf.Duration expected_time = 3;
   */
  expectedTime?: Duration;

  /**
   * @generated from field: repeated tkd.roster.v1.WorkTimeAnalysisStep steps = 4;
   */
  steps: WorkTimeAnalysisStep[];

  /**
   * Overtime holds the overtime of the user taking overtime allowance per month
   * into consideration.
   *
   * @generated from field: google.protobuf.Duration overtime = 5;
   */
  overtime?: Duration;

  /**
   * Whether or not this user should be excluded from time-tracking.
   *
   * @generated from field: bool exclude_from_time_tracking = 6;
   */
  excludeFromTimeTracking: boolean;

  /**
   * An date after which there's no work-time for the user.
   * Format: YYYY-MM-DD
   *
   * @generated from field: string ends_with = 7;
   */
  endsWith: string;

  constructor(data?: PartialMessage<WorkTimeAnalysis>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.WorkTimeAnalysis";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkTimeAnalysis;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkTimeAnalysis;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkTimeAnalysis;

  static equals(a: WorkTimeAnalysis | PlainMessage<WorkTimeAnalysis> | undefined, b: WorkTimeAnalysis | PlainMessage<WorkTimeAnalysis> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.SaveRosterResponse
 */
export declare class SaveRosterResponse extends Message<SaveRosterResponse> {
  /**
   * Roster is the final saved roster.
   * Use read_mask in SaveRosterRequest if you don't need
   * to retrieve the full roster after saving a change.
   *
   * @generated from field: tkd.roster.v1.Roster roster = 1;
   */
  roster?: Roster;

  /**
   * WorkTimeAnalysis holds work-time statistics for each user
   * that has a WorkTime set.
   *
   * @generated from field: repeated tkd.roster.v1.WorkTimeAnalysis work_time_analysis = 2;
   */
  workTimeAnalysis: WorkTimeAnalysis[];

  constructor(data?: PartialMessage<SaveRosterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.SaveRosterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveRosterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveRosterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveRosterResponse;

  static equals(a: SaveRosterResponse | PlainMessage<SaveRosterResponse> | undefined, b: SaveRosterResponse | PlainMessage<SaveRosterResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.UsersToAnalyze
 */
export declare class UsersToAnalyze extends Message<UsersToAnalyze> {
  /**
   * UserIds is a list of users to analyze.
   *
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[];

  /**
   * AllUsers may be set to true if all users that have a work-time specified
   * should be included in analysis.
   *
   * @generated from field: bool all_users = 2;
   */
  allUsers: boolean;

  constructor(data?: PartialMessage<UsersToAnalyze>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.UsersToAnalyze";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersToAnalyze;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersToAnalyze;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersToAnalyze;

  static equals(a: UsersToAnalyze | PlainMessage<UsersToAnalyze> | undefined, b: UsersToAnalyze | PlainMessage<UsersToAnalyze> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.AnalyzeWorkTimeRequest
 */
export declare class AnalyzeWorkTimeRequest extends Message<AnalyzeWorkTimeRequest> {
  /**
   * Users specifies which users should be analyzed. If unset (i.e. a nil message) than
   * only the user that performs the request will be analyzed.
   * Note that the role roster_manager is required when this field is set.
   *
   * @generated from field: tkd.roster.v1.UsersToAnalyze users = 1;
   */
  users?: UsersToAnalyze;

  /**
   * From holds the date (format YYYY-MM-DD; ie. 2006-01-02) of the first day to include in analysis.
   * Not that if a work-shift begins the day before but spans into the date specified here it will
   * NOT be included in analysis.
   *
   * @generated from field: string from = 3;
   */
  from: string;

  /**
   * To holds teh date (format YYYY-MM-DD; ie. 2006-01-02) of the last day to include in analysis.
   * Note that if a work-shift begins at the specified date but spans to the next date it will still
   * be included as a whole in the analysis.
   *
   * @generated from field: string to = 4;
   */
  to: string;

  /**
   * TimeTrackingOnly may be set to true to only incude work-times for which time-tracking is
   * enabled.
   *
   * @generated from field: bool time_tracking_only = 5;
   */
  timeTrackingOnly: boolean;

  constructor(data?: PartialMessage<AnalyzeWorkTimeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.AnalyzeWorkTimeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeWorkTimeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeWorkTimeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeWorkTimeRequest;

  static equals(a: AnalyzeWorkTimeRequest | PlainMessage<AnalyzeWorkTimeRequest> | undefined, b: AnalyzeWorkTimeRequest | PlainMessage<AnalyzeWorkTimeRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.AnalyzeWorkTimeResponse
 */
export declare class AnalyzeWorkTimeResponse extends Message<AnalyzeWorkTimeResponse> {
  /**
   * @generated from field: repeated tkd.roster.v1.WorkTimeAnalysis results = 1;
   */
  results: WorkTimeAnalysis[];

  constructor(data?: PartialMessage<AnalyzeWorkTimeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.AnalyzeWorkTimeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeWorkTimeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeWorkTimeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeWorkTimeResponse;

  static equals(a: AnalyzeWorkTimeResponse | PlainMessage<AnalyzeWorkTimeResponse> | undefined, b: AnalyzeWorkTimeResponse | PlainMessage<AnalyzeWorkTimeResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ApproveRosterWorkTimeSplit
 */
export declare class ApproveRosterWorkTimeSplit extends Message<ApproveRosterWorkTimeSplit> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: google.protobuf.Duration time_off = 2;
   */
  timeOff?: Duration;

  /**
   * @generated from field: google.protobuf.Duration vacation = 3;
   */
  vacation?: Duration;

  constructor(data?: PartialMessage<ApproveRosterWorkTimeSplit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ApproveRosterWorkTimeSplit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveRosterWorkTimeSplit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveRosterWorkTimeSplit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveRosterWorkTimeSplit;

  static equals(a: ApproveRosterWorkTimeSplit | PlainMessage<ApproveRosterWorkTimeSplit> | undefined, b: ApproveRosterWorkTimeSplit | PlainMessage<ApproveRosterWorkTimeSplit> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ApproveRosterRequest
 */
export declare class ApproveRosterRequest extends Message<ApproveRosterRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: map<string, tkd.roster.v1.ApproveRosterWorkTimeSplit> work_time_split = 2;
   */
  workTimeSplit: { [key: string]: ApproveRosterWorkTimeSplit };

  /**
   * @generated from field: repeated string send_notification_to_users = 3;
   */
  sendNotificationToUsers: string[];

  constructor(data?: PartialMessage<ApproveRosterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ApproveRosterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveRosterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveRosterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveRosterRequest;

  static equals(a: ApproveRosterRequest | PlainMessage<ApproveRosterRequest> | undefined, b: ApproveRosterRequest | PlainMessage<ApproveRosterRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ApproveRosterResponse
 */
export declare class ApproveRosterResponse extends Message<ApproveRosterResponse> {
  constructor(data?: PartialMessage<ApproveRosterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ApproveRosterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveRosterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveRosterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveRosterResponse;

  static equals(a: ApproveRosterResponse | PlainMessage<ApproveRosterResponse> | undefined, b: ApproveRosterResponse | PlainMessage<ApproveRosterResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.DeleteRosterRequest
 */
export declare class DeleteRosterRequest extends Message<DeleteRosterRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeleteRosterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.DeleteRosterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRosterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRosterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRosterRequest;

  static equals(a: DeleteRosterRequest | PlainMessage<DeleteRosterRequest> | undefined, b: DeleteRosterRequest | PlainMessage<DeleteRosterRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.DeleteRosterResponse
 */
export declare class DeleteRosterResponse extends Message<DeleteRosterResponse> {
  constructor(data?: PartialMessage<DeleteRosterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.DeleteRosterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRosterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRosterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRosterResponse;

  static equals(a: DeleteRosterResponse | PlainMessage<DeleteRosterResponse> | undefined, b: DeleteRosterResponse | PlainMessage<DeleteRosterResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetRosterRequest
 */
export declare class GetRosterRequest extends Message<GetRosterRequest> {
  /**
   * @generated from oneof tkd.roster.v1.GetRosterRequest.search
   */
  search: {
    /**
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * Deprecated: use date_string instead
     *
     * @generated from field: google.protobuf.Timestamp date = 2;
     */
    value: Timestamp;
    case: "date";
  } | {
    /**
     * Format: YYYY-MM-DD
     *
     * @generated from field: string date_string = 6;
     */
    value: string;
    case: "dateString";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: repeated string roster_type_names = 3;
   */
  rosterTypeNames: string[];

  /**
   * @generated from field: google.protobuf.FieldMask read_mask = 4;
   */
  readMask?: FieldMask;

  /**
   * TimeTrackingOnly may be set to true to only incude work-times for which time-tracking is
   * enabled.
   *
   * @generated from field: bool time_tracking_only = 5;
   */
  timeTrackingOnly: boolean;

  constructor(data?: PartialMessage<GetRosterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetRosterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRosterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRosterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRosterRequest;

  static equals(a: GetRosterRequest | PlainMessage<GetRosterRequest> | undefined, b: GetRosterRequest | PlainMessage<GetRosterRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetRosterResponse
 */
export declare class GetRosterResponse extends Message<GetRosterResponse> {
  /**
   * @generated from field: repeated tkd.roster.v1.Roster roster = 1;
   */
  roster: Roster[];

  /**
   * @generated from field: repeated tkd.roster.v1.WorkTimeAnalysis work_time_analysis = 2;
   */
  workTimeAnalysis: WorkTimeAnalysis[];

  constructor(data?: PartialMessage<GetRosterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetRosterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRosterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRosterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRosterResponse;

  static equals(a: GetRosterResponse | PlainMessage<GetRosterResponse> | undefined, b: GetRosterResponse | PlainMessage<GetRosterResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetWorkingStaffRequest
 */
export declare class GetWorkingStaffRequest extends Message<GetWorkingStaffRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: google.protobuf.FieldMask read_maks = 2;
   */
  readMaks?: FieldMask;

  /**
   * RosterTypeName may be set to the name of the roster type
   * to limit which working-shifts are considered for the response.
   *
   * @generated from field: string roster_type_name = 3;
   */
  rosterTypeName: string;

  /**
   * OnCall may be set to true to limit the response to only include
   * working staff IDs assigned to on-call shifts. 
   *
   * @generated from field: bool on_call = 4;
   */
  onCall: boolean;

  constructor(data?: PartialMessage<GetWorkingStaffRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetWorkingStaffRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkingStaffRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkingStaffRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkingStaffRequest;

  static equals(a: GetWorkingStaffRequest | PlainMessage<GetWorkingStaffRequest> | undefined, b: GetWorkingStaffRequest | PlainMessage<GetWorkingStaffRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetWorkingStaffRequest2
 */
export declare class GetWorkingStaffRequest2 extends Message<GetWorkingStaffRequest2> {
  /**
   * @generated from oneof tkd.roster.v1.GetWorkingStaffRequest2.query
   */
  query: {
    /**
     * @generated from field: google.protobuf.Timestamp time = 1;
     */
    value: Timestamp;
    case: "time";
  } | {
    /**
     * @generated from field: tkd.common.v1.TimeRange time_range = 2;
     */
    value: TimeRange;
    case: "timeRange";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: google.protobuf.FieldMask read_maks = 5;
   */
  readMaks?: FieldMask;

  /**
   * RosterTypeName may be set to the name of the roster type
   * to limit which working-shifts are considered for the response.
   *
   * @generated from field: string roster_type_name = 6;
   */
  rosterTypeName: string;

  /**
   * OnCall may be set to true to limit the response to only include
   * working staff IDs assigned to on-call shifts. 
   *
   * @generated from field: bool on_call = 7;
   */
  onCall: boolean;

  /**
   * ShiftTags is a list of shift-tags that should be considered.
   *
   * @generated from field: repeated string shift_tags = 8;
   */
  shiftTags: string[];

  constructor(data?: PartialMessage<GetWorkingStaffRequest2>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetWorkingStaffRequest2";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkingStaffRequest2;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkingStaffRequest2;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkingStaffRequest2;

  static equals(a: GetWorkingStaffRequest2 | PlainMessage<GetWorkingStaffRequest2> | undefined, b: GetWorkingStaffRequest2 | PlainMessage<GetWorkingStaffRequest2> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetWorkingStaffResponse
 */
export declare class GetWorkingStaffResponse extends Message<GetWorkingStaffResponse> {
  /**
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[];

  /**
   * @generated from field: repeated tkd.roster.v1.PlannedShift current_shifts = 2;
   */
  currentShifts: PlannedShift[];

  /**
   * @generated from field: repeated string roster_id = 3;
   */
  rosterId: string[];

  constructor(data?: PartialMessage<GetWorkingStaffResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetWorkingStaffResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkingStaffResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkingStaffResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkingStaffResponse;

  static equals(a: GetWorkingStaffResponse | PlainMessage<GetWorkingStaffResponse> | undefined, b: GetWorkingStaffResponse | PlainMessage<GetWorkingStaffResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetRequiredShiftsRequest
 */
export declare class GetRequiredShiftsRequest extends Message<GetRequiredShiftsRequest> {
  /**
   * From holds the date (format YYYY-MM-DD; ie. 2006-01-02) of the first day to include.
   *
   * @generated from field: string from = 1;
   */
  from: string;

  /**
   * To holds teh date (format YYYY-MM-DD; ie. 2006-01-02) of the last day to include.
   *
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * RosterTypeName is the name of the roster type for which shifts should be loaded.
   *
   * @generated from field: string roster_type_name = 3;
   */
  rosterTypeName: string;

  /**
   * ReadMask may be use to limit which fields should be included in the response.
   *
   * @generated from field: google.protobuf.FieldMask read_mask = 4;
   */
  readMask?: FieldMask;

  /**
   * Only return shifts that match the roster_type on_call_tags.
   *
   * @generated from field: bool on_call = 5;
   */
  onCall: boolean;

  constructor(data?: PartialMessage<GetRequiredShiftsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetRequiredShiftsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequiredShiftsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequiredShiftsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequiredShiftsRequest;

  static equals(a: GetRequiredShiftsRequest | PlainMessage<GetRequiredShiftsRequest> | undefined, b: GetRequiredShiftsRequest | PlainMessage<GetRequiredShiftsRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetRequiredShiftsResponse
 */
export declare class GetRequiredShiftsResponse extends Message<GetRequiredShiftsResponse> {
  /**
   * RequiredShifts holds a list of shifts that must be configured for a valid roster.
   *
   * @generated from field: repeated tkd.roster.v1.RequiredShift required_shifts = 1;
   */
  requiredShifts: RequiredShift[];

  /**
   * WorkShiftDefinitions (if requested by GetRequiredShiftsRequest.read_mask; default: yes)
   * is set to a list of WorkShift definitions that are referenced by GetRequiredShiftsResponse.required_shifts.work_shift_id;
   *
   * @generated from field: repeated tkd.roster.v1.WorkShift work_shift_definitions = 2;
   */
  workShiftDefinitions: WorkShift[];

  /**
   * WorkDays is a list of days and wether they are counted as work days or not.
   *
   * @generated from field: repeated tkd.roster.v1.Day days = 3;
   */
  days: Day[];

  constructor(data?: PartialMessage<GetRequiredShiftsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetRequiredShiftsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequiredShiftsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequiredShiftsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequiredShiftsResponse;

  static equals(a: GetRequiredShiftsResponse | PlainMessage<GetRequiredShiftsResponse> | undefined, b: GetRequiredShiftsResponse | PlainMessage<GetRequiredShiftsResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.Day
 */
export declare class Day extends Message<Day> {
  /**
   * Date is the date of the day in format YYYY-MM-DD.
   *
   * @generated from field: string date = 1;
   */
  date: string;

  /**
   * Type is the type of the day.
   *
   * @generated from field: tkd.roster.v1.DayType type = 2;
   */
  type: DayType;

  constructor(data?: PartialMessage<Day>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.Day";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Day;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Day;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Day;

  static equals(a: Day | PlainMessage<Day> | undefined, b: Day | PlainMessage<Day> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.SendRosterPreviewRequest
 */
export declare class SendRosterPreviewRequest extends Message<SendRosterPreviewRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: repeated string send_notification_to_users = 2;
   */
  sendNotificationToUsers: string[];

  constructor(data?: PartialMessage<SendRosterPreviewRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.SendRosterPreviewRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRosterPreviewRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRosterPreviewRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRosterPreviewRequest;

  static equals(a: SendRosterPreviewRequest | PlainMessage<SendRosterPreviewRequest> | undefined, b: SendRosterPreviewRequest | PlainMessage<SendRosterPreviewRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.SendRosterPreviewResponse
 */
export declare class SendRosterPreviewResponse extends Message<SendRosterPreviewResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.DeliveryNotification delivery = 1;
   */
  delivery: DeliveryNotification[];

  constructor(data?: PartialMessage<SendRosterPreviewResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.SendRosterPreviewResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRosterPreviewResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRosterPreviewResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRosterPreviewResponse;

  static equals(a: SendRosterPreviewResponse | PlainMessage<SendRosterPreviewResponse> | undefined, b: SendRosterPreviewResponse | PlainMessage<SendRosterPreviewResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.CreateRosterTypeRequest
 */
export declare class CreateRosterTypeRequest extends Message<CreateRosterTypeRequest> {
  /**
   * @generated from field: tkd.roster.v1.RosterType roster_type = 1;
   */
  rosterType?: RosterType;

  constructor(data?: PartialMessage<CreateRosterTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.CreateRosterTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRosterTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRosterTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRosterTypeRequest;

  static equals(a: CreateRosterTypeRequest | PlainMessage<CreateRosterTypeRequest> | undefined, b: CreateRosterTypeRequest | PlainMessage<CreateRosterTypeRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.CreateRosterTypeResponse
 */
export declare class CreateRosterTypeResponse extends Message<CreateRosterTypeResponse> {
  /**
   * @generated from field: tkd.roster.v1.RosterType roster_type = 1;
   */
  rosterType?: RosterType;

  constructor(data?: PartialMessage<CreateRosterTypeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.CreateRosterTypeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRosterTypeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRosterTypeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRosterTypeResponse;

  static equals(a: CreateRosterTypeResponse | PlainMessage<CreateRosterTypeResponse> | undefined, b: CreateRosterTypeResponse | PlainMessage<CreateRosterTypeResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.DeleteRosterTypeRequest
 */
export declare class DeleteRosterTypeRequest extends Message<DeleteRosterTypeRequest> {
  /**
   * @generated from field: string unique_name = 1;
   */
  uniqueName: string;

  constructor(data?: PartialMessage<DeleteRosterTypeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.DeleteRosterTypeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRosterTypeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRosterTypeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRosterTypeRequest;

  static equals(a: DeleteRosterTypeRequest | PlainMessage<DeleteRosterTypeRequest> | undefined, b: DeleteRosterTypeRequest | PlainMessage<DeleteRosterTypeRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.DeleteRosterTypeResponse
 */
export declare class DeleteRosterTypeResponse extends Message<DeleteRosterTypeResponse> {
  constructor(data?: PartialMessage<DeleteRosterTypeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.DeleteRosterTypeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRosterTypeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRosterTypeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRosterTypeResponse;

  static equals(a: DeleteRosterTypeResponse | PlainMessage<DeleteRosterTypeResponse> | undefined, b: DeleteRosterTypeResponse | PlainMessage<DeleteRosterTypeResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ListRosterTypesRequest
 */
export declare class ListRosterTypesRequest extends Message<ListRosterTypesRequest> {
  constructor(data?: PartialMessage<ListRosterTypesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ListRosterTypesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRosterTypesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRosterTypesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRosterTypesRequest;

  static equals(a: ListRosterTypesRequest | PlainMessage<ListRosterTypesRequest> | undefined, b: ListRosterTypesRequest | PlainMessage<ListRosterTypesRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ListRosterTypesResponse
 */
export declare class ListRosterTypesResponse extends Message<ListRosterTypesResponse> {
  /**
   * @generated from field: repeated tkd.roster.v1.RosterType roster_types = 1;
   */
  rosterTypes: RosterType[];

  constructor(data?: PartialMessage<ListRosterTypesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ListRosterTypesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRosterTypesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRosterTypesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRosterTypesResponse;

  static equals(a: ListRosterTypesResponse | PlainMessage<ListRosterTypesResponse> | undefined, b: ListRosterTypesResponse | PlainMessage<ListRosterTypesResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ListShiftTagsRequest
 */
export declare class ListShiftTagsRequest extends Message<ListShiftTagsRequest> {
  constructor(data?: PartialMessage<ListShiftTagsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ListShiftTagsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListShiftTagsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListShiftTagsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListShiftTagsRequest;

  static equals(a: ListShiftTagsRequest | PlainMessage<ListShiftTagsRequest> | undefined, b: ListShiftTagsRequest | PlainMessage<ListShiftTagsRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ListShiftTagsResponse
 */
export declare class ListShiftTagsResponse extends Message<ListShiftTagsResponse> {
  /**
   * @generated from field: repeated string tags = 1;
   */
  tags: string[];

  constructor(data?: PartialMessage<ListShiftTagsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ListShiftTagsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListShiftTagsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListShiftTagsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListShiftTagsResponse;

  static equals(a: ListShiftTagsResponse | PlainMessage<ListShiftTagsResponse> | undefined, b: ListShiftTagsResponse | PlainMessage<ListShiftTagsResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetUserShiftsRequest
 */
export declare class GetUserShiftsRequest extends Message<GetUserShiftsRequest> {
  /**
   * @generated from field: tkd.common.v1.TimeRange timerange = 1;
   */
  timerange?: TimeRange;

  /**
   * if empty, only the working shifts for the authenticated
   * user are returned
   *
   * @generated from field: tkd.roster.v1.UsersToAnalyze users = 2;
   */
  users?: UsersToAnalyze;

  constructor(data?: PartialMessage<GetUserShiftsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetUserShiftsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserShiftsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserShiftsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserShiftsRequest;

  static equals(a: GetUserShiftsRequest | PlainMessage<GetUserShiftsRequest> | undefined, b: GetUserShiftsRequest | PlainMessage<GetUserShiftsRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.GetUserShiftsResponse
 */
export declare class GetUserShiftsResponse extends Message<GetUserShiftsResponse> {
  /**
   * @generated from field: repeated tkd.roster.v1.PlannedShift shifts = 1;
   */
  shifts: PlannedShift[];

  /**
   * @generated from field: repeated tkd.roster.v1.WorkShift definitions = 2;
   */
  definitions: WorkShift[];

  constructor(data?: PartialMessage<GetUserShiftsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.GetUserShiftsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserShiftsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserShiftsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserShiftsResponse;

  static equals(a: GetUserShiftsResponse | PlainMessage<GetUserShiftsResponse> | undefined, b: GetUserShiftsResponse | PlainMessage<GetUserShiftsResponse> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ExportRosterRequest
 */
export declare class ExportRosterRequest extends Message<ExportRosterRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: tkd.roster.v1.ExportRosterType type = 2;
   */
  type: ExportRosterType;

  /**
   * @generated from oneof tkd.roster.v1.ExportRosterRequest.filter
   */
  filter: {
    /**
     * @generated from field: tkd.roster.v1.StringList shift_tags = 3;
     */
    value: StringList;
    case: "shiftTags";
  } | {
    /**
     * @generated from field: tkd.roster.v1.StringList shift_ids = 4;
     */
    value: StringList;
    case: "shiftIds";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ExportRosterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ExportRosterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportRosterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportRosterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportRosterRequest;

  static equals(a: ExportRosterRequest | PlainMessage<ExportRosterRequest> | undefined, b: ExportRosterRequest | PlainMessage<ExportRosterRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ExportRosterResponse
 */
export declare class ExportRosterResponse extends Message<ExportRosterResponse> {
  /**
   * @generated from field: string content_type = 2;
   */
  contentType: string;

  /**
   * @generated from field: string file_name = 1;
   */
  fileName: string;

  /**
   * @generated from field: bytes payload = 3;
   */
  payload: Uint8Array;

  constructor(data?: PartialMessage<ExportRosterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ExportRosterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportRosterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportRosterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportRosterResponse;

  static equals(a: ExportRosterResponse | PlainMessage<ExportRosterResponse> | undefined, b: ExportRosterResponse | PlainMessage<ExportRosterResponse> | undefined): boolean;
}

/**
 * TODO(ppacher): move to common?
 *
 * @generated from message tkd.roster.v1.StringList
 */
export declare class StringList extends Message<StringList> {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[];

  constructor(data?: PartialMessage<StringList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.StringList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringList;

  static equals(a: StringList | PlainMessage<StringList> | undefined, b: StringList | PlainMessage<StringList> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ReapplyShiftTimesRequest
 */
export declare class ReapplyShiftTimesRequest extends Message<ReapplyShiftTimesRequest> {
  /**
   * @generated from field: string roster_id = 1;
   */
  rosterId: string;

  constructor(data?: PartialMessage<ReapplyShiftTimesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ReapplyShiftTimesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReapplyShiftTimesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReapplyShiftTimesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReapplyShiftTimesRequest;

  static equals(a: ReapplyShiftTimesRequest | PlainMessage<ReapplyShiftTimesRequest> | undefined, b: ReapplyShiftTimesRequest | PlainMessage<ReapplyShiftTimesRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.roster.v1.ReapplyShiftTimesResponse
 */
export declare class ReapplyShiftTimesResponse extends Message<ReapplyShiftTimesResponse> {
  /**
   * @generated from field: tkd.roster.v1.Roster roster = 1;
   */
  roster?: Roster;

  constructor(data?: PartialMessage<ReapplyShiftTimesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.roster.v1.ReapplyShiftTimesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReapplyShiftTimesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReapplyShiftTimesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReapplyShiftTimesResponse;

  static equals(a: ReapplyShiftTimesResponse | PlainMessage<ReapplyShiftTimesResponse> | undefined, b: ReapplyShiftTimesResponse | PlainMessage<ReapplyShiftTimesResponse> | undefined): boolean;
}

