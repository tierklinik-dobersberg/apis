// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file tkd/idm/v1/auth_service.proto (package tkd.idm.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { Profile, User } from "./user_pb";

/**
 * Describes the file tkd/idm/v1/auth_service.proto.
 */
export declare const file_tkd_idm_v1_auth_service: GenFile;

/**
 * @generated from message tkd.idm.v1.PasswordAuth
 */
export declare type PasswordAuth = Message<"tkd.idm.v1.PasswordAuth"> & {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message tkd.idm.v1.PasswordAuth.
 * Use `create(PasswordAuthSchema)` to create a new message.
 */
export declare const PasswordAuthSchema: GenMessage<PasswordAuth>;

/**
 * @generated from message tkd.idm.v1.TotpAuth
 */
export declare type TotpAuth = Message<"tkd.idm.v1.TotpAuth"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * @generated from field: string state = 2;
   */
  state: string;
};

/**
 * Describes the message tkd.idm.v1.TotpAuth.
 * Use `create(TotpAuthSchema)` to create a new message.
 */
export declare const TotpAuthSchema: GenMessage<TotpAuth>;

/**
 * @generated from message tkd.idm.v1.LoginRequest
 */
export declare type LoginRequest = Message<"tkd.idm.v1.LoginRequest"> & {
  /**
   * Deprecated: this field is ignored since the oneof below
   * acutally provides the same.
   *
   * @generated from field: tkd.idm.v1.AuthType auth_type = 1;
   */
  authType: AuthType;

  /**
   * NoRefreshToken may be set to true if the user only want's to
   * receive an access token.
   * Note that without a refresh token, it's not possible to use the
   * RefreshToken RPC, instead, the whole authentication flow of the
   * Login RPC must be performed.
   *
   * @generated from field: bool no_refresh_token = 2;
   */
  noRefreshToken: boolean;

  /**
   * @generated from oneof tkd.idm.v1.LoginRequest.auth
   */
  auth: {
    /**
     * @generated from field: tkd.idm.v1.PasswordAuth password = 3;
     */
    value: PasswordAuth;
    case: "password";
  } | {
    /**
     * @generated from field: tkd.idm.v1.TotpAuth totp = 4;
     */
    value: TotpAuth;
    case: "totp";
  } | { case: undefined; value?: undefined };

  /**
   * The URL that should be redirected to
   * once the authentication is successfull.
   *
   * @generated from field: string requested_redirect = 5;
   */
  requestedRedirect: string;

  /**
   * @generated from field: google.protobuf.Duration ttl = 6;
   */
  ttl?: Duration;
};

/**
 * Describes the message tkd.idm.v1.LoginRequest.
 * Use `create(LoginRequestSchema)` to create a new message.
 */
export declare const LoginRequestSchema: GenMessage<LoginRequest>;

/**
 * @generated from message tkd.idm.v1.AccessTokenResponse
 */
export declare type AccessTokenResponse = Message<"tkd.idm.v1.AccessTokenResponse"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 2;
   */
  expiresAt?: Timestamp;

  /**
   * @generated from field: tkd.idm.v1.User user = 3;
   */
  user?: User;
};

/**
 * Describes the message tkd.idm.v1.AccessTokenResponse.
 * Use `create(AccessTokenResponseSchema)` to create a new message.
 */
export declare const AccessTokenResponseSchema: GenMessage<AccessTokenResponse>;

/**
 * @generated from message tkd.idm.v1.MFARequiredResponse
 */
export declare type MFARequiredResponse = Message<"tkd.idm.v1.MFARequiredResponse"> & {
  /**
   * @generated from field: tkd.idm.v1.RequiredMFAKind kind = 1;
   */
  kind: RequiredMFAKind;

  /**
   * @generated from field: string state = 2;
   */
  state: string;
};

/**
 * Describes the message tkd.idm.v1.MFARequiredResponse.
 * Use `create(MFARequiredResponseSchema)` to create a new message.
 */
export declare const MFARequiredResponseSchema: GenMessage<MFARequiredResponse>;

/**
 * @generated from message tkd.idm.v1.LoginResponse
 */
export declare type LoginResponse = Message<"tkd.idm.v1.LoginResponse"> & {
  /**
   * @generated from oneof tkd.idm.v1.LoginResponse.response
   */
  response: {
    /**
     * @generated from field: tkd.idm.v1.AccessTokenResponse access_token = 1;
     */
    value: AccessTokenResponse;
    case: "accessToken";
  } | {
    /**
     * @generated from field: tkd.idm.v1.MFARequiredResponse mfa_required = 2;
     */
    value: MFARequiredResponse;
    case: "mfaRequired";
  } | { case: undefined; value?: undefined };

  /**
   * If set, the client is expected to redirect the
   * user to the returned URL. The url is sanitized and
   * validated to not allow open-redirects.
   *
   * @generated from field: string redirect_to = 5;
   */
  redirectTo: string;
};

/**
 * Describes the message tkd.idm.v1.LoginResponse.
 * Use `create(LoginResponseSchema)` to create a new message.
 */
export declare const LoginResponseSchema: GenMessage<LoginResponse>;

/**
 * empty on purpose
 *
 * @generated from message tkd.idm.v1.LogoutRequest
 */
export declare type LogoutRequest = Message<"tkd.idm.v1.LogoutRequest"> & {
};

/**
 * Describes the message tkd.idm.v1.LogoutRequest.
 * Use `create(LogoutRequestSchema)` to create a new message.
 */
export declare const LogoutRequestSchema: GenMessage<LogoutRequest>;

/**
 * empty on purpose
 *
 * @generated from message tkd.idm.v1.LogoutResponse
 */
export declare type LogoutResponse = Message<"tkd.idm.v1.LogoutResponse"> & {
};

/**
 * Describes the message tkd.idm.v1.LogoutResponse.
 * Use `create(LogoutResponseSchema)` to create a new message.
 */
export declare const LogoutResponseSchema: GenMessage<LogoutResponse>;

/**
 * @generated from message tkd.idm.v1.RefreshTokenRequest
 */
export declare type RefreshTokenRequest = Message<"tkd.idm.v1.RefreshTokenRequest"> & {
  /**
   * @generated from field: google.protobuf.Duration ttl = 1;
   */
  ttl?: Duration;

  /**
   * @generated from field: string requested_redirect = 2;
   */
  requestedRedirect: string;
};

/**
 * Describes the message tkd.idm.v1.RefreshTokenRequest.
 * Use `create(RefreshTokenRequestSchema)` to create a new message.
 */
export declare const RefreshTokenRequestSchema: GenMessage<RefreshTokenRequest>;

/**
 * @generated from message tkd.idm.v1.RefreshTokenResponse
 */
export declare type RefreshTokenResponse = Message<"tkd.idm.v1.RefreshTokenResponse"> & {
  /**
   * @generated from field: tkd.idm.v1.AccessTokenResponse access_token = 1;
   */
  accessToken?: AccessTokenResponse;

  /**
   * @generated from field: string redirect_to = 2;
   */
  redirectTo: string;
};

/**
 * Describes the message tkd.idm.v1.RefreshTokenResponse.
 * Use `create(RefreshTokenResponseSchema)` to create a new message.
 */
export declare const RefreshTokenResponseSchema: GenMessage<RefreshTokenResponse>;

/**
 * @generated from message tkd.idm.v1.IntrospectRequest
 */
export declare type IntrospectRequest = Message<"tkd.idm.v1.IntrospectRequest"> & {
  /**
   * @generated from field: google.protobuf.FieldMask read_mask = 1;
   */
  readMask?: FieldMask;

  /**
   * @generated from field: bool exclude_fields = 2;
   */
  excludeFields: boolean;
};

/**
 * Describes the message tkd.idm.v1.IntrospectRequest.
 * Use `create(IntrospectRequestSchema)` to create a new message.
 */
export declare const IntrospectRequestSchema: GenMessage<IntrospectRequest>;

/**
 * @generated from message tkd.idm.v1.IntrospectResponse
 */
export declare type IntrospectResponse = Message<"tkd.idm.v1.IntrospectResponse"> & {
  /**
   * @generated from field: tkd.idm.v1.Profile profile = 1;
   */
  profile?: Profile;
};

/**
 * Describes the message tkd.idm.v1.IntrospectResponse.
 * Use `create(IntrospectResponseSchema)` to create a new message.
 */
export declare const IntrospectResponseSchema: GenMessage<IntrospectResponse>;

/**
 * @generated from message tkd.idm.v1.GenerateRegistrationTokenRequest
 */
export declare type GenerateRegistrationTokenRequest = Message<"tkd.idm.v1.GenerateRegistrationTokenRequest"> & {
  /**
   * @generated from field: google.protobuf.Duration ttl = 1;
   */
  ttl?: Duration;

  /**
   * @generated from field: uint64 max_count = 2;
   */
  maxCount: bigint;

  /**
   * @generated from field: repeated string initial_roles = 3;
   */
  initialRoles: string[];
};

/**
 * Describes the message tkd.idm.v1.GenerateRegistrationTokenRequest.
 * Use `create(GenerateRegistrationTokenRequestSchema)` to create a new message.
 */
export declare const GenerateRegistrationTokenRequestSchema: GenMessage<GenerateRegistrationTokenRequest>;

/**
 * @generated from message tkd.idm.v1.GenerateRegistrationTokenResponse
 */
export declare type GenerateRegistrationTokenResponse = Message<"tkd.idm.v1.GenerateRegistrationTokenResponse"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message tkd.idm.v1.GenerateRegistrationTokenResponse.
 * Use `create(GenerateRegistrationTokenResponseSchema)` to create a new message.
 */
export declare const GenerateRegistrationTokenResponseSchema: GenMessage<GenerateRegistrationTokenResponse>;

/**
 * @generated from message tkd.idm.v1.ValidateRegistrationTokenRequest
 */
export declare type ValidateRegistrationTokenRequest = Message<"tkd.idm.v1.ValidateRegistrationTokenRequest"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message tkd.idm.v1.ValidateRegistrationTokenRequest.
 * Use `create(ValidateRegistrationTokenRequestSchema)` to create a new message.
 */
export declare const ValidateRegistrationTokenRequestSchema: GenMessage<ValidateRegistrationTokenRequest>;

/**
 * @generated from message tkd.idm.v1.ValidateRegistrationTokenResponse
 */
export declare type ValidateRegistrationTokenResponse = Message<"tkd.idm.v1.ValidateRegistrationTokenResponse"> & {
};

/**
 * Describes the message tkd.idm.v1.ValidateRegistrationTokenResponse.
 * Use `create(ValidateRegistrationTokenResponseSchema)` to create a new message.
 */
export declare const ValidateRegistrationTokenResponseSchema: GenMessage<ValidateRegistrationTokenResponse>;

/**
 * @generated from message tkd.idm.v1.RegisterUserRequest
 */
export declare type RegisterUserRequest = Message<"tkd.idm.v1.RegisterUserRequest"> & {
  /**
   * @generated from field: string registration_token = 1;
   */
  registrationToken: string;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: string password = 3;
   */
  password: string;

  /**
   * @generated from field: string email = 4;
   */
  email: string;
};

/**
 * Describes the message tkd.idm.v1.RegisterUserRequest.
 * Use `create(RegisterUserRequestSchema)` to create a new message.
 */
export declare const RegisterUserRequestSchema: GenMessage<RegisterUserRequest>;

/**
 * @generated from message tkd.idm.v1.RegisterUserResponse
 */
export declare type RegisterUserResponse = Message<"tkd.idm.v1.RegisterUserResponse"> & {
  /**
   * @generated from field: tkd.idm.v1.AccessTokenResponse access_token = 1;
   */
  accessToken?: AccessTokenResponse;
};

/**
 * Describes the message tkd.idm.v1.RegisterUserResponse.
 * Use `create(RegisterUserResponseSchema)` to create a new message.
 */
export declare const RegisterUserResponseSchema: GenMessage<RegisterUserResponse>;

/**
 * @generated from message tkd.idm.v1.PasswordReset
 */
export declare type PasswordReset = Message<"tkd.idm.v1.PasswordReset"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * @generated from field: string new_password = 2;
   */
  newPassword: string;
};

/**
 * Describes the message tkd.idm.v1.PasswordReset.
 * Use `create(PasswordResetSchema)` to create a new message.
 */
export declare const PasswordResetSchema: GenMessage<PasswordReset>;

/**
 * @generated from message tkd.idm.v1.RequestPasswordResetRequest
 */
export declare type RequestPasswordResetRequest = Message<"tkd.idm.v1.RequestPasswordResetRequest"> & {
  /**
   * @generated from oneof tkd.idm.v1.RequestPasswordResetRequest.kind
   */
  kind: {
    /**
     * @generated from field: string email = 1;
     */
    value: string;
    case: "email";
  } | {
    /**
     * @generated from field: tkd.idm.v1.PasswordReset password_reset = 2;
     */
    value: PasswordReset;
    case: "passwordReset";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tkd.idm.v1.RequestPasswordResetRequest.
 * Use `create(RequestPasswordResetRequestSchema)` to create a new message.
 */
export declare const RequestPasswordResetRequestSchema: GenMessage<RequestPasswordResetRequest>;

/**
 * @generated from message tkd.idm.v1.RequestPasswordResetResponse
 */
export declare type RequestPasswordResetResponse = Message<"tkd.idm.v1.RequestPasswordResetResponse"> & {
};

/**
 * Describes the message tkd.idm.v1.RequestPasswordResetResponse.
 * Use `create(RequestPasswordResetResponseSchema)` to create a new message.
 */
export declare const RequestPasswordResetResponseSchema: GenMessage<RequestPasswordResetResponse>;

/**
 * @generated from enum tkd.idm.v1.AuthType
 */
export enum AuthType {
  /**
   * @generated from enum value: AUTH_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTH_TYPE_PASSWORD = 1;
   */
  PASSWORD = 1,

  /**
   * @generated from enum value: AUTH_TYPE_TOTP = 2;
   */
  TOTP = 2,
}

/**
 * Describes the enum tkd.idm.v1.AuthType.
 */
export declare const AuthTypeSchema: GenEnum<AuthType>;

/**
 * @generated from enum tkd.idm.v1.RequiredMFAKind
 */
export enum RequiredMFAKind {
  /**
   * @generated from enum value: REQUIRED_MFA_KIND_UNSPECIFIED = 0;
   */
  REQUIRED_MFA_KIND_UNSPECIFIED = 0,

  /**
   * @generated from enum value: REQUIRED_MFA_KIND_TOTP = 1;
   */
  REQUIRED_MFA_KIND_TOTP = 1,
}

/**
 * Describes the enum tkd.idm.v1.RequiredMFAKind.
 */
export declare const RequiredMFAKindSchema: GenEnum<RequiredMFAKind>;

/**
 * AuthService provides methods for authentication to the
 * services hosted and managed by Tierklinik Dobersberg (TKD).
 *
 * @generated from service tkd.idm.v1.AuthService
 */
export declare const AuthService: GenService<{
  /**
   * Login requests authentication. The authentication type (flow) is
   * determined by the initial request and may require sub-sequent calls
   * to full-fill the requirements of the choosen authentication flow (i.e. 2FA).
   *
   * Upon success, a LoginResponse with a AccessTokenResponse is returned to
   * the caller containing a short lived access token (typically about ~24h).
   * In addition, a "Set-Cookie" header is appended to the response that contains
   * a HttpOnly, Secure (if not in dev-mode) cookie with a long-lived refresh token
   * (~ about a month).
   *
   * In case the access token expires the client is expected to call the RefreshToken
   * endpoint to retrieve a new access token.
   *
   * Refresh tokens cannot be re-newed like this but require a full re-authentication
   * using the Login method.
   *
   * @generated from rpc tkd.idm.v1.AuthService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof LoginRequestSchema;
    output: typeof LoginResponseSchema;
  },
  /**
   * Logout invalidates the current access and refresh tokens that was used to call the 
   * method.
   *
   * @generated from rpc tkd.idm.v1.AuthService.Logout
   */
  logout: {
    methodKind: "unary";
    input: typeof LogoutRequestSchema;
    output: typeof LogoutResponseSchema;
  },
  /**
   * RequestPasswordReset requests a password-reset email to be sent. This mail will include
   * a reset-link with an authentication-code that is valid for at least 24 hours.
   *
   * @generated from rpc tkd.idm.v1.AuthService.RequestPasswordReset
   */
  requestPasswordReset: {
    methodKind: "unary";
    input: typeof RequestPasswordResetRequestSchema;
    output: typeof RequestPasswordResetResponseSchema;
  },
  /**
   * RefreshToken may be called to get a new access token as long as the provided refresh token
   * is still valid and has not been rejected by calling Logout().
   *
   * @generated from rpc tkd.idm.v1.AuthService.RefreshToken
   */
  refreshToken: {
    methodKind: "unary";
    input: typeof RefreshTokenRequestSchema;
    output: typeof RefreshTokenResponseSchema;
  },
  /**
   * Introspect returns the current user profile associated with the provided access token.
   *
   * @generated from rpc tkd.idm.v1.AuthService.Introspect
   */
  introspect: {
    methodKind: "unary";
    input: typeof IntrospectRequestSchema;
    output: typeof IntrospectResponseSchema;
  },
  /**
   * GenerateRegistrationToken generates a new registration token that may be used by
   * users to register a new account on the cisidm deployment.
   *
   * Registration tokens may have an expiration time and/or max-usage counter assigned.
   * It's also possible to assign a list of roles to a token. In this case, the roles
   * will be automatically assigned to each user that creates a cisidm account with this
   * token.
   *
   * @generated from rpc tkd.idm.v1.AuthService.GenerateRegistrationToken
   */
  generateRegistrationToken: {
    methodKind: "unary";
    input: typeof GenerateRegistrationTokenRequestSchema;
    output: typeof GenerateRegistrationTokenResponseSchema;
  },
  /**
   * ValidateRegistrationToken can be used to validate if a registration token is
   * still valid.
   *
   * Unauthenticated on purpose
   *
   * @generated from rpc tkd.idm.v1.AuthService.ValidateRegistrationToken
   */
  validateRegistrationToken: {
    methodKind: "unary";
    input: typeof ValidateRegistrationTokenRequestSchema;
    output: typeof ValidateRegistrationTokenResponseSchema;
  },
  /**
   * RegisterUser can be used to register a new user account on this cisidm deployment.
   * Note depending on the configured registration mode it a valid registration token may
   * be required.
   *
   * Unauthenticated on purpose
   *
   * @generated from rpc tkd.idm.v1.AuthService.RegisterUser
   */
  registerUser: {
    methodKind: "unary";
    input: typeof RegisterUserRequestSchema;
    output: typeof RegisterUserResponseSchema;
  },
}>;

