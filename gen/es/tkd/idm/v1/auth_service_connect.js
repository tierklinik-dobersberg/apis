"use strict";
// @generated by protoc-gen-connect-es v0.9.1 with parameter "target=js+ts"
// @generated from file tkd/idm/v1/auth_service.proto (package tkd.idm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const auth_service_pb_js_1 = require("./auth_service_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * AuthService provides methods for authentication to the
 * services hosted and managed by Tierklinik Dobersberg (TKD).
 *
 * @generated from service tkd.idm.v1.AuthService
 */
exports.AuthService = {
    typeName: "tkd.idm.v1.AuthService",
    methods: {
        /**
         * Login requests authentication. The authentication type (flow) is
         * determined by the initial request and may require sub-sequent calls
         * to full-fill the requirements of the choosen authentication flow.
         *
         * Upon success, a LoginResponse with a AccessTokenResponse is returned to
         * the caller containing a short lived access token (typically about ~24h).
         * In addition, a "Set-Cookie" header is appended to the response that contains
         * a HttpOnly, Secure (if not in dev-mode) cookie with a long-lived refresh token
         * (~ about a month).
         *
         * In case the access token expires the client is expected to call the RefreshToken
         * endpoint to retrieve a new access token.
         *
         * Refresh tokens cannot be re-newed like this but require a full re-authentication
         * using the Login method.
         *
         * @generated from rpc tkd.idm.v1.AuthService.Login
         */
        login: {
            name: "Login",
            I: auth_service_pb_js_1.LoginRequest,
            O: auth_service_pb_js_1.LoginResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Logout invalidates the current access token that was used to call the
         * method. If a refresh token is appended in the logout request, it will be invalidated
         * as well.
         *
         * @generated from rpc tkd.idm.v1.AuthService.Logout
         */
        logout: {
            name: "Logout",
            I: auth_service_pb_js_1.LogoutRequest,
            O: auth_service_pb_js_1.LogoutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc tkd.idm.v1.AuthService.RefreshToken
         */
        refreshToken: {
            name: "RefreshToken",
            I: auth_service_pb_js_1.RefreshTokenRequest,
            O: auth_service_pb_js_1.RefreshTokenResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc tkd.idm.v1.AuthService.Introspect
         */
        introspect: {
            name: "Introspect",
            I: auth_service_pb_js_1.IntrospectRequest,
            O: auth_service_pb_js_1.IntrospectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
