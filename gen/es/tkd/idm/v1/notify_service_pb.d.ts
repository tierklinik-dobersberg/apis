// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file tkd/idm/v1/notify_service.proto (package tkd.idm.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { Duration } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file tkd/idm/v1/notify_service.proto.
 */
export declare const file_tkd_idm_v1_notify_service: GenFile;

/**
 * @generated from message tkd.idm.v1.Attachment
 */
export declare type Attachment = Message<"tkd.idm.v1.Attachment"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string media_type = 2;
   */
  mediaType: string;

  /**
   * @generated from field: bytes content = 3;
   */
  content: Uint8Array;

  /**
   * @generated from field: string content_id = 4;
   */
  contentId: string;

  /**
   * @generated from field: tkd.idm.v1.AttachmentType attachment_type = 5;
   */
  attachmentType: AttachmentType;

  /**
   * A list of user IDs this attachment is for.
   * if left empty, the attachment will be sent to
   * all users.
   *
   * @generated from field: repeated string for_user = 6;
   */
  forUser: string[];
};

/**
 * Describes the message tkd.idm.v1.Attachment.
 * Use `create(AttachmentSchema)` to create a new message.
 */
export declare const AttachmentSchema: GenMessage<Attachment>;

/**
 * @generated from message tkd.idm.v1.EMailMessage
 */
export declare type EMailMessage = Message<"tkd.idm.v1.EMailMessage"> & {
  /**
   * @generated from field: string subject = 1;
   */
  subject: string;

  /**
   * @generated from field: string body = 2;
   */
  body: string;

  /**
   * @generated from field: repeated tkd.idm.v1.Attachment attachments = 3;
   */
  attachments: Attachment[];
};

/**
 * Describes the message tkd.idm.v1.EMailMessage.
 * Use `create(EMailMessageSchema)` to create a new message.
 */
export declare const EMailMessageSchema: GenMessage<EMailMessage>;

/**
 * @generated from message tkd.idm.v1.SMS
 */
export declare type SMS = Message<"tkd.idm.v1.SMS"> & {
  /**
   * @generated from field: string body = 1;
   */
  body: string;
};

/**
 * Describes the message tkd.idm.v1.SMS.
 * Use `create(SMSSchema)` to create a new message.
 */
export declare const SMSSchema: GenMessage<SMS>;

/**
 * @generated from message tkd.idm.v1.NotificationAction
 */
export declare type NotificationAction = Message<"tkd.idm.v1.NotificationAction"> & {
  /**
   * @generated from field: string action = 1;
   */
  action: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: tkd.idm.v1.Operation operation = 3;
   */
  operation: Operation;

  /**
   * @generated from field: string url = 4;
   */
  url: string;
};

/**
 * Describes the message tkd.idm.v1.NotificationAction.
 * Use `create(NotificationActionSchema)` to create a new message.
 */
export declare const NotificationActionSchema: GenMessage<NotificationAction>;

/**
 * @generated from message tkd.idm.v1.ServiceWorkerNotification
 */
export declare type ServiceWorkerNotification = Message<"tkd.idm.v1.ServiceWorkerNotification"> & {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string body = 2;
   */
  body: string;

  /**
   * @generated from field: tkd.idm.v1.Operation default_operation = 3;
   */
  defaultOperation: Operation;

  /**
   * @generated from field: string default_operation_url = 4;
   */
  defaultOperationUrl: string;

  /**
   * @generated from field: repeated tkd.idm.v1.NotificationAction actions = 5;
   */
  actions: NotificationAction[];

  /**
   * @generated from field: google.protobuf.Struct data = 6;
   */
  data?: JsonObject;
};

/**
 * Describes the message tkd.idm.v1.ServiceWorkerNotification.
 * Use `create(ServiceWorkerNotificationSchema)` to create a new message.
 */
export declare const ServiceWorkerNotificationSchema: GenMessage<ServiceWorkerNotification>;

/**
 * @generated from message tkd.idm.v1.WebPushNotification
 */
export declare type WebPushNotification = Message<"tkd.idm.v1.WebPushNotification"> & {
  /**
   * @generated from oneof tkd.idm.v1.WebPushNotification.kind
   */
  kind: {
    /**
     * @generated from field: bytes binary = 1;
     */
    value: Uint8Array;
    case: "binary";
  } | {
    /**
     * @generated from field: tkd.idm.v1.ServiceWorkerNotification notification = 2;
     */
    value: ServiceWorkerNotification;
    case: "notification";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tkd.idm.v1.WebPushNotification.
 * Use `create(WebPushNotificationSchema)` to create a new message.
 */
export declare const WebPushNotificationSchema: GenMessage<WebPushNotification>;

/**
 * @generated from message tkd.idm.v1.SendNotificationRequest
 */
export declare type SendNotificationRequest = Message<"tkd.idm.v1.SendNotificationRequest"> & {
  /**
   * @generated from oneof tkd.idm.v1.SendNotificationRequest.message
   */
  message: {
    /**
     * @generated from field: tkd.idm.v1.SMS sms = 1;
     */
    value: SMS;
    case: "sms";
  } | {
    /**
     * @generated from field: tkd.idm.v1.EMailMessage email = 2;
     */
    value: EMailMessage;
    case: "email";
  } | {
    /**
     * @generated from field: tkd.idm.v1.WebPushNotification webpush = 7;
     */
    value: WebPushNotification;
    case: "webpush";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: repeated string target_users = 3;
   */
  targetUsers: string[];

  /**
   * @generated from field: repeated string target_roles = 4;
   */
  targetRoles: string[];

  /**
   * @generated from field: map<string, google.protobuf.Struct> per_user_template_context = 5;
   */
  perUserTemplateContext: { [key: string]: JsonObject };

  /**
   * @generated from field: string sender_user_id = 6;
   */
  senderUserId: string;
};

/**
 * Describes the message tkd.idm.v1.SendNotificationRequest.
 * Use `create(SendNotificationRequestSchema)` to create a new message.
 */
export declare const SendNotificationRequestSchema: GenMessage<SendNotificationRequest>;

/**
 * @generated from message tkd.idm.v1.DeliveryNotification
 */
export declare type DeliveryNotification = Message<"tkd.idm.v1.DeliveryNotification"> & {
  /**
   * @generated from field: string target_user = 1;
   */
  targetUser: string;

  /**
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * @generated from field: tkd.idm.v1.ErrorKind error_kind = 3;
   */
  errorKind: ErrorKind;
};

/**
 * Describes the message tkd.idm.v1.DeliveryNotification.
 * Use `create(DeliveryNotificationSchema)` to create a new message.
 */
export declare const DeliveryNotificationSchema: GenMessage<DeliveryNotification>;

/**
 * @generated from message tkd.idm.v1.SendNotificationResponse
 */
export declare type SendNotificationResponse = Message<"tkd.idm.v1.SendNotificationResponse"> & {
  /**
   * @generated from field: repeated tkd.idm.v1.DeliveryNotification deliveries = 1;
   */
  deliveries: DeliveryNotification[];
};

/**
 * Describes the message tkd.idm.v1.SendNotificationResponse.
 * Use `create(SendNotificationResponseSchema)` to create a new message.
 */
export declare const SendNotificationResponseSchema: GenMessage<SendNotificationResponse>;

/**
 * @generated from message tkd.idm.v1.GetVAPIDPublicKeyRequest
 */
export declare type GetVAPIDPublicKeyRequest = Message<"tkd.idm.v1.GetVAPIDPublicKeyRequest"> & {
};

/**
 * Describes the message tkd.idm.v1.GetVAPIDPublicKeyRequest.
 * Use `create(GetVAPIDPublicKeyRequestSchema)` to create a new message.
 */
export declare const GetVAPIDPublicKeyRequestSchema: GenMessage<GetVAPIDPublicKeyRequest>;

/**
 * @generated from message tkd.idm.v1.GetVAPIDPublicKeyResponse
 */
export declare type GetVAPIDPublicKeyResponse = Message<"tkd.idm.v1.GetVAPIDPublicKeyResponse"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message tkd.idm.v1.GetVAPIDPublicKeyResponse.
 * Use `create(GetVAPIDPublicKeyResponseSchema)` to create a new message.
 */
export declare const GetVAPIDPublicKeyResponseSchema: GenMessage<GetVAPIDPublicKeyResponse>;

/**
 * @generated from message tkd.idm.v1.WebPushSubscription
 */
export declare type WebPushSubscription = Message<"tkd.idm.v1.WebPushSubscription"> & {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint: string;

  /**
   * @generated from field: google.protobuf.Duration expiration_type = 2;
   */
  expirationType?: Duration;

  /**
   * @generated from field: tkd.idm.v1.WebPushKeys keys = 3;
   */
  keys?: WebPushKeys;
};

/**
 * Describes the message tkd.idm.v1.WebPushSubscription.
 * Use `create(WebPushSubscriptionSchema)` to create a new message.
 */
export declare const WebPushSubscriptionSchema: GenMessage<WebPushSubscription>;

/**
 * @generated from message tkd.idm.v1.WebPushKeys
 */
export declare type WebPushKeys = Message<"tkd.idm.v1.WebPushKeys"> & {
  /**
   * @generated from field: string auth = 1;
   */
  auth: string;

  /**
   * @generated from field: string p256dh = 2;
   */
  p256dh: string;
};

/**
 * Describes the message tkd.idm.v1.WebPushKeys.
 * Use `create(WebPushKeysSchema)` to create a new message.
 */
export declare const WebPushKeysSchema: GenMessage<WebPushKeys>;

/**
 * @generated from message tkd.idm.v1.AddWebPushSubscriptionRequest
 */
export declare type AddWebPushSubscriptionRequest = Message<"tkd.idm.v1.AddWebPushSubscriptionRequest"> & {
  /**
   * @generated from field: tkd.idm.v1.WebPushSubscription subscription = 1;
   */
  subscription?: WebPushSubscription;
};

/**
 * Describes the message tkd.idm.v1.AddWebPushSubscriptionRequest.
 * Use `create(AddWebPushSubscriptionRequestSchema)` to create a new message.
 */
export declare const AddWebPushSubscriptionRequestSchema: GenMessage<AddWebPushSubscriptionRequest>;

/**
 * @generated from message tkd.idm.v1.AddWebPushSubscriptionResponse
 */
export declare type AddWebPushSubscriptionResponse = Message<"tkd.idm.v1.AddWebPushSubscriptionResponse"> & {
};

/**
 * Describes the message tkd.idm.v1.AddWebPushSubscriptionResponse.
 * Use `create(AddWebPushSubscriptionResponseSchema)` to create a new message.
 */
export declare const AddWebPushSubscriptionResponseSchema: GenMessage<AddWebPushSubscriptionResponse>;

/**
 * @generated from enum tkd.idm.v1.AttachmentType
 */
export enum AttachmentType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INLINE = 1;
   */
  INLINE = 1,

  /**
   * @generated from enum value: ATTACHEMNT = 2;
   */
  ATTACHEMNT = 2,

  /**
   * @generated from enum value: ALTERNATIVE_BODY = 3;
   */
  ALTERNATIVE_BODY = 3,
}

/**
 * Describes the enum tkd.idm.v1.AttachmentType.
 */
export declare const AttachmentTypeSchema: GenEnum<AttachmentType>;

/**
 * @generated from enum tkd.idm.v1.Operation
 */
export enum Operation {
  /**
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPERATION_OPEN_WINDOW = 1;
   */
  OPEN_WINDOW = 1,

  /**
   * @generated from enum value: OPERATION_FOCUS_LAST_FOCUSED_OR_OPEN = 2;
   */
  FOCUS_LAST_FOCUSED_OR_OPEN = 2,

  /**
   * @generated from enum value: OPERATION_NAVIGATE_LAST_FOCUSED_OR_OPEN = 3;
   */
  NAVIGATE_LAST_FOCUSED_OR_OPEN = 3,

  /**
   * @generated from enum value: OPERATION_SEND_REQUEST = 4;
   */
  SEND_REQUEST = 4,
}

/**
 * Describes the enum tkd.idm.v1.Operation.
 */
export declare const OperationSchema: GenEnum<Operation>;

/**
 * @generated from enum tkd.idm.v1.ErrorKind
 */
export enum ErrorKind {
  /**
   * @generated from enum value: ERROR_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ERROR_KIND_NO_PRIMARY_MAIL = 1;
   */
  NO_PRIMARY_MAIL = 1,

  /**
   * @generated from enum value: ERROR_KIND_NO_PRIMARY_PHONE = 2;
   */
  NO_PRIMARY_PHONE = 2,

  /**
   * @generated from enum value: ERROR_KIND_NO_WEBPUSH_SUBSCRIPTION = 3;
   */
  NO_WEBPUSH_SUBSCRIPTION = 3,

  /**
   * @generated from enum value: ERROR_KIND_TRANSPORT = 4;
   */
  TRANSPORT = 4,

  /**
   * @generated from enum value: ERROR_KIND_TEMPLATE = 5;
   */
  TEMPLATE = 5,

  /**
   * @generated from enum value: ERROR_KIND_OTHER = 255;
   */
  OTHER = 255,
}

/**
 * Describes the enum tkd.idm.v1.ErrorKind.
 */
export declare const ErrorKindSchema: GenEnum<ErrorKind>;

/**
 * @generated from service tkd.idm.v1.NotifyService
 */
export declare const NotifyService: GenService<{
  /**
   * @generated from rpc tkd.idm.v1.NotifyService.SendNotification
   */
  sendNotification: {
    methodKind: "unary";
    input: typeof SendNotificationRequestSchema;
    output: typeof SendNotificationResponseSchema;
  },
  /**
   * @generated from rpc tkd.idm.v1.NotifyService.GetVAPIDPublicKey
   */
  getVAPIDPublicKey: {
    methodKind: "unary";
    input: typeof GetVAPIDPublicKeyRequestSchema;
    output: typeof GetVAPIDPublicKeyResponseSchema;
  },
  /**
   * @generated from rpc tkd.idm.v1.NotifyService.AddWebPushSubscription
   */
  addWebPushSubscription: {
    methodKind: "unary";
    input: typeof AddWebPushSubscriptionRequestSchema;
    output: typeof AddWebPushSubscriptionResponseSchema;
  },
}>;

