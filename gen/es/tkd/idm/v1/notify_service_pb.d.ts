// @generated by protoc-gen-es v1.3.0 with parameter "target=js+dts"
// @generated from file tkd/idm/v1/notify_service.proto (package tkd.idm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum tkd.idm.v1.Channel
 */
export declare enum Channel {
  /**
   * @generated from enum value: CHANNEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHANNEL_SMS = 1;
   */
  SMS = 1,

  /**
   * @generated from enum value: CHANNEL_MAIL = 2;
   */
  MAIL = 2,
}

/**
 * @generated from message tkd.idm.v1.SendNotificationRequest
 */
export declare class SendNotificationRequest extends Message<SendNotificationRequest> {
  /**
   * @generated from oneof tkd.idm.v1.SendNotificationRequest.message
   */
  message: {
    /**
     * @generated from field: string text = 1;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: string template_name = 2;
     */
    value: string;
    case: "templateName";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: repeated string target_users = 3;
   */
  targetUsers: string[];

  /**
   * @generated from field: repeated string target_roles = 4;
   */
  targetRoles: string[];

  /**
   * @generated from field: tkd.idm.v1.Channel preferred_channel = 5;
   */
  preferredChannel: Channel;

  constructor(data?: PartialMessage<SendNotificationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.idm.v1.SendNotificationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationRequest;

  static equals(a: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined, b: SendNotificationRequest | PlainMessage<SendNotificationRequest> | undefined): boolean;
}

/**
 * @generated from message tkd.idm.v1.DeliveryNotification
 */
export declare class DeliveryNotification extends Message<DeliveryNotification> {
  /**
   * @generated from field: string target_user = 1;
   */
  targetUser: string;

  /**
   * @generated from field: tkd.idm.v1.Channel used_channel = 2;
   */
  usedChannel: Channel;

  constructor(data?: PartialMessage<DeliveryNotification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.idm.v1.DeliveryNotification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeliveryNotification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeliveryNotification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeliveryNotification;

  static equals(a: DeliveryNotification | PlainMessage<DeliveryNotification> | undefined, b: DeliveryNotification | PlainMessage<DeliveryNotification> | undefined): boolean;
}

/**
 * @generated from message tkd.idm.v1.SendNotificationResponse
 */
export declare class SendNotificationResponse extends Message<SendNotificationResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.DeliveryNotification deliveries = 1;
   */
  deliveries: DeliveryNotification[];

  constructor(data?: PartialMessage<SendNotificationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.idm.v1.SendNotificationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationResponse;

  static equals(a: SendNotificationResponse | PlainMessage<SendNotificationResponse> | undefined, b: SendNotificationResponse | PlainMessage<SendNotificationResponse> | undefined): boolean;
}

