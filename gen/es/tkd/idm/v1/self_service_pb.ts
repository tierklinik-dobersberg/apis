// @generated by protoc-gen-es v1.2.1 with parameter "target=js+ts"
// @generated from file tkd/idm/v1/self_service.proto (package tkd.idm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Value } from "@bufbuild/protobuf";
import { Address, EMail, User } from "./user_pb.js";

/**
 * @generated from message tkd.idm.v1.ChangePasswordRequest
 */
export class ChangePasswordRequest extends Message<ChangePasswordRequest> {
  /**
   * @generated from field: string old_password = 1;
   */
  oldPassword = "";

  /**
   * @generated from field: string new_password = 2;
   */
  newPassword = "";

  constructor(data?: PartialMessage<ChangePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.ChangePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined, b: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined): boolean {
    return proto3.util.equals(ChangePasswordRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.ChangePasswordResponse
 */
export class ChangePasswordResponse extends Message<ChangePasswordResponse> {
  constructor(data?: PartialMessage<ChangePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.ChangePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined, b: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined): boolean {
    return proto3.util.equals(ChangePasswordResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.UpdateProfileRequest
 */
export class UpdateProfileRequest extends Message<UpdateProfileRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> extra = 5;
   */
  extra: { [key: string]: Value } = {};

  /**
   * @generated from field: string avatar = 6;
   */
  avatar = "";

  /**
   * @generated from field: string birthday = 7;
   */
  birthday = "";

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 8;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.UpdateProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extra", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 6, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProfileRequest {
    return new UpdateProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProfileRequest {
    return new UpdateProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProfileRequest {
    return new UpdateProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProfileRequest | PlainMessage<UpdateProfileRequest> | undefined, b: UpdateProfileRequest | PlainMessage<UpdateProfileRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProfileRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.UpdateProfileResponse
 */
export class UpdateProfileResponse extends Message<UpdateProfileResponse> {
  /**
   * @generated from field: tkd.idm.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UpdateProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.UpdateProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProfileResponse {
    return new UpdateProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProfileResponse {
    return new UpdateProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProfileResponse {
    return new UpdateProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProfileResponse | PlainMessage<UpdateProfileResponse> | undefined, b: UpdateProfileResponse | PlainMessage<UpdateProfileResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProfileResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.ValidateEmailRequest
 */
export class ValidateEmailRequest extends Message<ValidateEmailRequest> {
  constructor(data?: PartialMessage<ValidateEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.ValidateEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailRequest | PlainMessage<ValidateEmailRequest> | undefined, b: ValidateEmailRequest | PlainMessage<ValidateEmailRequest> | undefined): boolean {
    return proto3.util.equals(ValidateEmailRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.ValidateEmailResponse
 */
export class ValidateEmailResponse extends Message<ValidateEmailResponse> {
  constructor(data?: PartialMessage<ValidateEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.ValidateEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailResponse | PlainMessage<ValidateEmailResponse> | undefined, b: ValidateEmailResponse | PlainMessage<ValidateEmailResponse> | undefined): boolean {
    return proto3.util.equals(ValidateEmailResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.AddEmailAddressRequest
 */
export class AddEmailAddressRequest extends Message<AddEmailAddressRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<AddEmailAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.AddEmailAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddEmailAddressRequest {
    return new AddEmailAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddEmailAddressRequest {
    return new AddEmailAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddEmailAddressRequest {
    return new AddEmailAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddEmailAddressRequest | PlainMessage<AddEmailAddressRequest> | undefined, b: AddEmailAddressRequest | PlainMessage<AddEmailAddressRequest> | undefined): boolean {
    return proto3.util.equals(AddEmailAddressRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.AddEmailAddressResponse
 */
export class AddEmailAddressResponse extends Message<AddEmailAddressResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.EMail emails = 1;
   */
  emails: EMail[] = [];

  constructor(data?: PartialMessage<AddEmailAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.AddEmailAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emails", kind: "message", T: EMail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddEmailAddressResponse {
    return new AddEmailAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddEmailAddressResponse {
    return new AddEmailAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddEmailAddressResponse {
    return new AddEmailAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddEmailAddressResponse | PlainMessage<AddEmailAddressResponse> | undefined, b: AddEmailAddressResponse | PlainMessage<AddEmailAddressResponse> | undefined): boolean {
    return proto3.util.equals(AddEmailAddressResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.DeleteEmailAddressRequest
 */
export class DeleteEmailAddressRequest extends Message<DeleteEmailAddressRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteEmailAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.DeleteEmailAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEmailAddressRequest {
    return new DeleteEmailAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEmailAddressRequest {
    return new DeleteEmailAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEmailAddressRequest {
    return new DeleteEmailAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEmailAddressRequest | PlainMessage<DeleteEmailAddressRequest> | undefined, b: DeleteEmailAddressRequest | PlainMessage<DeleteEmailAddressRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEmailAddressRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.DeleteEmailAddressResponse
 */
export class DeleteEmailAddressResponse extends Message<DeleteEmailAddressResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.EMail emails = 1;
   */
  emails: EMail[] = [];

  constructor(data?: PartialMessage<DeleteEmailAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.DeleteEmailAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emails", kind: "message", T: EMail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEmailAddressResponse {
    return new DeleteEmailAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEmailAddressResponse {
    return new DeleteEmailAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEmailAddressResponse {
    return new DeleteEmailAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEmailAddressResponse | PlainMessage<DeleteEmailAddressResponse> | undefined, b: DeleteEmailAddressResponse | PlainMessage<DeleteEmailAddressResponse> | undefined): boolean {
    return proto3.util.equals(DeleteEmailAddressResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.AddAddressRequest
 */
export class AddAddressRequest extends Message<AddAddressRequest> {
  /**
   * @generated from field: string city_code = 2;
   */
  cityCode = "";

  /**
   * @generated from field: string city_name = 3;
   */
  cityName = "";

  /**
   * @generated from field: string street = 4;
   */
  street = "";

  /**
   * @generated from field: string extra = 5;
   */
  extra = "";

  constructor(data?: PartialMessage<AddAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.AddAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "city_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "city_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extra", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddAddressRequest {
    return new AddAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddAddressRequest {
    return new AddAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddAddressRequest {
    return new AddAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddAddressRequest | PlainMessage<AddAddressRequest> | undefined, b: AddAddressRequest | PlainMessage<AddAddressRequest> | undefined): boolean {
    return proto3.util.equals(AddAddressRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.AddAddressResponse
 */
export class AddAddressResponse extends Message<AddAddressResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.Address addresses = 1;
   */
  addresses: Address[] = [];

  constructor(data?: PartialMessage<AddAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.AddAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "message", T: Address, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddAddressResponse {
    return new AddAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddAddressResponse {
    return new AddAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddAddressResponse {
    return new AddAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddAddressResponse | PlainMessage<AddAddressResponse> | undefined, b: AddAddressResponse | PlainMessage<AddAddressResponse> | undefined): boolean {
    return proto3.util.equals(AddAddressResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.UpdateAddressRequest
 */
export class UpdateAddressRequest extends Message<UpdateAddressRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string city_code = 2;
   */
  cityCode = "";

  /**
   * @generated from field: string city_name = 3;
   */
  cityName = "";

  /**
   * @generated from field: string street = 4;
   */
  street = "";

  /**
   * @generated from field: string extra = 5;
   */
  extra = "";

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 6;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.UpdateAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "city_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extra", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAddressRequest {
    return new UpdateAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAddressRequest {
    return new UpdateAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAddressRequest {
    return new UpdateAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAddressRequest | PlainMessage<UpdateAddressRequest> | undefined, b: UpdateAddressRequest | PlainMessage<UpdateAddressRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAddressRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.UpdateAddressResponse
 */
export class UpdateAddressResponse extends Message<UpdateAddressResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.Address addresses = 1;
   */
  addresses: Address[] = [];

  constructor(data?: PartialMessage<UpdateAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.UpdateAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "message", T: Address, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAddressResponse {
    return new UpdateAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAddressResponse {
    return new UpdateAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAddressResponse {
    return new UpdateAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAddressResponse | PlainMessage<UpdateAddressResponse> | undefined, b: UpdateAddressResponse | PlainMessage<UpdateAddressResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAddressResponse, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.DeleteAddressRequest
 */
export class DeleteAddressRequest extends Message<DeleteAddressRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.DeleteAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAddressRequest {
    return new DeleteAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAddressRequest {
    return new DeleteAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAddressRequest {
    return new DeleteAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAddressRequest | PlainMessage<DeleteAddressRequest> | undefined, b: DeleteAddressRequest | PlainMessage<DeleteAddressRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAddressRequest, a, b);
  }
}

/**
 * @generated from message tkd.idm.v1.DeleteAddressResponse
 */
export class DeleteAddressResponse extends Message<DeleteAddressResponse> {
  /**
   * @generated from field: repeated tkd.idm.v1.Address addresses = 1;
   */
  addresses: Address[] = [];

  constructor(data?: PartialMessage<DeleteAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tkd.idm.v1.DeleteAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "message", T: Address, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAddressResponse {
    return new DeleteAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAddressResponse {
    return new DeleteAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAddressResponse {
    return new DeleteAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAddressResponse | PlainMessage<DeleteAddressResponse> | undefined, b: DeleteAddressResponse | PlainMessage<DeleteAddressResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAddressResponse, a, b);
  }
}

