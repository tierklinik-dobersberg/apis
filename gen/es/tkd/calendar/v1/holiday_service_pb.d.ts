// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file tkd/calendar/v1/holiday_service.proto (package tkd.calendar.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file tkd/calendar/v1/holiday_service.proto.
 */
export declare const file_tkd_calendar_v1_holiday_service: GenFile;

/**
 * PublicHoliday describes a public holiday at a specified country.
 *
 * @generated from message tkd.calendar.v1.PublicHoliday
 */
export declare type PublicHoliday = Message<"tkd.calendar.v1.PublicHoliday"> & {
  /**
   * Date is the date of the public holidy in the format of YYYY-MM-DD.
   *
   * YYYY-MM-DD
   *
   * @generated from field: string date = 1;
   */
  date: string;

  /**
   * LocalName is the localized name of the public holiday in the offical
   * language of the specified country.
   *
   * @generated from field: string local_name = 2;
   */
  localName: string;

  /**
   * Name is the international, english name of the public holiday.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * CountryCode holds the ISO 2-Letter country code.
   *
   * @generated from field: string country_code = 4;
   */
  countryCode: string;

  /**
   * Fixed is set to true if this public holiday is always at the same date
   * like the National Public Holiday.
   *
   * @generated from field: bool fixed = 5;
   */
  fixed: boolean;

  /**
   * Global is set to true if the public holiday is globally accepted.
   *
   * @generated from field: bool global = 6;
   */
  global: boolean;

  /**
   * Type holds the type of the public holiday.
   *
   * @generated from field: tkd.calendar.v1.HolidayType type = 7;
   */
  type: HolidayType;
};

/**
 * Describes the message tkd.calendar.v1.PublicHoliday.
 * Use `create(PublicHolidaySchema)` to create a new message.
 */
export declare const PublicHolidaySchema: GenMessage<PublicHoliday>;

/**
 * GetHolidayRequest is the request message for the GetHoliday RPC.
 *
 * @generated from message tkd.calendar.v1.GetHolidayRequest
 */
export declare type GetHolidayRequest = Message<"tkd.calendar.v1.GetHolidayRequest"> & {
  /**
   * Year holds the year for which holidays should be queried.
   *
   * @generated from field: uint64 year = 1;
   */
  year: bigint;

  /**
   * Month may be set to a month (1 to 12). If set, only holidays for that
   * month will be returned.
   *
   * @generated from field: uint64 month = 2;
   */
  month: bigint;

  /**
   * CountryCode might be set to the country code for which holidays should be
   * queried. If left empty, the default country code from cis-cal
   * configuration is used.
   *
   * @generated from field: string country_code = 3;
   */
  countryCode: string;
};

/**
 * Describes the message tkd.calendar.v1.GetHolidayRequest.
 * Use `create(GetHolidayRequestSchema)` to create a new message.
 */
export declare const GetHolidayRequestSchema: GenMessage<GetHolidayRequest>;

/**
 * GetHolidayResponse is the response message of the GetHoliday RPC and contains
 * a list of public holidays.
 *
 * @generated from message tkd.calendar.v1.GetHolidayResponse
 */
export declare type GetHolidayResponse = Message<"tkd.calendar.v1.GetHolidayResponse"> & {
  /**
   * Holidays is the list of public holidays that matched the search query.
   *
   * @generated from field: repeated tkd.calendar.v1.PublicHoliday holidays = 1;
   */
  holidays: PublicHoliday[];
};

/**
 * Describes the message tkd.calendar.v1.GetHolidayResponse.
 * Use `create(GetHolidayResponseSchema)` to create a new message.
 */
export declare const GetHolidayResponseSchema: GenMessage<GetHolidayResponse>;

/**
 * NumberOfWorkDaysRequest is the request message for the NumberOfWorkDays RPC.
 *
 * @generated from message tkd.calendar.v1.NumberOfWorkDaysRequest
 */
export declare type NumberOfWorkDaysRequest = Message<"tkd.calendar.v1.NumberOfWorkDaysRequest"> & {
  /**
   * Country specified the country for which the number of working days should
   * be calculated. If left empty, the default country from the cis-cal
   * configuration will be used.
   *
   * @generated from field: string country = 1;
   */
  country: string;

  /**
   * From defines the start time (inclusive).
   *
   * @generated from field: google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * To defines the end time (inclusive).
   *
   * @generated from field: google.protobuf.Timestamp to = 3;
   */
  to?: Timestamp;
};

/**
 * Describes the message tkd.calendar.v1.NumberOfWorkDaysRequest.
 * Use `create(NumberOfWorkDaysRequestSchema)` to create a new message.
 */
export declare const NumberOfWorkDaysRequestSchema: GenMessage<NumberOfWorkDaysRequest>;

/**
 * NumberOfWorkDaysResponse is the response message of the NumberOfWorkDays RPC.
 *
 * @generated from message tkd.calendar.v1.NumberOfWorkDaysResponse
 */
export declare type NumberOfWorkDaysResponse = Message<"tkd.calendar.v1.NumberOfWorkDaysResponse"> & {
  /**
   * NumberOfWorkDays is the number of working days in the specified time
   * range.
   *
   * @generated from field: uint32 number_of_work_days = 1;
   */
  numberOfWorkDays: number;

  /**
   * NumberOfWeekendDays is the number of weekend days in the specified time
   * range. Note that holidays on weekends are counted for both,
   * number_of_weekend_days and number_of_holidays.
   *
   * @generated from field: uint32 number_of_weekend_days = 2;
   */
  numberOfWeekendDays: number;

  /**
   * NumberOfHolidays is the number of holidays in the specified time-range.
   * Note that holidays on weekends are counted for both,
   * number_of_weekend_days and number_of_holidays.
   *
   * @generated from field: uint32 number_of_holidays = 3;
   */
  numberOfHolidays: number;
};

/**
 * Describes the message tkd.calendar.v1.NumberOfWorkDaysResponse.
 * Use `create(NumberOfWorkDaysResponseSchema)` to create a new message.
 */
export declare const NumberOfWorkDaysResponseSchema: GenMessage<NumberOfWorkDaysResponse>;

/**
 * HolidayType specifies the type of a public holiday.
 *
 * @generated from enum tkd.calendar.v1.HolidayType
 */
export enum HolidayType {
  /**
   * @generated from enum value: HOLIDAY_TYPE_UNSPECIFIED = 0;
   */
  HOLIDAY_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * @generated from enum value: BANK = 2;
   */
  BANK = 2,

  /**
   * @generated from enum value: SCHOOL = 3;
   */
  SCHOOL = 3,

  /**
   * @generated from enum value: AUTHORITIES = 4;
   */
  AUTHORITIES = 4,

  /**
   * @generated from enum value: OPTIONAL = 5;
   */
  OPTIONAL = 5,

  /**
   * @generated from enum value: OBSERVANCE = 6;
   */
  OBSERVANCE = 6,
}

/**
 * Describes the enum tkd.calendar.v1.HolidayType.
 */
export declare const HolidayTypeSchema: GenEnum<HolidayType>;

/**
 * HolidayService allows to query a list of public holidays.
 *
 * @generated from service tkd.calendar.v1.HolidayService
 */
export declare const HolidayService: GenService<{
  /**
   * GetHoliday returns a list of public holidays at a specifed year.
   *
   * @generated from rpc tkd.calendar.v1.HolidayService.GetHoliday
   */
  getHoliday: {
    methodKind: "unary";
    input: typeof GetHolidayRequestSchema;
    output: typeof GetHolidayResponseSchema;
  },
  /**
   * NumberOfWorkDays calculates the number of working days within a specified
   * time range taking weekends and public-holidays into account.
   *
   * @generated from rpc tkd.calendar.v1.HolidayService.NumberOfWorkDays
   */
  numberOfWorkDays: {
    methodKind: "unary";
    input: typeof NumberOfWorkDaysRequestSchema;
    output: typeof NumberOfWorkDaysResponseSchema;
  },
}>;

