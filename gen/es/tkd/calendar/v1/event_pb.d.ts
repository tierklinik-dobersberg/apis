// @generated by protoc-gen-es v1.10.0 with parameter "target=js+dts"
// @generated from file tkd/calendar/v1/event.proto (package tkd.calendar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Calendar describes a event calendar.
 *
 * @generated from message tkd.calendar.v1.Calendar
 */
export declare class Calendar extends Message<Calendar> {
  /**
   * ID is a unique ID for the calendar. The format of the ID may depend on
   * the application and the actual calendar backend.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Name is a human friendly name of the calendar.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Timezone holds the timezone information for the calendar. In the format
   * of Europe/Vienna.
   *
   * @generated from field: string timezone = 3;
   */
  timezone: string;

  /**
   * Color holds the calendar color.
   *
   * @generated from field: string color = 4;
   */
  color: string;

  /**
   * UserId is set to the user that is associated with this calendar, if any.
   * Note that if multiple users are associated with an calendar, only the first
   * is returned here.
   *
   * @generated from field: string user_id = 5;
   */
  userId: string;

  /**
   * IsVirtualResource is set to true if this is a virtual resource
   * calendar.
   *
   * @generated from field: bool is_virtual_resource = 6;
   */
  isVirtualResource: boolean;

  /**
   * Readonly is set to true if this calendar is read-only.
   *
   * @generated from field: bool readonly = 7;
   */
  readonly: boolean;

  constructor(data?: PartialMessage<Calendar>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.calendar.v1.Calendar";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Calendar;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Calendar;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Calendar;

  static equals(a: Calendar | PlainMessage<Calendar> | undefined, b: Calendar | PlainMessage<Calendar> | undefined): boolean;
}

/**
 * next-id: 12
 *
 * @generated from message tkd.calendar.v1.CalendarEvent
 */
export declare class CalendarEvent extends Message<CalendarEvent> {
  /**
   * ID is a unique ID for the calendar event.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * CalendarId is the unique ID of the calendar this event belongs to.
   *
   * @generated from field: string calendar_id = 2;
   */
  calendarId: string;

  /**
   * StartTime holds the time the event begins.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * EndTime optionally holds the time the event ends.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * FullDay may be set to true for events the last the whole day. In this
   * case, the time part (HH:MM:SS) of StartTime is not important!
   *
   * @generated from field: bool full_day = 5;
   */
  fullDay: boolean;

  /**
   * Summary of the calendar event.
   *
   * @generated from field: string summary = 6;
   */
  summary: string;

  /**
   * Description of the calendar event.
   *
   * @generated from field: string description = 7;
   */
  description: string;

  /**
   * ExtraData may holds additional information about the calendar entry. In
   * most cases, this should be CustomerAnnotation
   *
   * @generated from field: google.protobuf.Any extra_data = 8;
   */
  extraData?: Any;

  /**
   * IsFree is set to true if the user is free (i.e. not busy).
   * The calendar service might calculate free slots for users and report them
   * during the ListEvents RPC.
   *
   * @generated from field: bool is_free = 9;
   */
  isFree: boolean;

  /**
   * CreateTime holds the timestamp at which this calendar event has been created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 10;
   */
  createTime?: Timestamp;

  /**
   * Resources is a list of unique resource-calendar names that are associated
   * with this event.
   *
   * @generated from field: repeated string resources = 11;
   */
  resources: string[];

  /**
   * VirtualCopy is set to true for all events that are "virtually copied"
   * into a ResourceCalendar.
   *
   * @generated from field: bool virtual_copy = 12;
   */
  virtualCopy: boolean;

  constructor(data?: PartialMessage<CalendarEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.calendar.v1.CalendarEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalendarEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalendarEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalendarEvent;

  static equals(a: CalendarEvent | PlainMessage<CalendarEvent> | undefined, b: CalendarEvent | PlainMessage<CalendarEvent> | undefined): boolean;
}

/**
 * @generated from message tkd.calendar.v1.CustomerAnnotation
 */
export declare class CustomerAnnotation extends Message<CustomerAnnotation> {
  /**
   * CustomerId is the ID of the customer within the specified source.
   *
   * @generated from field: string customer_id = 2;
   */
  customerId: string;

  /**
   * AnimalIds is a list of animals that are expected to show up during the
   * event and need treatment.
   *
   * @generated from field: repeated string animal_ids = 3;
   */
  animalIds: string[];

  /**
   * CreatedByUserId holds the ID of the user that created the event.
   *
   * @generated from field: string created_by_user_id = 4;
   */
  createdByUserId: string;

  /**
   * A map of animal-id to treatment/problem description
   *
   * @generated from field: map<string, string> animal_descriptions = 5;
   */
  animalDescriptions: { [key: string]: string };

  /**
   * Additional animal text for unknown animals
   *
   * @generated from field: string additional_animal_text = 6;
   */
  additionalAnimalText: string;

  /**
   * Additional event description
   *
   * @generated from field: string event_description = 7;
   */
  eventDescription: string;

  constructor(data?: PartialMessage<CustomerAnnotation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tkd.calendar.v1.CustomerAnnotation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerAnnotation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerAnnotation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerAnnotation;

  static equals(a: CustomerAnnotation | PlainMessage<CustomerAnnotation> | undefined, b: CustomerAnnotation | PlainMessage<CustomerAnnotation> | undefined): boolean;
}

