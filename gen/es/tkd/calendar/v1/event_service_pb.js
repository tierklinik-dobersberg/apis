// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts"
// @generated from file tkd/calendar/v1/event_service.proto (package tkd.calendar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, FieldMask, proto3, Timestamp } from "@bufbuild/protobuf";
import { Calendar, CalendarEvent } from "./event_pb.js";
import { TimeRange } from "../../common/v1/time_range_pb.js";

/**
 * ListCalendarsRequest is used by the ListCalendars RPC. There are now message
 * fields for now.
 *
 * @generated from message tkd.calendar.v1.ListCalendarsRequest
 */
export const ListCalendarsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.ListCalendarsRequest",
  [],
);

/**
 * ListCalendarsResponse is the response of the ListCalendars RPC and contains a
 * list of available calendars.
 *
 * @generated from message tkd.calendar.v1.ListCalendarsResponse
 */
export const ListCalendarsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.ListCalendarsResponse",
  () => [
    { no: 1, name: "calendars", kind: "message", T: Calendar, repeated: true },
  ],
);

/**
 * EventSource is used to query different event sources during the ListEvents
 * RPC:
 *
 * @generated from message tkd.calendar.v1.EventSource
 */
export const EventSource = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.EventSource",
  () => [
    { no: 1, name: "calendar_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * ListEventsRequest is the request message for the ListEvents RPC and supports
 * querying calendar events over a list of sources.
 *
 * @generated from message tkd.calendar.v1.ListEventsRequest
 */
export const ListEventsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.ListEventsRequest",
  () => [
    { no: 1, name: "sources", kind: "message", T: EventSource, oneof: "source" },
    { no: 2, name: "all_calendars", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "source" },
    { no: 3, name: "all_users", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "source" },
    { no: 4, name: "time_range", kind: "message", T: TimeRange, oneof: "search_time" },
    { no: 5, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "search_time" },
    { no: 6, name: "read_mask", kind: "message", T: FieldMask },
  ],
);

/**
 * CalendarEventList holds a list of events along the calendar definition. Use
 * ReadMask from ListEventsRequest if not all fields are required in the
 * response.
 *
 * @generated from message tkd.calendar.v1.CalendarEventList
 */
export const CalendarEventList = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.CalendarEventList",
  () => [
    { no: 1, name: "calendar", kind: "message", T: Calendar },
    { no: 2, name: "events", kind: "message", T: CalendarEvent, repeated: true },
  ],
);

/**
 * ListEventsResponse is the response of the ListEvents RPC and contains a list
 * of CalendarEventList messages that contains the calendar definition as well
 * as the list of events that matched the search query.
 *
 * @generated from message tkd.calendar.v1.ListEventsResponse
 */
export const ListEventsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.ListEventsResponse",
  () => [
    { no: 1, name: "results", kind: "message", T: CalendarEventList, repeated: true },
  ],
);

/**
 * CreateEventRequest is used to create a new calendar event in the specified
 * calendar.
 *
 * @generated from message tkd.calendar.v1.CreateEventRequest
 */
export const CreateEventRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.CreateEventRequest",
  () => [
    { no: 1, name: "calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start", kind: "message", T: Timestamp },
    { no: 5, name: "end", kind: "message", T: Timestamp },
    { no: 6, name: "extra_data", kind: "message", T: Any },
  ],
);

/**
 * CreateEventResponse is the response message of the CreateEvent RPC and
 * contains the created event.
 *
 * @generated from message tkd.calendar.v1.CreateEventResponse
 */
export const CreateEventResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.CreateEventResponse",
  () => [
    { no: 1, name: "event", kind: "message", T: CalendarEvent },
  ],
);

/**
 * UpdateEventRequest is the request message for the UpdateEvent RPC and might
 * be used to partitially update a calendar event.
 *
 * @generated from message tkd.calendar.v1.UpdateEventRequest
 */
export const UpdateEventRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.UpdateEventRequest",
  () => [
    { no: 1, name: "calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start", kind: "message", T: Timestamp },
    { no: 6, name: "end", kind: "message", T: Timestamp },
    { no: 7, name: "extra_data", kind: "message", T: Any },
    { no: 20, name: "update_mask", kind: "message", T: FieldMask },
  ],
);

/**
 * UpdateEventResponse is the response message of the UpdateEvent RPC and
 * contains the updated event definition.
 *
 * @generated from message tkd.calendar.v1.UpdateEventResponse
 */
export const UpdateEventResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.UpdateEventResponse",
  () => [
    { no: 1, name: "event", kind: "message", T: CalendarEvent },
  ],
);

/**
 * MoveEventRequest is the request message of the MoveEvent RPC and allows to
 * move a calendar event from one calendar to another one. Note that the ID of
 * the event might change after a successfull move!
 *
 * @generated from message tkd.calendar.v1.MoveEventRequest
 */
export const MoveEventRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.MoveEventRequest",
  () => [
    { no: 1, name: "source_calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 2, name: "source_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 3, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "target_calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 5, name: "target_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
  ],
);

/**
 * MoveEventResponse is the response message of the MoveEvent RPC and contains
 * the moved event definition. Note that after a successful move, the ID of the
 * event might have changed!
 *
 * @generated from message tkd.calendar.v1.MoveEventResponse
 */
export const MoveEventResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.MoveEventResponse",
  () => [
    { no: 1, name: "event", kind: "message", T: CalendarEvent },
  ],
);

/**
 * DeleteEventRequest is the request message for the DeleteEvent RPC and allows
 * to remove a calendar event.
 *
 * @generated from message tkd.calendar.v1.DeleteEventRequest
 */
export const DeleteEventRequest = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.DeleteEventRequest",
  () => [
    { no: 1, name: "calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeleteEventResponse is the response message of the DeleteEvent RPC. This
 * message does not contain any fields for now.
 *
 * @generated from message tkd.calendar.v1.DeleteEventResponse
 */
export const DeleteEventResponse = /*@__PURE__*/ proto3.makeMessageType(
  "tkd.calendar.v1.DeleteEventResponse",
  [],
);

