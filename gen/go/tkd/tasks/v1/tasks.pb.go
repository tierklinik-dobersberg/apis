// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tkd/tasks/v1/tasks.proto

package tasksv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	v11 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/customer/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attachment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is a task-unique name for the attachment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ContentType is the MIME content type of the attachment.
	ContentType   string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is a unique, opaque, backend-generated ID for this todo-entry.
	// It's not guaranteed that the ID is unique accross different boards.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// BoardId is the id of the board that this task belongs to.
	BoardId string `protobuf:"bytes,2,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Title is the title of the task. This one must be set.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Description is an optional task description in markdown format.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// CreatorId is the id of the user that created the task
	CreatorId string `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// AssigneeId is the id of the user that is currently assigned to the task.
	AssigneeId string `protobuf:"bytes,6,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	// Location optionally holds the geo-location associated with the task.
	//
	// Types that are valid to be assigned to Location:
	//
	//	*Task_GeoLocation
	//	*Task_Address
	Location isTask_Location `protobuf_oneof:"location"`
	// Tags is a list of opaque string tags.
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Status may hold an additional task status. Note that status values
	// are opaque to the TaskService.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// AssignedBy holds the id of the user that assigned to task
	// to AssigneeId.
	AssignedBy string `protobuf:"bytes,11,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	// Attachments may hold additional attachments for this task.
	Attachments []*Attachment `protobuf:"bytes,12,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// TravelTime holds the travel time to the task location.
	// This field is only set if a task location is available and
	// the request to retrieve this task specified a reference location.
	// See TaskService for more information.
	TravelTime *durationpb.Duration `protobuf:"bytes,13,opt,name=travel_time,json=travelTime,proto3" json:"travel_time,omitempty"`
	// DueTime holds the time at which the task is expected to be
	// completed.
	DueTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	// NotBefore marks the task as not "doable" before the specified timestamp.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// Properties may hold application specific properties.
	Properties map[string]*anypb.Any `protobuf:"bytes,15,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Subscriptions is a map, indexed by user_id, that holds subscription
	// settings.
	Subscriptions map[string]*Subscription `protobuf:"bytes,16,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Priority is the task priortiy.
	Priority *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	// CreateTime is the time at which the task has been created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,90,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time at which the task has been modified last.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,91,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// CompleteTime is the time at which the task has been marked as completed.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,92,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// AssignTime is the time at which this task has been assigned to AssigneeId.
	AssignTime    *timestamppb.Timestamp `protobuf:"bytes,93,opt,name=assign_time,json=assignTime,proto3" json:"assign_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Task) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *Task) GetLocation() isTask_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Task) GetGeoLocation() *v1.GeoLocation {
	if x != nil {
		if x, ok := x.Location.(*Task_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *Task) GetAddress() *v11.Address {
	if x != nil {
		if x, ok := x.Location.(*Task_Address); ok {
			return x.Address
		}
	}
	return nil
}

func (x *Task) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetAssignedBy() string {
	if x != nil {
		return x.AssignedBy
	}
	return ""
}

func (x *Task) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Task) GetTravelTime() *durationpb.Duration {
	if x != nil {
		return x.TravelTime
	}
	return nil
}

func (x *Task) GetDueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DueTime
	}
	return nil
}

func (x *Task) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *Task) GetProperties() map[string]*anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Task) GetSubscriptions() map[string]*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Task) GetPriority() *wrapperspb.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Task) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Task) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Task) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Task) GetAssignTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignTime
	}
	return nil
}

type isTask_Location interface {
	isTask_Location()
}

type Task_GeoLocation struct {
	GeoLocation *v1.GeoLocation `protobuf:"bytes,7,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type Task_Address struct {
	Address *v11.Address `protobuf:"bytes,8,opt,name=address,proto3,oneof"`
}

func (*Task_GeoLocation) isTask_Location() {}

func (*Task_Address) isTask_Location() {}

type TaskValueChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     string                 `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue      *structpb.Value        `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue      *structpb.Value        `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskValueChange) Reset() {
	*x = TaskValueChange{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskValueChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskValueChange) ProtoMessage() {}

func (x *TaskValueChange) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskValueChange.ProtoReflect.Descriptor instead.
func (*TaskValueChange) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *TaskValueChange) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *TaskValueChange) GetOldValue() *structpb.Value {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *TaskValueChange) GetNewValue() *structpb.Value {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type TaskReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reaction      string                 `protobuf:"bytes,2,opt,name=reaction,proto3" json:"reaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskReaction) Reset() {
	*x = TaskReaction{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReaction) ProtoMessage() {}

func (x *TaskReaction) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReaction.ProtoReflect.Descriptor instead.
func (*TaskReaction) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *TaskReaction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskReaction) GetReaction() string {
	if x != nil {
		return x.Reaction
	}
	return ""
}

type TaskComment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Comment holds the task comment in markdown format
	Comment string `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reactions holds a list of user reactions to that comment.
	Reactions []*TaskReaction `protobuf:"bytes,2,rep,name=reactions,proto3" json:"reactions,omitempty"`
	// EditTime holds the time the comment has been last edited.
	// If the comment has never been edited by it's user, this field
	// is empty.
	EditTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=edit_time,json=editTime,proto3" json:"edit_time,omitempty"`
	// DeleteTime is set to the time when the comment has been deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// MarkAsOfftopicTime is set to the them when the comment has been marked
	// as off-topic.
	MarkAsOfftopicTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=mark_as_offtopic_time,json=markAsOfftopicTime,proto3" json:"mark_as_offtopic_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TaskComment) Reset() {
	*x = TaskComment{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskComment) ProtoMessage() {}

func (x *TaskComment) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskComment.ProtoReflect.Descriptor instead.
func (*TaskComment) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *TaskComment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskComment) GetReactions() []*TaskReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *TaskComment) GetEditTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EditTime
	}
	return nil
}

func (x *TaskComment) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *TaskComment) GetMarkAsOfftopicTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MarkAsOfftopicTime
	}
	return nil
}

type TaskTimelineEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the id of the timeline entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TaskId is the ID of the task to which this time-line entry
	// belongs.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// CreateTime is the timestamp at which the timeline entry
	// has been created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// UserId is the id of the user that created the timeline entry.
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Kind describes the kind of timeline entry.
	//
	// Types that are valid to be assigned to Kind:
	//
	//	*TaskTimelineEntry_ValueChange
	//	*TaskTimelineEntry_Comment
	Kind          isTaskTimelineEntry_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTimelineEntry) Reset() {
	*x = TaskTimelineEntry{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTimelineEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTimelineEntry) ProtoMessage() {}

func (x *TaskTimelineEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTimelineEntry.ProtoReflect.Descriptor instead.
func (*TaskTimelineEntry) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *TaskTimelineEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskTimelineEntry) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskTimelineEntry) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskTimelineEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskTimelineEntry) GetKind() isTaskTimelineEntry_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *TaskTimelineEntry) GetValueChange() *TaskValueChange {
	if x != nil {
		if x, ok := x.Kind.(*TaskTimelineEntry_ValueChange); ok {
			return x.ValueChange
		}
	}
	return nil
}

func (x *TaskTimelineEntry) GetComment() *TaskComment {
	if x != nil {
		if x, ok := x.Kind.(*TaskTimelineEntry_Comment); ok {
			return x.Comment
		}
	}
	return nil
}

type isTaskTimelineEntry_Kind interface {
	isTaskTimelineEntry_Kind()
}

type TaskTimelineEntry_ValueChange struct {
	ValueChange *TaskValueChange `protobuf:"bytes,6,opt,name=value_change,json=valueChange,proto3,oneof"`
}

type TaskTimelineEntry_Comment struct {
	Comment *TaskComment `protobuf:"bytes,7,opt,name=comment,proto3,oneof"`
}

func (*TaskTimelineEntry_ValueChange) isTaskTimelineEntry_Kind() {}

func (*TaskTimelineEntry_Comment) isTaskTimelineEntry_Kind() {}

type CreateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId is the id of the board that this task belongs to.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Title is the title of the task. This one must be set.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Description is an optional task description in markdown format.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// AssigneeId is the id of the user that is currently assigned to the task.
	AssigneeId string `protobuf:"bytes,4,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	// Location optionally holds the geo-location associated with the task.
	//
	// Types that are valid to be assigned to Location:
	//
	//	*CreateTaskRequest_GeoLocation
	//	*CreateTaskRequest_Address
	Location isCreateTaskRequest_Location `protobuf_oneof:"location"`
	// Tags is a list of opaque string tags.
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Status may hold an additional task status. Note that status values
	// are opaque to the TaskService.
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Attachments may hold additional attachments for this task.
	Attachments []*Attachment `protobuf:"bytes,9,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// DueTime holds the time at which the task is expected to be
	// completed.
	DueTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	// NotBefore marks the task as not "doable" before the specified timestamp.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// Properties may hold application specific properties.
	Properties map[string]*anypb.Any `protobuf:"bytes,11,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Priority is the task priority.
	Priority      *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTaskRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *CreateTaskRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTaskRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *CreateTaskRequest) GetLocation() isCreateTaskRequest_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateTaskRequest) GetGeoLocation() *v1.GeoLocation {
	if x != nil {
		if x, ok := x.Location.(*CreateTaskRequest_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetAddress() *v11.Address {
	if x != nil {
		if x, ok := x.Location.(*CreateTaskRequest_Address); ok {
			return x.Address
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateTaskRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *CreateTaskRequest) GetDueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DueTime
	}
	return nil
}

func (x *CreateTaskRequest) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *CreateTaskRequest) GetProperties() map[string]*anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CreateTaskRequest) GetPriority() *wrapperspb.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

type isCreateTaskRequest_Location interface {
	isCreateTaskRequest_Location()
}

type CreateTaskRequest_GeoLocation struct {
	GeoLocation *v1.GeoLocation `protobuf:"bytes,5,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type CreateTaskRequest_Address struct {
	Address *v11.Address `protobuf:"bytes,6,opt,name=address,proto3,oneof"`
}

func (*CreateTaskRequest_GeoLocation) isCreateTaskRequest_Location() {}

func (*CreateTaskRequest_Address) isCreateTaskRequest_Location() {}

type CreateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaskId is the id of the task to update
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Title is the title of the task. This one must be set.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Description is an optional task description in markdown format.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// AssigneeId is the id of the user that is currently assigned to the task.
	AssigneeId string `protobuf:"bytes,4,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	// Location optionally holds the geo-location associated with the task.
	//
	// Types that are valid to be assigned to Location:
	//
	//	*UpdateTaskRequest_GeoLocation
	//	*UpdateTaskRequest_Address
	Location isUpdateTaskRequest_Location `protobuf_oneof:"location"`
	// Tags is a list of opaque string tags.
	//
	// Types that are valid to be assigned to Tags:
	//
	//	*UpdateTaskRequest_AddTags
	//	*UpdateTaskRequest_DeleteTags
	//	*UpdateTaskRequest_ReplaceTags
	Tags isUpdateTaskRequest_Tags `protobuf_oneof:"tags"`
	// Status may hold an additional task status. Note that status values
	// are opaque to the TaskService.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// DueTime holds the time at which the task is expected to be
	// completed.
	DueTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	// NotBefore marks the task as not "doable" before the specified timestamp.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// Types that are valid to be assigned to Properties:
	//
	//	*UpdateTaskRequest_AddProperties
	//	*UpdateTaskRequest_DeleteProperties
	Properties isUpdateTaskRequest_Properties `protobuf_oneof:"properties"`
	// Priority is the new priority value.
	Priority      *wrapperspb.Int32Value `protobuf:"bytes,15,opt,name=priority,proto3" json:"priority,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,99,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateTaskRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTaskRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *UpdateTaskRequest) GetLocation() isUpdateTaskRequest_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateTaskRequest) GetGeoLocation() *v1.GeoLocation {
	if x != nil {
		if x, ok := x.Location.(*UpdateTaskRequest_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetAddress() *v11.Address {
	if x != nil {
		if x, ok := x.Location.(*UpdateTaskRequest_Address); ok {
			return x.Address
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetTags() isUpdateTaskRequest_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateTaskRequest) GetAddTags() *v1.StringList {
	if x != nil {
		if x, ok := x.Tags.(*UpdateTaskRequest_AddTags); ok {
			return x.AddTags
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetDeleteTags() *v1.StringList {
	if x != nil {
		if x, ok := x.Tags.(*UpdateTaskRequest_DeleteTags); ok {
			return x.DeleteTags
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetReplaceTags() *v1.StringList {
	if x != nil {
		if x, ok := x.Tags.(*UpdateTaskRequest_ReplaceTags); ok {
			return x.ReplaceTags
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateTaskRequest) GetDueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DueTime
	}
	return nil
}

func (x *UpdateTaskRequest) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *UpdateTaskRequest) GetProperties() isUpdateTaskRequest_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateTaskRequest) GetAddProperties() *AddProperties {
	if x != nil {
		if x, ok := x.Properties.(*UpdateTaskRequest_AddProperties); ok {
			return x.AddProperties
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetDeleteProperties() *v1.StringList {
	if x != nil {
		if x, ok := x.Properties.(*UpdateTaskRequest_DeleteProperties); ok {
			return x.DeleteProperties
		}
	}
	return nil
}

func (x *UpdateTaskRequest) GetPriority() *wrapperspb.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateTaskRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type isUpdateTaskRequest_Location interface {
	isUpdateTaskRequest_Location()
}

type UpdateTaskRequest_GeoLocation struct {
	GeoLocation *v1.GeoLocation `protobuf:"bytes,5,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type UpdateTaskRequest_Address struct {
	Address *v11.Address `protobuf:"bytes,6,opt,name=address,proto3,oneof"`
}

func (*UpdateTaskRequest_GeoLocation) isUpdateTaskRequest_Location() {}

func (*UpdateTaskRequest_Address) isUpdateTaskRequest_Location() {}

type isUpdateTaskRequest_Tags interface {
	isUpdateTaskRequest_Tags()
}

type UpdateTaskRequest_AddTags struct {
	AddTags *v1.StringList `protobuf:"bytes,7,opt,name=add_tags,json=addTags,proto3,oneof"`
}

type UpdateTaskRequest_DeleteTags struct {
	DeleteTags *v1.StringList `protobuf:"bytes,9,opt,name=delete_tags,json=deleteTags,proto3,oneof"`
}

type UpdateTaskRequest_ReplaceTags struct {
	ReplaceTags *v1.StringList `protobuf:"bytes,14,opt,name=replace_tags,json=replaceTags,proto3,oneof"`
}

func (*UpdateTaskRequest_AddTags) isUpdateTaskRequest_Tags() {}

func (*UpdateTaskRequest_DeleteTags) isUpdateTaskRequest_Tags() {}

func (*UpdateTaskRequest_ReplaceTags) isUpdateTaskRequest_Tags() {}

type isUpdateTaskRequest_Properties interface {
	isUpdateTaskRequest_Properties()
}

type UpdateTaskRequest_AddProperties struct {
	AddProperties *AddProperties `protobuf:"bytes,12,opt,name=add_properties,json=addProperties,proto3,oneof"`
}

type UpdateTaskRequest_DeleteProperties struct {
	DeleteProperties *v1.StringList `protobuf:"bytes,13,opt,name=delete_properties,json=deleteProperties,proto3,oneof"`
}

func (*UpdateTaskRequest_AddProperties) isUpdateTaskRequest_Properties() {}

func (*UpdateTaskRequest_DeleteProperties) isUpdateTaskRequest_Properties() {}

type AddProperties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    []*AddProperty         `protobuf:"bytes,12,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProperties) Reset() {
	*x = AddProperties{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProperties) ProtoMessage() {}

func (x *AddProperties) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProperties.ProtoReflect.Descriptor instead.
func (*AddProperties) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{9}
}

func (x *AddProperties) GetProperties() []*AddProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AddProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *anypb.Any             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProperty) Reset() {
	*x = AddProperty{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProperty) ProtoMessage() {}

func (x *AddProperty) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProperty.ProtoReflect.Descriptor instead.
func (*AddProperty) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{10}
}

func (x *AddProperty) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddProperty) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type AssignTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,2,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignTaskRequest) Reset() {
	*x = AssignTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTaskRequest) ProtoMessage() {}

func (x *AssignTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTaskRequest.ProtoReflect.Descriptor instead.
func (*AssignTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{12}
}

func (x *AssignTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AssignTaskRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

type AssignTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignTaskResponse) Reset() {
	*x = AssignTaskResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTaskResponse) ProtoMessage() {}

func (x *AssignTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTaskResponse.ProtoReflect.Descriptor instead.
func (*AssignTaskResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{13}
}

func (x *AssignTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CompleteTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskRequest) Reset() {
	*x = CompleteTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskRequest) ProtoMessage() {}

func (x *CompleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskRequest.ProtoReflect.Descriptor instead.
func (*CompleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{14}
}

func (x *CompleteTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type CompleteTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskResponse) Reset() {
	*x = CompleteTaskResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskResponse) ProtoMessage() {}

func (x *CompleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskResponse.ProtoReflect.Descriptor instead.
func (*CompleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{15}
}

func (x *CompleteTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{17}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{18}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoardId       []string               `protobuf:"bytes,1,rep,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	Statuses      []string               `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	AssignedTo    []string               `protobuf:"bytes,4,rep,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	CreatedBy     []string               `protobuf:"bytes,5,rep,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	DueBetween    *v1.TimeRange          `protobuf:"bytes,6,opt,name=due_between,json=dueBetween,proto3" json:"due_between,omitempty"`
	Completed     *wrapperspb.BoolValue  `protobuf:"bytes,7,opt,name=completed,proto3" json:"completed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskQuery) Reset() {
	*x = TaskQuery{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQuery) ProtoMessage() {}

func (x *TaskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQuery.ProtoReflect.Descriptor instead.
func (*TaskQuery) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{19}
}

func (x *TaskQuery) GetBoardId() []string {
	if x != nil {
		return x.BoardId
	}
	return nil
}

func (x *TaskQuery) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *TaskQuery) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskQuery) GetAssignedTo() []string {
	if x != nil {
		return x.AssignedTo
	}
	return nil
}

func (x *TaskQuery) GetCreatedBy() []string {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *TaskQuery) GetDueBetween() *v1.TimeRange {
	if x != nil {
		return x.DueBetween
	}
	return nil
}

func (x *TaskQuery) GetCompleted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Completed
	}
	return nil
}

type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*TaskQuery           `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	View          *v1.View               `protobuf:"bytes,91,opt,name=view,proto3" json:"view,omitempty"`
	Pagination    *v1.Pagination         `protobuf:"bytes,90,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{20}
}

func (x *ListTasksRequest) GetQueries() []*TaskQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListTasksRequest) GetView() *v1.View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *ListTasksRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FilterTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	BoardId       string                 `protobuf:"bytes,2,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	View          *v1.View               `protobuf:"bytes,91,opt,name=view,proto3" json:"view,omitempty"`
	Pagination    *v1.Pagination         `protobuf:"bytes,90,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterTasksRequest) Reset() {
	*x = FilterTasksRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTasksRequest) ProtoMessage() {}

func (x *FilterTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTasksRequest.ProtoReflect.Descriptor instead.
func (*FilterTasksRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{21}
}

func (x *FilterTasksRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FilterTasksRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *FilterTasksRequest) GetView() *v1.View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *FilterTasksRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ParseFilterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	BoardId       string                 `protobuf:"bytes,2,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseFilterRequest) Reset() {
	*x = ParseFilterRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFilterRequest) ProtoMessage() {}

func (x *ParseFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFilterRequest.ProtoReflect.Descriptor instead.
func (*ParseFilterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{22}
}

func (x *ParseFilterRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ParseFilterRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

type ParseFilterResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ExpectedToken   string                 `protobuf:"bytes,1,opt,name=expected_token,json=expectedToken,proto3" json:"expected_token,omitempty"`
	Values          []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	LastFieldName   string                 `protobuf:"bytes,3,opt,name=last_field_name,json=lastFieldName,proto3" json:"last_field_name,omitempty"`
	NormalizedQuery string                 `protobuf:"bytes,4,opt,name=normalized_query,json=normalizedQuery,proto3" json:"normalized_query,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ParseFilterResponse) Reset() {
	*x = ParseFilterResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFilterResponse) ProtoMessage() {}

func (x *ParseFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFilterResponse.ProtoReflect.Descriptor instead.
func (*ParseFilterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{23}
}

func (x *ParseFilterResponse) GetExpectedToken() string {
	if x != nil {
		return x.ExpectedToken
	}
	return ""
}

func (x *ParseFilterResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ParseFilterResponse) GetLastFieldName() string {
	if x != nil {
		return x.LastFieldName
	}
	return ""
}

func (x *ParseFilterResponse) GetNormalizedQuery() string {
	if x != nil {
		return x.NormalizedQuery
	}
	return ""
}

type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	TotalCount    int64                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{24}
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ListTasksResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type AddTaskAttachmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType   string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Content       []byte                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskAttachmentRequest) Reset() {
	*x = AddTaskAttachmentRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskAttachmentRequest) ProtoMessage() {}

func (x *AddTaskAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskAttachmentRequest.ProtoReflect.Descriptor instead.
func (*AddTaskAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{25}
}

func (x *AddTaskAttachmentRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AddTaskAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTaskAttachmentRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AddTaskAttachmentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type AddTaskAttachmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskAttachmentResponse) Reset() {
	*x = AddTaskAttachmentResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskAttachmentResponse) ProtoMessage() {}

func (x *AddTaskAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskAttachmentResponse.ProtoReflect.Descriptor instead.
func (*AddTaskAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{26}
}

func (x *AddTaskAttachmentResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTaskAttachmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskAttachmentRequest) Reset() {
	*x = DeleteTaskAttachmentRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskAttachmentRequest) ProtoMessage() {}

func (x *DeleteTaskAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskAttachmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteTaskAttachmentRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeleteTaskAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTaskAttachmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskAttachmentResponse) Reset() {
	*x = DeleteTaskAttachmentResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskAttachmentResponse) ProtoMessage() {}

func (x *DeleteTaskAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskAttachmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTaskAttachmentResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTimelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskIds       []string               `protobuf:"bytes,2,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimelineRequest) Reset() {
	*x = GetTimelineRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimelineRequest) ProtoMessage() {}

func (x *GetTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetTimelineRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{29}
}

func (x *GetTimelineRequest) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type GetTimelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timeline      []*TaskTimelineEntry   `protobuf:"bytes,1,rep,name=timeline,proto3" json:"timeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimelineResponse) Reset() {
	*x = GetTimelineResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimelineResponse) ProtoMessage() {}

func (x *GetTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetTimelineResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{30}
}

func (x *GetTimelineResponse) GetTimeline() []*TaskTimelineEntry {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type CreateTaskCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskCommentRequest) Reset() {
	*x = CreateTaskCommentRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskCommentRequest) ProtoMessage() {}

func (x *CreateTaskCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskCommentRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTaskCommentRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CreateTaskCommentRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type AddTaskCommentReactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Reaction      string                 `protobuf:"bytes,2,opt,name=reaction,proto3" json:"reaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskCommentReactionRequest) Reset() {
	*x = AddTaskCommentReactionRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskCommentReactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskCommentReactionRequest) ProtoMessage() {}

func (x *AddTaskCommentReactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskCommentReactionRequest.ProtoReflect.Descriptor instead.
func (*AddTaskCommentReactionRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{32}
}

func (x *AddTaskCommentReactionRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *AddTaskCommentReactionRequest) GetReaction() string {
	if x != nil {
		return x.Reaction
	}
	return ""
}

type UpdateTaskCommentRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TimelineId string                 `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId,proto3" json:"timeline_id,omitempty"`
	// Types that are valid to be assigned to Kind:
	//
	//	*UpdateTaskCommentRequest_NewText
	//	*UpdateTaskCommentRequest_Delete
	//	*UpdateTaskCommentRequest_OffTopic
	Kind          isUpdateTaskCommentRequest_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskCommentRequest) Reset() {
	*x = UpdateTaskCommentRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskCommentRequest) ProtoMessage() {}

func (x *UpdateTaskCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskCommentRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateTaskCommentRequest) GetTimelineId() string {
	if x != nil {
		return x.TimelineId
	}
	return ""
}

func (x *UpdateTaskCommentRequest) GetKind() isUpdateTaskCommentRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *UpdateTaskCommentRequest) GetNewText() string {
	if x != nil {
		if x, ok := x.Kind.(*UpdateTaskCommentRequest_NewText); ok {
			return x.NewText
		}
	}
	return ""
}

func (x *UpdateTaskCommentRequest) GetDelete() bool {
	if x != nil {
		if x, ok := x.Kind.(*UpdateTaskCommentRequest_Delete); ok {
			return x.Delete
		}
	}
	return false
}

func (x *UpdateTaskCommentRequest) GetOffTopic() bool {
	if x != nil {
		if x, ok := x.Kind.(*UpdateTaskCommentRequest_OffTopic); ok {
			return x.OffTopic
		}
	}
	return false
}

type isUpdateTaskCommentRequest_Kind interface {
	isUpdateTaskCommentRequest_Kind()
}

type UpdateTaskCommentRequest_NewText struct {
	NewText string `protobuf:"bytes,2,opt,name=new_text,json=newText,proto3,oneof"`
}

type UpdateTaskCommentRequest_Delete struct {
	Delete bool `protobuf:"varint,3,opt,name=delete,proto3,oneof"`
}

type UpdateTaskCommentRequest_OffTopic struct {
	OffTopic bool `protobuf:"varint,4,opt,name=off_topic,json=offTopic,proto3,oneof"`
}

func (*UpdateTaskCommentRequest_NewText) isUpdateTaskCommentRequest_Kind() {}

func (*UpdateTaskCommentRequest_Delete) isUpdateTaskCommentRequest_Kind() {}

func (*UpdateTaskCommentRequest_OffTopic) isUpdateTaskCommentRequest_Kind() {}

type QueryViewRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// View describes the view to query.
	View *View `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// BoardIds might be set to a list of board ids to further limit
	// the returned tasks.
	BoardIds []string `protobuf:"bytes,2,rep,name=board_ids,json=boardIds,proto3" json:"board_ids,omitempty"`
	// Pagination holds pagination settings for the query.
	// Note that the Pagination.Sort field is ignored
	// since sorting is already specified in the QueryViewRequest.View.Sort.
	Pagination *v1.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// ReadMask can be used to limit which fields of the response
	// message should be set.
	// If unset or with empty paths, the full response is returned.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryViewRequest) Reset() {
	*x = QueryViewRequest{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewRequest) ProtoMessage() {}

func (x *QueryViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewRequest.ProtoReflect.Descriptor instead.
func (*QueryViewRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{34}
}

func (x *QueryViewRequest) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *QueryViewRequest) GetBoardIds() []string {
	if x != nil {
		return x.BoardIds
	}
	return nil
}

func (x *QueryViewRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryViewRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type TaskGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GroupValue holds the value for this group.
	GroupValue *anypb.Any `protobuf:"bytes,1,opt,name=group_value,json=groupValue,proto3" json:"group_value,omitempty"`
	// Tasks holds all tasks for that group.
	Tasks []*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// BoardId holds the ID of the task board for this group.
	BoardId       string `protobuf:"bytes,3,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskGroup) Reset() {
	*x = TaskGroup{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGroup) ProtoMessage() {}

func (x *TaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGroup.ProtoReflect.Descriptor instead.
func (*TaskGroup) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{35}
}

func (x *TaskGroup) GetGroupValue() *anypb.Any {
	if x != nil {
		return x.GroupValue
	}
	return nil
}

func (x *TaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskGroup) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

type QueryViewResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GroupByField holds the field name that was used for
	// grouping. This one is copied from the QueryViewRequest.view.group_by_field
	GroupByField string `protobuf:"bytes,1,opt,name=group_by_field,json=groupByField,proto3" json:"group_by_field,omitempty"`
	// Groups holds all returned task groups.
	Groups []*TaskGroup `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	// Board holds all definitions of all tasks boards that are part of
	// the response.
	Boards []*Board `protobuf:"bytes,3,rep,name=boards,proto3" json:"boards,omitempty"`
	// NewTaskTemplate is populated by the server as a based template for new
	// tasks created in the queried view.
	NewTaskTemplate *Task `protobuf:"bytes,4,opt,name=new_task_template,json=newTaskTemplate,proto3" json:"new_task_template,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryViewResponse) Reset() {
	*x = QueryViewResponse{}
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewResponse) ProtoMessage() {}

func (x *QueryViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_tasks_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewResponse.ProtoReflect.Descriptor instead.
func (*QueryViewResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_tasks_proto_rawDescGZIP(), []int{36}
}

func (x *QueryViewResponse) GetGroupByField() string {
	if x != nil {
		return x.GroupByField
	}
	return ""
}

func (x *QueryViewResponse) GetGroups() []*TaskGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *QueryViewResponse) GetBoards() []*Board {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *QueryViewResponse) GetNewTaskTemplate() *Task {
	if x != nil {
		return x.NewTaskTemplate
	}
	return nil
}

var File_tkd_tasks_v1_tasks_proto protoreflect.FileDescriptor

const file_tkd_tasks_v1_tasks_proto_rawDesc = "" +
	"\n" +
	"\x18tkd/tasks/v1/tasks.proto\x12\ftkd.tasks.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1bbuf/validate/validate.proto\x1a\x1ftkd/common/v1/geolocation.proto\x1a\x1etkd/common/v1/pagination.proto\x1a\x18tkd/common/v1/view.proto\x1a\x1etkd/common/v1/descriptor.proto\x1a!tkd/common/v1/list_wrappers.proto\x1a\x1etkd/common/v1/time_range.proto\x1a\x1etkd/customer/v1/customer.proto\x1a\x19tkd/tasks/v1/boards.proto\"C\n" +
	"\n" +
	"Attachment\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fcontent_type\x18\x02 \x01(\tR\vcontentType\"\xd8\t\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bboard_id\x18\x02 \x01(\tR\aboardId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x05 \x01(\tR\tcreatorId\x12\x1f\n" +
	"\vassignee_id\x18\x06 \x01(\tR\n" +
	"assigneeId\x12?\n" +
	"\fgeo_location\x18\a \x01(\v2\x1a.tkd.common.v1.GeoLocationH\x00R\vgeoLocation\x124\n" +
	"\aaddress\x18\b \x01(\v2\x18.tkd.customer.v1.AddressH\x00R\aaddress\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\x12\x16\n" +
	"\x06status\x18\n" +
	" \x01(\tR\x06status\x12\x1f\n" +
	"\vassigned_by\x18\v \x01(\tR\n" +
	"assignedBy\x12:\n" +
	"\vattachments\x18\f \x03(\v2\x18.tkd.tasks.v1.AttachmentR\vattachments\x12:\n" +
	"\vtravel_time\x18\r \x01(\v2\x19.google.protobuf.DurationR\n" +
	"travelTime\x125\n" +
	"\bdue_time\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\adueTime\x129\n" +
	"\n" +
	"not_before\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\tnotBefore\x12B\n" +
	"\n" +
	"properties\x18\x0f \x03(\v2\".tkd.tasks.v1.Task.PropertiesEntryR\n" +
	"properties\x12K\n" +
	"\rsubscriptions\x18\x10 \x03(\v2%.tkd.tasks.v1.Task.SubscriptionsEntryR\rsubscriptions\x127\n" +
	"\bpriority\x18\x11 \x01(\v2\x1b.google.protobuf.Int32ValueR\bpriority\x12;\n" +
	"\vcreate_time\x18Z \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18[ \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12?\n" +
	"\rcomplete_time\x18\\ \x01(\v2\x1a.google.protobuf.TimestampR\fcompleteTime\x12;\n" +
	"\vassign_time\x18] \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"assignTime\x1aS\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1a\\\n" +
	"\x12SubscriptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.tkd.tasks.v1.SubscriptionR\x05value:\x028\x01B\n" +
	"\n" +
	"\blocation\"\xa3\x01\n" +
	"\x0fTaskValueChange\x12&\n" +
	"\n" +
	"field_name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\tfieldName\x123\n" +
	"\told_value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\boldValue\x123\n" +
	"\tnew_value\x18\x03 \x01(\v2\x16.google.protobuf.ValueR\bnewValue\"C\n" +
	"\fTaskReaction\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\breaction\x18\x02 \x01(\tR\breaction\"\xa6\x02\n" +
	"\vTaskComment\x12\x18\n" +
	"\acomment\x18\x01 \x01(\tR\acomment\x128\n" +
	"\treactions\x18\x02 \x03(\v2\x1a.tkd.tasks.v1.TaskReactionR\treactions\x127\n" +
	"\tedit_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\beditTime\x12;\n" +
	"\vdelete_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"deleteTime\x12M\n" +
	"\x15mark_as_offtopic_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x12markAsOfftopicTime\"\xaf\x02\n" +
	"\x11TaskTimelineEntry\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\atask_id\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06taskId\x12D\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"createTime\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12B\n" +
	"\fvalue_change\x18\x06 \x01(\v2\x1d.tkd.tasks.v1.TaskValueChangeH\x00R\vvalueChange\x125\n" +
	"\acomment\x18\a \x01(\v2\x19.tkd.tasks.v1.TaskCommentH\x00R\acommentB\x0e\n" +
	"\x04kind\x12\x06\xfa\xf7\x18\x02\b\x01\"\xc3\x05\n" +
	"\x11CreateTaskRequest\x12\x19\n" +
	"\bboard_id\x18\x01 \x01(\tR\aboardId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vassignee_id\x18\x04 \x01(\tR\n" +
	"assigneeId\x12?\n" +
	"\fgeo_location\x18\x05 \x01(\v2\x1a.tkd.common.v1.GeoLocationH\x00R\vgeoLocation\x124\n" +
	"\aaddress\x18\x06 \x01(\v2\x18.tkd.customer.v1.AddressH\x00R\aaddress\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x12\x16\n" +
	"\x06status\x18\b \x01(\tR\x06status\x12:\n" +
	"\vattachments\x18\t \x03(\v2\x18.tkd.tasks.v1.AttachmentR\vattachments\x125\n" +
	"\bdue_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\adueTime\x129\n" +
	"\n" +
	"not_before\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\tnotBefore\x12O\n" +
	"\n" +
	"properties\x18\v \x03(\v2/.tkd.tasks.v1.CreateTaskRequest.PropertiesEntryR\n" +
	"properties\x127\n" +
	"\bpriority\x18\f \x01(\v2\x1b.google.protobuf.Int32ValueR\bpriority\x1aS\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01B\n" +
	"\n" +
	"\blocation\"<\n" +
	"\x12CreateTaskResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\"\xe4\x06\n" +
	"\x11UpdateTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vassignee_id\x18\x04 \x01(\tR\n" +
	"assigneeId\x12?\n" +
	"\fgeo_location\x18\x05 \x01(\v2\x1a.tkd.common.v1.GeoLocationH\x00R\vgeoLocation\x124\n" +
	"\aaddress\x18\x06 \x01(\v2\x18.tkd.customer.v1.AddressH\x00R\aaddress\x126\n" +
	"\badd_tags\x18\a \x01(\v2\x19.tkd.common.v1.StringListH\x01R\aaddTags\x12<\n" +
	"\vdelete_tags\x18\t \x01(\v2\x19.tkd.common.v1.StringListH\x01R\n" +
	"deleteTags\x12>\n" +
	"\freplace_tags\x18\x0e \x01(\v2\x19.tkd.common.v1.StringListH\x01R\vreplaceTags\x12\x16\n" +
	"\x06status\x18\n" +
	" \x01(\tR\x06status\x125\n" +
	"\bdue_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\adueTime\x129\n" +
	"\n" +
	"not_before\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\tnotBefore\x12D\n" +
	"\x0eadd_properties\x18\f \x01(\v2\x1b.tkd.tasks.v1.AddPropertiesH\x02R\raddProperties\x12H\n" +
	"\x11delete_properties\x18\r \x01(\v2\x19.tkd.common.v1.StringListH\x02R\x10deleteProperties\x127\n" +
	"\bpriority\x18\x0f \x01(\v2\x1b.google.protobuf.Int32ValueR\bpriority\x12;\n" +
	"\vupdate_mask\x18c \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMaskB\n" +
	"\n" +
	"\blocationB\x06\n" +
	"\x04tagsB\f\n" +
	"\n" +
	"properties\"J\n" +
	"\rAddProperties\x129\n" +
	"\n" +
	"properties\x18\f \x03(\v2\x19.tkd.tasks.v1.AddPropertyR\n" +
	"properties\"T\n" +
	"\vAddProperty\x12\x19\n" +
	"\x03key\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value\"<\n" +
	"\x12UpdateTaskResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\"M\n" +
	"\x11AssignTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1f\n" +
	"\vassignee_id\x18\x02 \x01(\tR\n" +
	"assigneeId\"<\n" +
	"\x12AssignTaskResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\".\n" +
	"\x13CompleteTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\">\n" +
	"\x14CompleteTaskResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\",\n" +
	"\x11DeleteTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\")\n" +
	"\x0eGetTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"9\n" +
	"\x0fGetTaskResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\"\x8b\x02\n" +
	"\tTaskQuery\x12\x19\n" +
	"\bboard_id\x18\x01 \x03(\tR\aboardId\x12\x1a\n" +
	"\bstatuses\x18\x02 \x03(\tR\bstatuses\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1f\n" +
	"\vassigned_to\x18\x04 \x03(\tR\n" +
	"assignedTo\x12\x1d\n" +
	"\n" +
	"created_by\x18\x05 \x03(\tR\tcreatedBy\x129\n" +
	"\vdue_between\x18\x06 \x01(\v2\x18.tkd.common.v1.TimeRangeR\n" +
	"dueBetween\x128\n" +
	"\tcompleted\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\tcompleted\"\xa9\x01\n" +
	"\x10ListTasksRequest\x121\n" +
	"\aqueries\x18\x01 \x03(\v2\x17.tkd.tasks.v1.TaskQueryR\aqueries\x12'\n" +
	"\x04view\x18[ \x01(\v2\x13.tkd.common.v1.ViewR\x04view\x129\n" +
	"\n" +
	"pagination\x18Z \x01(\v2\x19.tkd.common.v1.PaginationR\n" +
	"pagination\"\xa9\x01\n" +
	"\x12FilterTasksRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x19\n" +
	"\bboard_id\x18\x02 \x01(\tR\aboardId\x12'\n" +
	"\x04view\x18[ \x01(\v2\x13.tkd.common.v1.ViewR\x04view\x129\n" +
	"\n" +
	"pagination\x18Z \x01(\v2\x19.tkd.common.v1.PaginationR\n" +
	"pagination\"E\n" +
	"\x12ParseFilterRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x19\n" +
	"\bboard_id\x18\x02 \x01(\tR\aboardId\"\xa7\x01\n" +
	"\x13ParseFilterResponse\x12%\n" +
	"\x0eexpected_token\x18\x01 \x01(\tR\rexpectedToken\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\x12&\n" +
	"\x0flast_field_name\x18\x03 \x01(\tR\rlastFieldName\x12)\n" +
	"\x10normalized_query\x18\x04 \x01(\tR\x0fnormalizedQuery\"^\n" +
	"\x11ListTasksResponse\x12(\n" +
	"\x05tasks\x18\x01 \x03(\v2\x12.tkd.tasks.v1.TaskR\x05tasks\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x03R\n" +
	"totalCount\"\xa8\x01\n" +
	"\x18AddTaskAttachmentRequest\x12 \n" +
	"\atask_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06taskId\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\x12*\n" +
	"\fcontent_type\x18\x03 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\vcontentType\x12!\n" +
	"\acontent\x18\x04 \x01(\fB\a\xfa\xf7\x18\x03\xc8\x01\x01R\acontent\"C\n" +
	"\x19AddTaskAttachmentResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\"\\\n" +
	"\x1bDeleteTaskAttachmentRequest\x12 \n" +
	"\atask_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06taskId\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\"F\n" +
	"\x1cDeleteTaskAttachmentResponse\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\x12.tkd.tasks.v1.TaskR\x04task\"/\n" +
	"\x12GetTimelineRequest\x12\x19\n" +
	"\btask_ids\x18\x02 \x03(\tR\ataskIds\"R\n" +
	"\x13GetTimelineResponse\x12;\n" +
	"\btimeline\x18\x01 \x03(\v2\x1f.tkd.tasks.v1.TaskTimelineEntryR\btimeline\"_\n" +
	"\x18CreateTaskCommentRequest\x12 \n" +
	"\atask_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06taskId\x12!\n" +
	"\acomment\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\acomment\"l\n" +
	"\x1dAddTaskCommentReactionRequest\x12&\n" +
	"\n" +
	"comment_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\tcommentId\x12#\n" +
	"\breaction\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\breaction\"\xa2\x01\n" +
	"\x18UpdateTaskCommentRequest\x12(\n" +
	"\vtimeline_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"timelineId\x12\x1b\n" +
	"\bnew_text\x18\x02 \x01(\tH\x00R\anewText\x12\x18\n" +
	"\x06delete\x18\x03 \x01(\bH\x00R\x06delete\x12\x1d\n" +
	"\toff_topic\x18\x04 \x01(\bH\x00R\boffTopicB\x06\n" +
	"\x04kind\"\xd4\x01\n" +
	"\x10QueryViewRequest\x12/\n" +
	"\x04view\x18\x01 \x01(\v2\x12.tkd.tasks.v1.ViewB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04view\x12\x1b\n" +
	"\tboard_ids\x18\x02 \x03(\tR\bboardIds\x129\n" +
	"\n" +
	"pagination\x18\x03 \x01(\v2\x19.tkd.common.v1.PaginationR\n" +
	"pagination\x127\n" +
	"\tread_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\x87\x01\n" +
	"\tTaskGroup\x125\n" +
	"\vgroup_value\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\n" +
	"groupValue\x12(\n" +
	"\x05tasks\x18\x02 \x03(\v2\x12.tkd.tasks.v1.TaskR\x05tasks\x12\x19\n" +
	"\bboard_id\x18\x03 \x01(\tR\aboardId\"\xd7\x01\n" +
	"\x11QueryViewResponse\x12$\n" +
	"\x0egroup_by_field\x18\x01 \x01(\tR\fgroupByField\x12/\n" +
	"\x06groups\x18\x02 \x03(\v2\x17.tkd.tasks.v1.TaskGroupR\x06groups\x12+\n" +
	"\x06boards\x18\x03 \x03(\v2\x13.tkd.tasks.v1.BoardR\x06boards\x12>\n" +
	"\x11new_task_template\x18\x04 \x01(\v2\x12.tkd.tasks.v1.TaskR\x0fnewTaskTemplate2\xa8\f\n" +
	"\vTaskService\x12V\n" +
	"\n" +
	"CreateTask\x12\x1f.tkd.tasks.v1.CreateTaskRequest\x1a .tkd.tasks.v1.CreateTaskResponse\"\x05\xb2~\x02\b\x01\x12V\n" +
	"\n" +
	"UpdateTask\x12\x1f.tkd.tasks.v1.UpdateTaskRequest\x1a .tkd.tasks.v1.UpdateTaskResponse\"\x05\xb2~\x02\b\x01\x12V\n" +
	"\n" +
	"AssignTask\x12\x1f.tkd.tasks.v1.AssignTaskRequest\x1a .tkd.tasks.v1.AssignTaskResponse\"\x05\xb2~\x02\b\x01\x12\\\n" +
	"\fCompleteTask\x12!.tkd.tasks.v1.CompleteTaskRequest\x1a\".tkd.tasks.v1.CompleteTaskResponse\"\x05\xb2~\x02\b\x01\x12L\n" +
	"\n" +
	"DeleteTask\x12\x1f.tkd.tasks.v1.DeleteTaskRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12S\n" +
	"\tListTasks\x12\x1e.tkd.tasks.v1.ListTasksRequest\x1a\x1f.tkd.tasks.v1.ListTasksResponse\"\x05\xb2~\x02\b\x01\x12S\n" +
	"\tQueryView\x12\x1e.tkd.tasks.v1.QueryViewRequest\x1a\x1f.tkd.tasks.v1.QueryViewResponse\"\x05\xb2~\x02\b\x01\x12W\n" +
	"\vFilterTasks\x12 .tkd.tasks.v1.FilterTasksRequest\x1a\x1f.tkd.tasks.v1.ListTasksResponse\"\x05\xb2~\x02\b\x01\x12Y\n" +
	"\vParseFilter\x12 .tkd.tasks.v1.ParseFilterRequest\x1a!.tkd.tasks.v1.ParseFilterResponse\"\x05\xb2~\x02\b\x01\x12M\n" +
	"\aGetTask\x12\x1c.tkd.tasks.v1.GetTaskRequest\x1a\x1d.tkd.tasks.v1.GetTaskResponse\"\x05\xb2~\x02\b\x01\x12k\n" +
	"\x11AddTaskAttachment\x12&.tkd.tasks.v1.AddTaskAttachmentRequest\x1a'.tkd.tasks.v1.AddTaskAttachmentResponse\"\x05\xb2~\x02\b\x01\x12t\n" +
	"\x14DeleteTaskAttachment\x12).tkd.tasks.v1.DeleteTaskAttachmentRequest\x1a*.tkd.tasks.v1.DeleteTaskAttachmentResponse\"\x05\xb2~\x02\b\x01\x12\\\n" +
	"\x12ManageSubscription\x12'.tkd.tasks.v1.ManageSubscriptionRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12Y\n" +
	"\vGetTimeline\x12 .tkd.tasks.v1.GetTimelineRequest\x1a!.tkd.tasks.v1.GetTimelineResponse\"\x05\xb2~\x02\b\x01\x12Z\n" +
	"\x11CreateTaskComment\x12&.tkd.tasks.v1.CreateTaskCommentRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12d\n" +
	"\x16AddTaskCommentReaction\x12+.tkd.tasks.v1.AddTaskCommentReactionRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12Z\n" +
	"\x11UpdateTaskComment\x12&.tkd.tasks.v1.UpdateTaskCommentRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01B\xb3\x01\n" +
	"\x10com.tkd.tasks.v1B\n" +
	"TasksProtoP\x01ZAgithub.com/tierklinik-dobersberg/apis/gen/go/tkd/tasks/v1;tasksv1\xa2\x02\x03TTX\xaa\x02\fTkd.Tasks.V1\xca\x02\fTkd\\Tasks\\V1\xe2\x02\x18Tkd\\Tasks\\V1\\GPBMetadata\xea\x02\x0eTkd::Tasks::V1b\x06proto3"

var (
	file_tkd_tasks_v1_tasks_proto_rawDescOnce sync.Once
	file_tkd_tasks_v1_tasks_proto_rawDescData []byte
)

func file_tkd_tasks_v1_tasks_proto_rawDescGZIP() []byte {
	file_tkd_tasks_v1_tasks_proto_rawDescOnce.Do(func() {
		file_tkd_tasks_v1_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_tasks_v1_tasks_proto_rawDesc), len(file_tkd_tasks_v1_tasks_proto_rawDesc)))
	})
	return file_tkd_tasks_v1_tasks_proto_rawDescData
}

var file_tkd_tasks_v1_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_tkd_tasks_v1_tasks_proto_goTypes = []any{
	(*Attachment)(nil),                    // 0: tkd.tasks.v1.Attachment
	(*Task)(nil),                          // 1: tkd.tasks.v1.Task
	(*TaskValueChange)(nil),               // 2: tkd.tasks.v1.TaskValueChange
	(*TaskReaction)(nil),                  // 3: tkd.tasks.v1.TaskReaction
	(*TaskComment)(nil),                   // 4: tkd.tasks.v1.TaskComment
	(*TaskTimelineEntry)(nil),             // 5: tkd.tasks.v1.TaskTimelineEntry
	(*CreateTaskRequest)(nil),             // 6: tkd.tasks.v1.CreateTaskRequest
	(*CreateTaskResponse)(nil),            // 7: tkd.tasks.v1.CreateTaskResponse
	(*UpdateTaskRequest)(nil),             // 8: tkd.tasks.v1.UpdateTaskRequest
	(*AddProperties)(nil),                 // 9: tkd.tasks.v1.AddProperties
	(*AddProperty)(nil),                   // 10: tkd.tasks.v1.AddProperty
	(*UpdateTaskResponse)(nil),            // 11: tkd.tasks.v1.UpdateTaskResponse
	(*AssignTaskRequest)(nil),             // 12: tkd.tasks.v1.AssignTaskRequest
	(*AssignTaskResponse)(nil),            // 13: tkd.tasks.v1.AssignTaskResponse
	(*CompleteTaskRequest)(nil),           // 14: tkd.tasks.v1.CompleteTaskRequest
	(*CompleteTaskResponse)(nil),          // 15: tkd.tasks.v1.CompleteTaskResponse
	(*DeleteTaskRequest)(nil),             // 16: tkd.tasks.v1.DeleteTaskRequest
	(*GetTaskRequest)(nil),                // 17: tkd.tasks.v1.GetTaskRequest
	(*GetTaskResponse)(nil),               // 18: tkd.tasks.v1.GetTaskResponse
	(*TaskQuery)(nil),                     // 19: tkd.tasks.v1.TaskQuery
	(*ListTasksRequest)(nil),              // 20: tkd.tasks.v1.ListTasksRequest
	(*FilterTasksRequest)(nil),            // 21: tkd.tasks.v1.FilterTasksRequest
	(*ParseFilterRequest)(nil),            // 22: tkd.tasks.v1.ParseFilterRequest
	(*ParseFilterResponse)(nil),           // 23: tkd.tasks.v1.ParseFilterResponse
	(*ListTasksResponse)(nil),             // 24: tkd.tasks.v1.ListTasksResponse
	(*AddTaskAttachmentRequest)(nil),      // 25: tkd.tasks.v1.AddTaskAttachmentRequest
	(*AddTaskAttachmentResponse)(nil),     // 26: tkd.tasks.v1.AddTaskAttachmentResponse
	(*DeleteTaskAttachmentRequest)(nil),   // 27: tkd.tasks.v1.DeleteTaskAttachmentRequest
	(*DeleteTaskAttachmentResponse)(nil),  // 28: tkd.tasks.v1.DeleteTaskAttachmentResponse
	(*GetTimelineRequest)(nil),            // 29: tkd.tasks.v1.GetTimelineRequest
	(*GetTimelineResponse)(nil),           // 30: tkd.tasks.v1.GetTimelineResponse
	(*CreateTaskCommentRequest)(nil),      // 31: tkd.tasks.v1.CreateTaskCommentRequest
	(*AddTaskCommentReactionRequest)(nil), // 32: tkd.tasks.v1.AddTaskCommentReactionRequest
	(*UpdateTaskCommentRequest)(nil),      // 33: tkd.tasks.v1.UpdateTaskCommentRequest
	(*QueryViewRequest)(nil),              // 34: tkd.tasks.v1.QueryViewRequest
	(*TaskGroup)(nil),                     // 35: tkd.tasks.v1.TaskGroup
	(*QueryViewResponse)(nil),             // 36: tkd.tasks.v1.QueryViewResponse
	nil,                                   // 37: tkd.tasks.v1.Task.PropertiesEntry
	nil,                                   // 38: tkd.tasks.v1.Task.SubscriptionsEntry
	nil,                                   // 39: tkd.tasks.v1.CreateTaskRequest.PropertiesEntry
	(*v1.GeoLocation)(nil),                // 40: tkd.common.v1.GeoLocation
	(*v11.Address)(nil),                   // 41: tkd.customer.v1.Address
	(*durationpb.Duration)(nil),           // 42: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),         // 43: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),         // 44: google.protobuf.Int32Value
	(*structpb.Value)(nil),                // 45: google.protobuf.Value
	(*v1.StringList)(nil),                 // 46: tkd.common.v1.StringList
	(*fieldmaskpb.FieldMask)(nil),         // 47: google.protobuf.FieldMask
	(*anypb.Any)(nil),                     // 48: google.protobuf.Any
	(*v1.TimeRange)(nil),                  // 49: tkd.common.v1.TimeRange
	(*wrapperspb.BoolValue)(nil),          // 50: google.protobuf.BoolValue
	(*v1.View)(nil),                       // 51: tkd.common.v1.View
	(*v1.Pagination)(nil),                 // 52: tkd.common.v1.Pagination
	(*View)(nil),                          // 53: tkd.tasks.v1.View
	(*Board)(nil),                         // 54: tkd.tasks.v1.Board
	(*Subscription)(nil),                  // 55: tkd.tasks.v1.Subscription
	(*ManageSubscriptionRequest)(nil),     // 56: tkd.tasks.v1.ManageSubscriptionRequest
	(*emptypb.Empty)(nil),                 // 57: google.protobuf.Empty
}
var file_tkd_tasks_v1_tasks_proto_depIdxs = []int32{
	40, // 0: tkd.tasks.v1.Task.geo_location:type_name -> tkd.common.v1.GeoLocation
	41, // 1: tkd.tasks.v1.Task.address:type_name -> tkd.customer.v1.Address
	0,  // 2: tkd.tasks.v1.Task.attachments:type_name -> tkd.tasks.v1.Attachment
	42, // 3: tkd.tasks.v1.Task.travel_time:type_name -> google.protobuf.Duration
	43, // 4: tkd.tasks.v1.Task.due_time:type_name -> google.protobuf.Timestamp
	43, // 5: tkd.tasks.v1.Task.not_before:type_name -> google.protobuf.Timestamp
	37, // 6: tkd.tasks.v1.Task.properties:type_name -> tkd.tasks.v1.Task.PropertiesEntry
	38, // 7: tkd.tasks.v1.Task.subscriptions:type_name -> tkd.tasks.v1.Task.SubscriptionsEntry
	44, // 8: tkd.tasks.v1.Task.priority:type_name -> google.protobuf.Int32Value
	43, // 9: tkd.tasks.v1.Task.create_time:type_name -> google.protobuf.Timestamp
	43, // 10: tkd.tasks.v1.Task.update_time:type_name -> google.protobuf.Timestamp
	43, // 11: tkd.tasks.v1.Task.complete_time:type_name -> google.protobuf.Timestamp
	43, // 12: tkd.tasks.v1.Task.assign_time:type_name -> google.protobuf.Timestamp
	45, // 13: tkd.tasks.v1.TaskValueChange.old_value:type_name -> google.protobuf.Value
	45, // 14: tkd.tasks.v1.TaskValueChange.new_value:type_name -> google.protobuf.Value
	3,  // 15: tkd.tasks.v1.TaskComment.reactions:type_name -> tkd.tasks.v1.TaskReaction
	43, // 16: tkd.tasks.v1.TaskComment.edit_time:type_name -> google.protobuf.Timestamp
	43, // 17: tkd.tasks.v1.TaskComment.delete_time:type_name -> google.protobuf.Timestamp
	43, // 18: tkd.tasks.v1.TaskComment.mark_as_offtopic_time:type_name -> google.protobuf.Timestamp
	43, // 19: tkd.tasks.v1.TaskTimelineEntry.create_time:type_name -> google.protobuf.Timestamp
	2,  // 20: tkd.tasks.v1.TaskTimelineEntry.value_change:type_name -> tkd.tasks.v1.TaskValueChange
	4,  // 21: tkd.tasks.v1.TaskTimelineEntry.comment:type_name -> tkd.tasks.v1.TaskComment
	40, // 22: tkd.tasks.v1.CreateTaskRequest.geo_location:type_name -> tkd.common.v1.GeoLocation
	41, // 23: tkd.tasks.v1.CreateTaskRequest.address:type_name -> tkd.customer.v1.Address
	0,  // 24: tkd.tasks.v1.CreateTaskRequest.attachments:type_name -> tkd.tasks.v1.Attachment
	43, // 25: tkd.tasks.v1.CreateTaskRequest.due_time:type_name -> google.protobuf.Timestamp
	43, // 26: tkd.tasks.v1.CreateTaskRequest.not_before:type_name -> google.protobuf.Timestamp
	39, // 27: tkd.tasks.v1.CreateTaskRequest.properties:type_name -> tkd.tasks.v1.CreateTaskRequest.PropertiesEntry
	44, // 28: tkd.tasks.v1.CreateTaskRequest.priority:type_name -> google.protobuf.Int32Value
	1,  // 29: tkd.tasks.v1.CreateTaskResponse.task:type_name -> tkd.tasks.v1.Task
	40, // 30: tkd.tasks.v1.UpdateTaskRequest.geo_location:type_name -> tkd.common.v1.GeoLocation
	41, // 31: tkd.tasks.v1.UpdateTaskRequest.address:type_name -> tkd.customer.v1.Address
	46, // 32: tkd.tasks.v1.UpdateTaskRequest.add_tags:type_name -> tkd.common.v1.StringList
	46, // 33: tkd.tasks.v1.UpdateTaskRequest.delete_tags:type_name -> tkd.common.v1.StringList
	46, // 34: tkd.tasks.v1.UpdateTaskRequest.replace_tags:type_name -> tkd.common.v1.StringList
	43, // 35: tkd.tasks.v1.UpdateTaskRequest.due_time:type_name -> google.protobuf.Timestamp
	43, // 36: tkd.tasks.v1.UpdateTaskRequest.not_before:type_name -> google.protobuf.Timestamp
	9,  // 37: tkd.tasks.v1.UpdateTaskRequest.add_properties:type_name -> tkd.tasks.v1.AddProperties
	46, // 38: tkd.tasks.v1.UpdateTaskRequest.delete_properties:type_name -> tkd.common.v1.StringList
	44, // 39: tkd.tasks.v1.UpdateTaskRequest.priority:type_name -> google.protobuf.Int32Value
	47, // 40: tkd.tasks.v1.UpdateTaskRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 41: tkd.tasks.v1.AddProperties.properties:type_name -> tkd.tasks.v1.AddProperty
	48, // 42: tkd.tasks.v1.AddProperty.value:type_name -> google.protobuf.Any
	1,  // 43: tkd.tasks.v1.UpdateTaskResponse.task:type_name -> tkd.tasks.v1.Task
	1,  // 44: tkd.tasks.v1.AssignTaskResponse.task:type_name -> tkd.tasks.v1.Task
	1,  // 45: tkd.tasks.v1.CompleteTaskResponse.task:type_name -> tkd.tasks.v1.Task
	1,  // 46: tkd.tasks.v1.GetTaskResponse.task:type_name -> tkd.tasks.v1.Task
	49, // 47: tkd.tasks.v1.TaskQuery.due_between:type_name -> tkd.common.v1.TimeRange
	50, // 48: tkd.tasks.v1.TaskQuery.completed:type_name -> google.protobuf.BoolValue
	19, // 49: tkd.tasks.v1.ListTasksRequest.queries:type_name -> tkd.tasks.v1.TaskQuery
	51, // 50: tkd.tasks.v1.ListTasksRequest.view:type_name -> tkd.common.v1.View
	52, // 51: tkd.tasks.v1.ListTasksRequest.pagination:type_name -> tkd.common.v1.Pagination
	51, // 52: tkd.tasks.v1.FilterTasksRequest.view:type_name -> tkd.common.v1.View
	52, // 53: tkd.tasks.v1.FilterTasksRequest.pagination:type_name -> tkd.common.v1.Pagination
	1,  // 54: tkd.tasks.v1.ListTasksResponse.tasks:type_name -> tkd.tasks.v1.Task
	1,  // 55: tkd.tasks.v1.AddTaskAttachmentResponse.task:type_name -> tkd.tasks.v1.Task
	1,  // 56: tkd.tasks.v1.DeleteTaskAttachmentResponse.task:type_name -> tkd.tasks.v1.Task
	5,  // 57: tkd.tasks.v1.GetTimelineResponse.timeline:type_name -> tkd.tasks.v1.TaskTimelineEntry
	53, // 58: tkd.tasks.v1.QueryViewRequest.view:type_name -> tkd.tasks.v1.View
	52, // 59: tkd.tasks.v1.QueryViewRequest.pagination:type_name -> tkd.common.v1.Pagination
	47, // 60: tkd.tasks.v1.QueryViewRequest.read_mask:type_name -> google.protobuf.FieldMask
	48, // 61: tkd.tasks.v1.TaskGroup.group_value:type_name -> google.protobuf.Any
	1,  // 62: tkd.tasks.v1.TaskGroup.tasks:type_name -> tkd.tasks.v1.Task
	35, // 63: tkd.tasks.v1.QueryViewResponse.groups:type_name -> tkd.tasks.v1.TaskGroup
	54, // 64: tkd.tasks.v1.QueryViewResponse.boards:type_name -> tkd.tasks.v1.Board
	1,  // 65: tkd.tasks.v1.QueryViewResponse.new_task_template:type_name -> tkd.tasks.v1.Task
	48, // 66: tkd.tasks.v1.Task.PropertiesEntry.value:type_name -> google.protobuf.Any
	55, // 67: tkd.tasks.v1.Task.SubscriptionsEntry.value:type_name -> tkd.tasks.v1.Subscription
	48, // 68: tkd.tasks.v1.CreateTaskRequest.PropertiesEntry.value:type_name -> google.protobuf.Any
	6,  // 69: tkd.tasks.v1.TaskService.CreateTask:input_type -> tkd.tasks.v1.CreateTaskRequest
	8,  // 70: tkd.tasks.v1.TaskService.UpdateTask:input_type -> tkd.tasks.v1.UpdateTaskRequest
	12, // 71: tkd.tasks.v1.TaskService.AssignTask:input_type -> tkd.tasks.v1.AssignTaskRequest
	14, // 72: tkd.tasks.v1.TaskService.CompleteTask:input_type -> tkd.tasks.v1.CompleteTaskRequest
	16, // 73: tkd.tasks.v1.TaskService.DeleteTask:input_type -> tkd.tasks.v1.DeleteTaskRequest
	20, // 74: tkd.tasks.v1.TaskService.ListTasks:input_type -> tkd.tasks.v1.ListTasksRequest
	34, // 75: tkd.tasks.v1.TaskService.QueryView:input_type -> tkd.tasks.v1.QueryViewRequest
	21, // 76: tkd.tasks.v1.TaskService.FilterTasks:input_type -> tkd.tasks.v1.FilterTasksRequest
	22, // 77: tkd.tasks.v1.TaskService.ParseFilter:input_type -> tkd.tasks.v1.ParseFilterRequest
	17, // 78: tkd.tasks.v1.TaskService.GetTask:input_type -> tkd.tasks.v1.GetTaskRequest
	25, // 79: tkd.tasks.v1.TaskService.AddTaskAttachment:input_type -> tkd.tasks.v1.AddTaskAttachmentRequest
	27, // 80: tkd.tasks.v1.TaskService.DeleteTaskAttachment:input_type -> tkd.tasks.v1.DeleteTaskAttachmentRequest
	56, // 81: tkd.tasks.v1.TaskService.ManageSubscription:input_type -> tkd.tasks.v1.ManageSubscriptionRequest
	29, // 82: tkd.tasks.v1.TaskService.GetTimeline:input_type -> tkd.tasks.v1.GetTimelineRequest
	31, // 83: tkd.tasks.v1.TaskService.CreateTaskComment:input_type -> tkd.tasks.v1.CreateTaskCommentRequest
	32, // 84: tkd.tasks.v1.TaskService.AddTaskCommentReaction:input_type -> tkd.tasks.v1.AddTaskCommentReactionRequest
	33, // 85: tkd.tasks.v1.TaskService.UpdateTaskComment:input_type -> tkd.tasks.v1.UpdateTaskCommentRequest
	7,  // 86: tkd.tasks.v1.TaskService.CreateTask:output_type -> tkd.tasks.v1.CreateTaskResponse
	11, // 87: tkd.tasks.v1.TaskService.UpdateTask:output_type -> tkd.tasks.v1.UpdateTaskResponse
	13, // 88: tkd.tasks.v1.TaskService.AssignTask:output_type -> tkd.tasks.v1.AssignTaskResponse
	15, // 89: tkd.tasks.v1.TaskService.CompleteTask:output_type -> tkd.tasks.v1.CompleteTaskResponse
	57, // 90: tkd.tasks.v1.TaskService.DeleteTask:output_type -> google.protobuf.Empty
	24, // 91: tkd.tasks.v1.TaskService.ListTasks:output_type -> tkd.tasks.v1.ListTasksResponse
	36, // 92: tkd.tasks.v1.TaskService.QueryView:output_type -> tkd.tasks.v1.QueryViewResponse
	24, // 93: tkd.tasks.v1.TaskService.FilterTasks:output_type -> tkd.tasks.v1.ListTasksResponse
	23, // 94: tkd.tasks.v1.TaskService.ParseFilter:output_type -> tkd.tasks.v1.ParseFilterResponse
	18, // 95: tkd.tasks.v1.TaskService.GetTask:output_type -> tkd.tasks.v1.GetTaskResponse
	26, // 96: tkd.tasks.v1.TaskService.AddTaskAttachment:output_type -> tkd.tasks.v1.AddTaskAttachmentResponse
	28, // 97: tkd.tasks.v1.TaskService.DeleteTaskAttachment:output_type -> tkd.tasks.v1.DeleteTaskAttachmentResponse
	57, // 98: tkd.tasks.v1.TaskService.ManageSubscription:output_type -> google.protobuf.Empty
	30, // 99: tkd.tasks.v1.TaskService.GetTimeline:output_type -> tkd.tasks.v1.GetTimelineResponse
	57, // 100: tkd.tasks.v1.TaskService.CreateTaskComment:output_type -> google.protobuf.Empty
	57, // 101: tkd.tasks.v1.TaskService.AddTaskCommentReaction:output_type -> google.protobuf.Empty
	57, // 102: tkd.tasks.v1.TaskService.UpdateTaskComment:output_type -> google.protobuf.Empty
	86, // [86:103] is the sub-list for method output_type
	69, // [69:86] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_tkd_tasks_v1_tasks_proto_init() }
func file_tkd_tasks_v1_tasks_proto_init() {
	if File_tkd_tasks_v1_tasks_proto != nil {
		return
	}
	file_tkd_tasks_v1_boards_proto_init()
	file_tkd_tasks_v1_tasks_proto_msgTypes[1].OneofWrappers = []any{
		(*Task_GeoLocation)(nil),
		(*Task_Address)(nil),
	}
	file_tkd_tasks_v1_tasks_proto_msgTypes[5].OneofWrappers = []any{
		(*TaskTimelineEntry_ValueChange)(nil),
		(*TaskTimelineEntry_Comment)(nil),
	}
	file_tkd_tasks_v1_tasks_proto_msgTypes[6].OneofWrappers = []any{
		(*CreateTaskRequest_GeoLocation)(nil),
		(*CreateTaskRequest_Address)(nil),
	}
	file_tkd_tasks_v1_tasks_proto_msgTypes[8].OneofWrappers = []any{
		(*UpdateTaskRequest_GeoLocation)(nil),
		(*UpdateTaskRequest_Address)(nil),
		(*UpdateTaskRequest_AddTags)(nil),
		(*UpdateTaskRequest_DeleteTags)(nil),
		(*UpdateTaskRequest_ReplaceTags)(nil),
		(*UpdateTaskRequest_AddProperties)(nil),
		(*UpdateTaskRequest_DeleteProperties)(nil),
	}
	file_tkd_tasks_v1_tasks_proto_msgTypes[33].OneofWrappers = []any{
		(*UpdateTaskCommentRequest_NewText)(nil),
		(*UpdateTaskCommentRequest_Delete)(nil),
		(*UpdateTaskCommentRequest_OffTopic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_tasks_v1_tasks_proto_rawDesc), len(file_tkd_tasks_v1_tasks_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_tasks_v1_tasks_proto_goTypes,
		DependencyIndexes: file_tkd_tasks_v1_tasks_proto_depIdxs,
		MessageInfos:      file_tkd_tasks_v1_tasks_proto_msgTypes,
	}.Build()
	File_tkd_tasks_v1_tasks_proto = out.File
	file_tkd_tasks_v1_tasks_proto_goTypes = nil
	file_tkd_tasks_v1_tasks_proto_depIdxs = nil
}
