// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: tkd/tasks/v1/boards.proto

package tasksv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NotificationType defines which type of notifications should be sent
// for board or task subscriptions.
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_SMS         NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_MAIL        NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_WEBPUSH     NotificationType = 3
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_SMS",
		2: "NOTIFICATION_TYPE_MAIL",
		3: "NOTIFICATION_TYPE_WEBPUSH",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED": 0,
		"NOTIFICATION_TYPE_SMS":         1,
		"NOTIFICATION_TYPE_MAIL":        2,
		"NOTIFICATION_TYPE_WEBPUSH":     3,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_tasks_v1_boards_proto_enumTypes[0].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_tkd_tasks_v1_boards_proto_enumTypes[0]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{0}
}

type EventType int32

const (
	// UNSPECIFIED is equal to ALL
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	// Published when a new task has been created
	EventType_EVENT_TYPE_CREATED EventType = 1
	// Published when a task has been updated
	EventType_EVENT_TYPE_UPDATED EventType = 2
	// Published when a task has been deleted
	EventType_EVENT_TYPE_DELETED EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_CREATED",
		2: "EVENT_TYPE_UPDATED",
		3: "EVENT_TYPE_DELETED",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_CREATED":     1,
		"EVENT_TYPE_UPDATED":     2,
		"EVENT_TYPE_DELETED":     3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_tasks_v1_boards_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_tkd_tasks_v1_boards_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{1}
}

type ListBoard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBoard) Reset() {
	*x = ListBoard{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBoard) ProtoMessage() {}

func (x *ListBoard) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBoard.ProtoReflect.Descriptor instead.
func (*ListBoard) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{0}
}

// BoardPermission specifies which users or roles are allowed or denied
// to perform a given operation.
// Dending on the child fields, the behavior for permission evaluation is
// different:
//   - if all allow_* fields are empty, the permission is a simple deny-list
//     and allows operations by default
//   - if all deny_* fields are empty, the permission is a simple allow-list
//     and denies operations by default.
//   - If all allow_* and deny_* fields are empty, everyone is allowed to
//     perform any opertion by default.
type BoardPermission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllowRoles    []string               `protobuf:"bytes,1,rep,name=allow_roles,json=allowRoles,proto3" json:"allow_roles,omitempty"`
	AllowUsers    []string               `protobuf:"bytes,2,rep,name=allow_users,json=allowUsers,proto3" json:"allow_users,omitempty"`
	DenyRoles     []string               `protobuf:"bytes,3,rep,name=deny_roles,json=denyRoles,proto3" json:"deny_roles,omitempty"`
	DenyUsers     []string               `protobuf:"bytes,4,rep,name=deny_users,json=denyUsers,proto3" json:"deny_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardPermission) Reset() {
	*x = BoardPermission{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardPermission) ProtoMessage() {}

func (x *BoardPermission) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardPermission.ProtoReflect.Descriptor instead.
func (*BoardPermission) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{1}
}

func (x *BoardPermission) GetAllowRoles() []string {
	if x != nil {
		return x.AllowRoles
	}
	return nil
}

func (x *BoardPermission) GetAllowUsers() []string {
	if x != nil {
		return x.AllowUsers
	}
	return nil
}

func (x *BoardPermission) GetDenyRoles() []string {
	if x != nil {
		return x.DenyRoles
	}
	return nil
}

func (x *BoardPermission) GetDenyUsers() []string {
	if x != nil {
		return x.DenyUsers
	}
	return nil
}

// TaskStatus defines a status that might be set on a task.
type TaskStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status is the actual status value and must be unique!
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Description is an optional, human readable description
	// of the task status.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Color might define a color for the task status.
	// if set, it should follow the HTML/CSS Hex-Color (6-digit) format.
	// Alpha-channels are not allowed.
	Color         string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{2}
}

func (x *TaskStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskStatus) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type TaskPriority struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the priority and must be unique accross
	// a board.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description is an optional description of the board.
	Descritpion string `protobuf:"bytes,2,opt,name=descritpion,proto3" json:"descritpion,omitempty"`
	// Priority is the actual priority value.
	// A higher number indicates a higher priority.
	// A priority value must be unique accross a single board.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// Color defines a color for this priority to be used
	// within a user front-end. If set, it should follow the HTLM/CSS
	// Hex-Color (6-digits) format.
	Color         string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskPriority) Reset() {
	*x = TaskPriority{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPriority) ProtoMessage() {}

func (x *TaskPriority) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPriority.ProtoReflect.Descriptor instead.
func (*TaskPriority) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{3}
}

func (x *TaskPriority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskPriority) GetDescritpion() string {
	if x != nil {
		return x.Descritpion
	}
	return ""
}

func (x *TaskPriority) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TaskPriority) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// TaskTag defines a tag that might be assigned to a task.
type TaskTag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tag is the actual tag value and must be unique across the board.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Description is an optional, human readable description
	// of the task tag.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Color might define a color for the task tag.
	// if set, it should follow the HTML/CSS Hex-Color (6-digit) format.
	// Alpha-channels are not allowed.
	Color         string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTag) Reset() {
	*x = TaskTag{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTag) ProtoMessage() {}

func (x *TaskTag) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTag.ProtoReflect.Descriptor instead.
func (*TaskTag) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{4}
}

func (x *TaskTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TaskTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskTag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// Subscription defines an (un-)subscribe for task update notifications.
type Subscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the id of the user that either subscribed to board or task
	// updates.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// NotificationTypes defines which kind of notifications the user want's to receive
	NotificationTypes []NotificationType `protobuf:"varint,2,rep,packed,name=notification_types,json=notificationTypes,proto3,enum=tkd.tasks.v1.NotificationType" json:"notification_types,omitempty"`
	// Unsubscribed is set to true if the user unsubscribed from any notifications.
	Unsubscribed  bool `protobuf:"varint,3,opt,name=unsubscribed,proto3" json:"unsubscribed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{5}
}

func (x *Subscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Subscription) GetNotificationTypes() []NotificationType {
	if x != nil {
		return x.NotificationTypes
	}
	return nil
}

func (x *Subscription) GetUnsubscribed() bool {
	if x != nil {
		return x.Unsubscribed
	}
	return false
}

type View struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name holds the unique name of the board.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filter holds a filter query to restrict which
	// tasks will be shown in the view.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sort holds an opational sort configuration for the
	// board view.
	Sort *v1.Sort `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// GroupByField may specify a field name that should be
	// used to group tasks together.
	// It's only possible to group by scalar task values.
	GroupByField string `protobuf:"bytes,4,opt,name=group_by_field,json=groupByField,proto3" json:"group_by_field,omitempty"`
	// GroupSortDirection specifies the sorting direction for
	// groups returned from the TaskService.QueryView RPC.
	GroupSortDirection v1.SortDirection `protobuf:"varint,5,opt,name=group_sort_direction,json=groupSortDirection,proto3,enum=tkd.common.v1.SortDirection" json:"group_sort_direction,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *View) Reset() {
	*x = View{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{6}
}

func (x *View) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *View) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *View) GetSort() *v1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *View) GetGroupByField() string {
	if x != nil {
		return x.GroupByField
	}
	return ""
}

func (x *View) GetGroupSortDirection() v1.SortDirection {
	if x != nil {
		return x.GroupSortDirection
	}
	return v1.SortDirection(0)
}

type SummaryNotification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RecipientUserIds holds a list of user ids that should recieve a summary
	// notification.
	// If both recipient_user_ids and recipient_role_ids is empty, the summary notification
	// will be sent to all users.
	RecipientUserIds []string `protobuf:"bytes,1,rep,name=recipient_user_ids,json=recipientUserIds,proto3" json:"recipient_user_ids,omitempty"`
	// RecipientRoleIds holds a list of user role ids that should recieve a summary
	// notification.
	RecipientRoleIds []string `protobuf:"bytes,2,rep,name=recipient_role_ids,json=recipientRoleIds,proto3" json:"recipient_role_ids,omitempty"`
	// CronSchedule holds the schedule at which a summary notification
	// should be sent.
	CronSchedule string `protobuf:"bytes,3,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	// Filter describes an optional text filter to restrict which tasks
	// are part of the summary notification.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// TemplateName holds the name of the mail template that should be used
	// for the summary notification.
	// If left empty, the service implementation should provide a default task
	// list template.
	TemplateName  string `protobuf:"bytes,5,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryNotification) Reset() {
	*x = SummaryNotification{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryNotification) ProtoMessage() {}

func (x *SummaryNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryNotification.ProtoReflect.Descriptor instead.
func (*SummaryNotification) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{7}
}

func (x *SummaryNotification) GetRecipientUserIds() []string {
	if x != nil {
		return x.RecipientUserIds
	}
	return nil
}

func (x *SummaryNotification) GetRecipientRoleIds() []string {
	if x != nil {
		return x.RecipientRoleIds
	}
	return nil
}

func (x *SummaryNotification) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *SummaryNotification) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *SummaryNotification) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

// Board is a task board.
type Board struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique ID of the board.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// DisplayName is a human friendly display name of the board
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is an optional, human friendly description of the board
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// AllowedTaskStatus defines all possible status values a task may have.
	AllowedTaskStatus []*TaskStatus `protobuf:"bytes,5,rep,name=allowed_task_status,json=allowedTaskStatus,proto3" json:"allowed_task_status,omitempty"`
	// AllowedTaskTags defines all possible tags values that might be assigned to
	// a task.
	AllowedTaskTags []*TaskTag `protobuf:"bytes,6,rep,name=allowed_task_tags,json=allowedTaskTags,proto3" json:"allowed_task_tags,omitempty"`
	// AllowedTaskPriorities defines all possible priority values that might be set
	// on task.
	AllowedTaskPriorities []*TaskPriority `protobuf:"bytes,18,rep,name=allowed_task_priorities,json=allowedTaskPriorities,proto3" json:"allowed_task_priorities,omitempty"`
	// HelpText is a markdown formatted help text of the board.
	HelpText string `protobuf:"bytes,7,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	// ReadPermissions determines which roles and users are allowed or denied
	// when reading the board or tasks
	ReadPermission *BoardPermission `protobuf:"bytes,10,opt,name=read_permission,json=readPermission,proto3" json:"read_permission,omitempty"`
	// WritePermissions determines which roles and users are allowed or denied
	// when writing to the board or task resources.
	WritePermission *BoardPermission `protobuf:"bytes,11,opt,name=write_permission,json=writePermission,proto3" json:"write_permission,omitempty"`
	// OwnerId is the ID of the board owner.
	OwnerId string `protobuf:"bytes,13,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// EligibleRoleIds specifies all roles that are eligible for task assignment.
	EligibleRoleIds []string `protobuf:"bytes,14,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	// EligibleUserIds specifies all user ids that are aligible for task assignment.
	EligibleUserIds []string `protobuf:"bytes,15,rep,name=eligible_user_ids,json=eligibleUserIds,proto3" json:"eligible_user_ids,omitempty"`
	// Subscriptions is a map of user-id to subscription setting.
	Subscriptions map[string]*Subscription `protobuf:"bytes,16,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// InitialStatus is the initial status for newly created board tasks.
	// If empty, the "empty" status value is also allowed.
	// Note, if a task status is unset (that is, to an empty string),
	// the InitialStatus value is used.
	InitialStatus string `protobuf:"bytes,17,opt,name=initial_status,json=initialStatus,proto3" json:"initial_status,omitempty"`
	// DoneStatus may hold a status value that should be set once
	// the task is completed.
	DoneStatus string `protobuf:"bytes,19,opt,name=done_status,json=doneStatus,proto3" json:"done_status,omitempty"`
	// Views holds pre-configured views for the board.
	Views []*View `protobuf:"bytes,20,rep,name=views,proto3" json:"views,omitempty"`
	// SummaryNotifications defines summary notifications for this board.
	// That is, at a specific schedule (cron-syntax) all tasks that
	// match the notifications filter setting and passed (with their
	// description rendered as markdown) to the specified mail template
	// and are finally sent to the specified list of recipients.
	SummaryNotifications []*SummaryNotification `protobuf:"bytes,21,rep,name=summary_notifications,json=summaryNotifications,proto3" json:"summary_notifications,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Board) Reset() {
	*x = Board{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{8}
}

func (x *Board) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Board) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Board) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Board) GetAllowedTaskStatus() []*TaskStatus {
	if x != nil {
		return x.AllowedTaskStatus
	}
	return nil
}

func (x *Board) GetAllowedTaskTags() []*TaskTag {
	if x != nil {
		return x.AllowedTaskTags
	}
	return nil
}

func (x *Board) GetAllowedTaskPriorities() []*TaskPriority {
	if x != nil {
		return x.AllowedTaskPriorities
	}
	return nil
}

func (x *Board) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *Board) GetReadPermission() *BoardPermission {
	if x != nil {
		return x.ReadPermission
	}
	return nil
}

func (x *Board) GetWritePermission() *BoardPermission {
	if x != nil {
		return x.WritePermission
	}
	return nil
}

func (x *Board) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Board) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *Board) GetEligibleUserIds() []string {
	if x != nil {
		return x.EligibleUserIds
	}
	return nil
}

func (x *Board) GetSubscriptions() map[string]*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Board) GetInitialStatus() string {
	if x != nil {
		return x.InitialStatus
	}
	return ""
}

func (x *Board) GetDoneStatus() string {
	if x != nil {
		return x.DoneStatus
	}
	return ""
}

func (x *Board) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *Board) GetSummaryNotifications() []*SummaryNotification {
	if x != nil {
		return x.SummaryNotifications
	}
	return nil
}

type ManageSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is either the board or the task ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// UserId is the ID of the user that subscribes or unsubscribes to board/task updates.
	// This field may only be set by an idm_superuser account. If unset, it defaults to the
	// authenticated user.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Unsubscribe should be set to true to unsubscribe from any updates.
	Unsubscribe bool `protobuf:"varint,3,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	// Types is a list of notification types to subscribe or unsubscribe.
	// If empty, an unsubsribe request will remove all subscribes.
	// If empty, an subscribe request will subscribe to the preferred backend default.
	Types         []NotificationType `protobuf:"varint,4,rep,packed,name=types,proto3,enum=tkd.tasks.v1.NotificationType" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManageSubscriptionRequest) Reset() {
	*x = ManageSubscriptionRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageSubscriptionRequest) ProtoMessage() {}

func (x *ManageSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ManageSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{9}
}

func (x *ManageSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManageSubscriptionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ManageSubscriptionRequest) GetUnsubscribe() bool {
	if x != nil {
		return x.Unsubscribe
	}
	return false
}

func (x *ManageSubscriptionRequest) GetTypes() []NotificationType {
	if x != nil {
		return x.Types
	}
	return nil
}

// CreateBoardRequest is the request to create a new task board.
type CreateBoardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DisplayName is human friendly name of the board.
	// It is required to be set and unqiue!
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description holds an optional board description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Kind is the board kind.
	// Currently on list-style boards are supported.
	// Kind is deprecated and ignored
	//
	// Types that are valid to be assigned to Kind:
	//
	//	*CreateBoardRequest_List
	Kind isCreateBoardRequest_Kind `protobuf_oneof:"kind"`
	// AllowedTaskStatus defines all possible status values a task might
	// have.
	AllowedTaskStatus []*TaskStatus `protobuf:"bytes,4,rep,name=allowed_task_status,json=allowedTaskStatus,proto3" json:"allowed_task_status,omitempty"`
	// AllowedTaskTags defines all possible tags that can be assigned to
	// a task.
	AllowedTaskTags []*TaskTag `protobuf:"bytes,5,rep,name=allowed_task_tags,json=allowedTaskTags,proto3" json:"allowed_task_tags,omitempty"`
	// AllowedTaskPriorities defines all possible priority values that can be
	// set on a task.
	AllowedTaskPriorities []*TaskPriority `protobuf:"bytes,16,rep,name=allowed_task_priorities,json=allowedTaskPriorities,proto3" json:"allowed_task_priorities,omitempty"`
	// HelpText specifies an additional help text for users of the task-board.
	HelpText string `protobuf:"bytes,6,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	// ReadPermission defines which users or roles are allowed/denied to read tasks
	// from the board.
	// If empty (including child fields), all users are allowed to read board tasks
	ReadPermission *BoardPermission `protobuf:"bytes,10,opt,name=read_permission,json=readPermission,proto3" json:"read_permission,omitempty"`
	// WritePermission defines which users or roles are allowed/denied to write or update
	// tasks in the the board.
	// If empty (including child fields), all users are allowed to update or create tasks.
	WritePermission *BoardPermission `protobuf:"bytes,11,opt,name=write_permission,json=writePermission,proto3" json:"write_permission,omitempty"`
	// EligibleRoleIds specifies which user roles can be assigned to a task
	EligibleRoleIds []string `protobuf:"bytes,13,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	// EligibleUserIds specifies which users can be assigned to a task.
	EligibleUserIds []string `protobuf:"bytes,14,rep,name=eligible_user_ids,json=eligibleUserIds,proto3" json:"eligible_user_ids,omitempty"`
	// InitialStatus is the initial status for newly created board tasks.
	// If empty, the "empty" status value is also allowed.
	// Note, if a task status is unset (that is, to an empty string),
	// the InitialStatus value is used.
	InitialStatus string `protobuf:"bytes,15,opt,name=initial_status,json=initialStatus,proto3" json:"initial_status,omitempty"`
	// DoneStatus may hold a status value that should be set once
	// the task is completed.
	DoneStatus string `protobuf:"bytes,17,opt,name=done_status,json=doneStatus,proto3" json:"done_status,omitempty"`
	// View may hold pre-configured views for the board.
	Views []*View `protobuf:"bytes,18,rep,name=views,proto3" json:"views,omitempty"`
	// SummaryNotifications may hold configuration for summary notification
	// mails for the newly created board.
	SummaryNotifications []*SummaryNotification `protobuf:"bytes,19,rep,name=summary_notifications,json=summaryNotifications,proto3" json:"summary_notifications,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateBoardRequest) Reset() {
	*x = CreateBoardRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBoardRequest) ProtoMessage() {}

func (x *CreateBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBoardRequest.ProtoReflect.Descriptor instead.
func (*CreateBoardRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{10}
}

func (x *CreateBoardRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateBoardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateBoardRequest) GetKind() isCreateBoardRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *CreateBoardRequest) GetList() *ListBoard {
	if x != nil {
		if x, ok := x.Kind.(*CreateBoardRequest_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *CreateBoardRequest) GetAllowedTaskStatus() []*TaskStatus {
	if x != nil {
		return x.AllowedTaskStatus
	}
	return nil
}

func (x *CreateBoardRequest) GetAllowedTaskTags() []*TaskTag {
	if x != nil {
		return x.AllowedTaskTags
	}
	return nil
}

func (x *CreateBoardRequest) GetAllowedTaskPriorities() []*TaskPriority {
	if x != nil {
		return x.AllowedTaskPriorities
	}
	return nil
}

func (x *CreateBoardRequest) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *CreateBoardRequest) GetReadPermission() *BoardPermission {
	if x != nil {
		return x.ReadPermission
	}
	return nil
}

func (x *CreateBoardRequest) GetWritePermission() *BoardPermission {
	if x != nil {
		return x.WritePermission
	}
	return nil
}

func (x *CreateBoardRequest) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *CreateBoardRequest) GetEligibleUserIds() []string {
	if x != nil {
		return x.EligibleUserIds
	}
	return nil
}

func (x *CreateBoardRequest) GetInitialStatus() string {
	if x != nil {
		return x.InitialStatus
	}
	return ""
}

func (x *CreateBoardRequest) GetDoneStatus() string {
	if x != nil {
		return x.DoneStatus
	}
	return ""
}

func (x *CreateBoardRequest) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *CreateBoardRequest) GetSummaryNotifications() []*SummaryNotification {
	if x != nil {
		return x.SummaryNotifications
	}
	return nil
}

type isCreateBoardRequest_Kind interface {
	isCreateBoardRequest_Kind()
}

type CreateBoardRequest_List struct {
	List *ListBoard `protobuf:"bytes,3,opt,name=list,proto3,oneof"`
}

func (*CreateBoardRequest_List) isCreateBoardRequest_Kind() {}

// CreateBoardResponse is the response message sent for CreateBoard RPCs
type CreateBoardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Board         *Board                 `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBoardResponse) Reset() {
	*x = CreateBoardResponse{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBoardResponse) ProtoMessage() {}

func (x *CreateBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBoardResponse.ProtoReflect.Descriptor instead.
func (*CreateBoardResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBoardResponse) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

// UpdateBoardRequest is the request message type for the BoardService.UpdateBoard RPC.
// See [Board] for more information about the meaning of the different message fields.
type UpdateBoardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId specifies the ID of the board that should be updated.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// DisplayName specifies the new display name of the board.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description specifies the new board description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Kind specifies the new board kind.
	// Currently only list-style board are supported.
	// Kind is deprecated and ignored
	//
	// Types that are valid to be assigned to Kind:
	//
	//	*UpdateBoardRequest_List
	Kind isUpdateBoardRequest_Kind `protobuf_oneof:"kind"`
	// AllowedTaskStatus specifies the new list of allowed task statuses.
	AllowedTaskStatus []*TaskStatus `protobuf:"bytes,5,rep,name=allowed_task_status,json=allowedTaskStatus,proto3" json:"allowed_task_status,omitempty"`
	// AllowedTasktags specifies the new list of allowed task tags.
	AllowedTaskTags []*TaskTag `protobuf:"bytes,6,rep,name=allowed_task_tags,json=allowedTaskTags,proto3" json:"allowed_task_tags,omitempty"`
	// AllowedTaskPriorities defines all possible priority values that can be
	// set on a task.
	AllowedTaskPriorities []*TaskPriority `protobuf:"bytes,15,rep,name=allowed_task_priorities,json=allowedTaskPriorities,proto3" json:"allowed_task_priorities,omitempty"`
	// HelpText specifies the new help text of the board.
	HelpText string `protobuf:"bytes,7,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	// OwnerId can be set to change the board owner.
	// Note that after this operation, further update to the board
	// settings will be denied as only the board owner is allowed to
	// change settings.
	OwnerId string `protobuf:"bytes,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// InitialStatus specifies the new initial_status of the board.
	// If changed to a non-empty value, all tasks with an empty status field
	// will be updated to the new initial_status value.
	InitialStatus string `protobuf:"bytes,9,opt,name=initial_status,json=initialStatus,proto3" json:"initial_status,omitempty"`
	// DoneStatus may hold a status value that should be set once
	// the task is completed.
	DoneStatus string `protobuf:"bytes,16,opt,name=done_status,json=doneStatus,proto3" json:"done_status,omitempty"`
	// ReadPermission specifies the new read permissions.
	ReadPermission *BoardPermission `protobuf:"bytes,10,opt,name=read_permission,json=readPermission,proto3" json:"read_permission,omitempty"`
	// WritePermission specifies the new write permissions.
	WritePermission *BoardPermission `protobuf:"bytes,11,opt,name=write_permission,json=writePermission,proto3" json:"write_permission,omitempty"`
	// EligibleRoleIds specifies a new set of roles that are eligible for
	// task assignment.
	EligibleRoleIds []string `protobuf:"bytes,13,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	// EligibleUserIds specifies a new set of users that are eligible for
	// task assignment.
	EligibleUserIds []string `protobuf:"bytes,14,rep,name=eligible_user_ids,json=eligibleUserIds,proto3" json:"eligible_user_ids,omitempty"`
	// View may hold pre-configured views for the board.
	Views []*View `protobuf:"bytes,17,rep,name=views,proto3" json:"views,omitempty"`
	// SummaryNotifications may hold configuration for summary notification
	// mails for the newly created board.
	SummaryNotifications []*SummaryNotification `protobuf:"bytes,18,rep,name=summary_notifications,json=summaryNotifications,proto3" json:"summary_notifications,omitempty"`
	// UpdateMask specifies which fields of the board should be updates.
	// Updates must specify an UpdateMask with an non-empty Paths member.
	// Otherwise, no updates will be performed.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,99,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBoardRequest) Reset() {
	*x = UpdateBoardRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoardRequest) ProtoMessage() {}

func (x *UpdateBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoardRequest.ProtoReflect.Descriptor instead.
func (*UpdateBoardRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBoardRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *UpdateBoardRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateBoardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateBoardRequest) GetKind() isUpdateBoardRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *UpdateBoardRequest) GetList() *ListBoard {
	if x != nil {
		if x, ok := x.Kind.(*UpdateBoardRequest_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *UpdateBoardRequest) GetAllowedTaskStatus() []*TaskStatus {
	if x != nil {
		return x.AllowedTaskStatus
	}
	return nil
}

func (x *UpdateBoardRequest) GetAllowedTaskTags() []*TaskTag {
	if x != nil {
		return x.AllowedTaskTags
	}
	return nil
}

func (x *UpdateBoardRequest) GetAllowedTaskPriorities() []*TaskPriority {
	if x != nil {
		return x.AllowedTaskPriorities
	}
	return nil
}

func (x *UpdateBoardRequest) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *UpdateBoardRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateBoardRequest) GetInitialStatus() string {
	if x != nil {
		return x.InitialStatus
	}
	return ""
}

func (x *UpdateBoardRequest) GetDoneStatus() string {
	if x != nil {
		return x.DoneStatus
	}
	return ""
}

func (x *UpdateBoardRequest) GetReadPermission() *BoardPermission {
	if x != nil {
		return x.ReadPermission
	}
	return nil
}

func (x *UpdateBoardRequest) GetWritePermission() *BoardPermission {
	if x != nil {
		return x.WritePermission
	}
	return nil
}

func (x *UpdateBoardRequest) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *UpdateBoardRequest) GetEligibleUserIds() []string {
	if x != nil {
		return x.EligibleUserIds
	}
	return nil
}

func (x *UpdateBoardRequest) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *UpdateBoardRequest) GetSummaryNotifications() []*SummaryNotification {
	if x != nil {
		return x.SummaryNotifications
	}
	return nil
}

func (x *UpdateBoardRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type isUpdateBoardRequest_Kind interface {
	isUpdateBoardRequest_Kind()
}

type UpdateBoardRequest_List struct {
	List *ListBoard `protobuf:"bytes,4,opt,name=list,proto3,oneof"`
}

func (*UpdateBoardRequest_List) isUpdateBoardRequest_Kind() {}

// UpdateBoardResponse is the response message sent for UpdateBoard RPCs
type UpdateBoardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Board         *Board                 `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBoardResponse) Reset() {
	*x = UpdateBoardResponse{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoardResponse) ProtoMessage() {}

func (x *UpdateBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoardResponse.ProtoReflect.Descriptor instead.
func (*UpdateBoardResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBoardResponse) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

// DeleteBoard is the request message for DeleteBoard RPCs
type DeleteBoardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the the ID of the board to delete.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBoardRequest) Reset() {
	*x = DeleteBoardRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBoardRequest) ProtoMessage() {}

func (x *DeleteBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBoardRequest.ProtoReflect.Descriptor instead.
func (*DeleteBoardRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteBoardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListBoardsRequests is the request message for ListBoards RPCs
type ListBoardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBoardsRequest) Reset() {
	*x = ListBoardsRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBoardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBoardsRequest) ProtoMessage() {}

func (x *ListBoardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBoardsRequest.ProtoReflect.Descriptor instead.
func (*ListBoardsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{15}
}

// ListBoardsResponse is the respones message for ListBoards RPCs
type ListBoardsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Boards holds a list of all boards.
	Boards        []*Board `protobuf:"bytes,1,rep,name=boards,proto3" json:"boards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBoardsResponse) Reset() {
	*x = ListBoardsResponse{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBoardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBoardsResponse) ProtoMessage() {}

func (x *ListBoardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBoardsResponse.ProtoReflect.Descriptor instead.
func (*ListBoardsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{16}
}

func (x *ListBoardsResponse) GetBoards() []*Board {
	if x != nil {
		return x.Boards
	}
	return nil
}

// GetBoardRequest is the request message for GetBoard RPCs
type GetBoardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the id of the board to retrieve.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBoardRequest) Reset() {
	*x = GetBoardRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardRequest) ProtoMessage() {}

func (x *GetBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardRequest.ProtoReflect.Descriptor instead.
func (*GetBoardRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{17}
}

func (x *GetBoardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetBoardResponse is the response message for GetBoard RPCs
type GetBoardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Board is the returned board.
	Board         *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBoardResponse) Reset() {
	*x = GetBoardResponse{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardResponse) ProtoMessage() {}

func (x *GetBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardResponse.ProtoReflect.Descriptor instead.
func (*GetBoardResponse) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{18}
}

func (x *GetBoardResponse) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

// AddTaskStatusRequest is the request message for the AddTaskStatus RPC.
type AddTaskStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId holds the ID of the board that should be modified.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Status holds the new status value that should be allowed for
	// use in the specified board.
	// If the TaskStatus.status field already exists this operation
	// performs a replaceement.
	Status        *TaskStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskStatusRequest) Reset() {
	*x = AddTaskStatusRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskStatusRequest) ProtoMessage() {}

func (x *AddTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*AddTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{19}
}

func (x *AddTaskStatusRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *AddTaskStatusRequest) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// DeleteTaskStatusRequest is the request message for the DeleteTaskStatus RPC.
type DeleteTaskStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId holds the ID of the board that should be modified.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Status is the status value for the TaskStatus that should
	// be removed
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskStatusRequest) Reset() {
	*x = DeleteTaskStatusRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskStatusRequest) ProtoMessage() {}

func (x *DeleteTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTaskStatusRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *DeleteTaskStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// AddTaskTagRequest is the request message for the AddTaskTag RPC.
type AddTaskTagRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId holds the ID of the board that should be modified.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Tag holds the new task tag that should be added to the board.
	// If the value of TaskTag.tag exists this operation performs
	// a replacement.
	Tag           *TaskTag `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTaskTagRequest) Reset() {
	*x = AddTaskTagRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTaskTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskTagRequest) ProtoMessage() {}

func (x *AddTaskTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskTagRequest.ProtoReflect.Descriptor instead.
func (*AddTaskTagRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{21}
}

func (x *AddTaskTagRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *AddTaskTagRequest) GetTag() *TaskTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

// DeleteTaskTagRequest is the request message for the DeleteTaskTag RPC.
type DeleteTaskTagRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BoardId holds the ID of the board that should be modified.
	BoardId string `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// Tag is the value of the TaskTag.tag that should be removed from
	// the board.
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskTagRequest) Reset() {
	*x = DeleteTaskTagRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskTagRequest) ProtoMessage() {}

func (x *DeleteTaskTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskTagRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTaskTagRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *DeleteTaskTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type AddViewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoardId       string                 `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	View          *View                  `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddViewRequest) Reset() {
	*x = AddViewRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddViewRequest) ProtoMessage() {}

func (x *AddViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddViewRequest.ProtoReflect.Descriptor instead.
func (*AddViewRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{23}
}

func (x *AddViewRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *AddViewRequest) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

type DeleteViewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoardId       string                 `protobuf:"bytes,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	ViewName      string                 `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteViewRequest) Reset() {
	*x = DeleteViewRequest{}
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewRequest) ProtoMessage() {}

func (x *DeleteViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_tasks_v1_boards_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewRequest.ProtoReflect.Descriptor instead.
func (*DeleteViewRequest) Descriptor() ([]byte, []int) {
	return file_tkd_tasks_v1_boards_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteViewRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *DeleteViewRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

var File_tkd_tasks_v1_boards_proto protoreflect.FileDescriptor

const file_tkd_tasks_v1_boards_proto_rawDesc = "" +
	"\n" +
	"\x19tkd/tasks/v1/boards.proto\x12\ftkd.tasks.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1bbuf/validate/validate.proto\x1a\x1etkd/common/v1/descriptor.proto\x1a\x1btkd/common/v1/daytime.proto\x1a\x1etkd/common/v1/pagination.proto\"\v\n" +
	"\tListBoard\"\x91\x01\n" +
	"\x0fBoardPermission\x12\x1f\n" +
	"\vallow_roles\x18\x01 \x03(\tR\n" +
	"allowRoles\x12\x1f\n" +
	"\vallow_users\x18\x02 \x03(\tR\n" +
	"allowUsers\x12\x1d\n" +
	"\n" +
	"deny_roles\x18\x03 \x03(\tR\tdenyRoles\x12\x1d\n" +
	"\n" +
	"deny_users\x18\x04 \x03(\tR\tdenyUsers\"e\n" +
	"\n" +
	"TaskStatus\x12\x1f\n" +
	"\x06status\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06status\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x14\n" +
	"\x05color\x18\x03 \x01(\tR\x05color\"\x7f\n" +
	"\fTaskPriority\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\x12 \n" +
	"\vdescritpion\x18\x02 \x01(\tR\vdescritpion\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\x05R\bpriority\x12\x14\n" +
	"\x05color\x18\x04 \x01(\tR\x05color\"\\\n" +
	"\aTaskTag\x12\x19\n" +
	"\x03tag\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x03tag\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x14\n" +
	"\x05color\x18\x03 \x01(\tR\x05color\"\x9a\x01\n" +
	"\fSubscription\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12M\n" +
	"\x12notification_types\x18\x02 \x03(\x0e2\x1e.tkd.tasks.v1.NotificationTypeR\x11notificationTypes\x12\"\n" +
	"\funsubscribed\x18\x03 \x01(\bR\funsubscribed\"\xda\x01\n" +
	"\x04View\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\x12\x16\n" +
	"\x06filter\x18\x02 \x01(\tR\x06filter\x12'\n" +
	"\x04sort\x18\x03 \x01(\v2\x13.tkd.common.v1.SortR\x04sort\x12$\n" +
	"\x0egroup_by_field\x18\x04 \x01(\tR\fgroupByField\x12N\n" +
	"\x14group_sort_direction\x18\x05 \x01(\x0e2\x1c.tkd.common.v1.SortDirectionR\x12groupSortDirection\"\xdc\x01\n" +
	"\x13SummaryNotification\x12,\n" +
	"\x12recipient_user_ids\x18\x01 \x03(\tR\x10recipientUserIds\x12,\n" +
	"\x12recipient_role_ids\x18\x02 \x03(\tR\x10recipientRoleIds\x12,\n" +
	"\rcron_schedule\x18\x03 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\fcronSchedule\x12\x16\n" +
	"\x06filter\x18\x04 \x01(\tR\x06filter\x12#\n" +
	"\rtemplate_name\x18\x05 \x01(\tR\ftemplateName\"\xf3\a\n" +
	"\x05Board\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x02id\x12*\n" +
	"\fdisplay_name\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12H\n" +
	"\x13allowed_task_status\x18\x05 \x03(\v2\x18.tkd.tasks.v1.TaskStatusR\x11allowedTaskStatus\x12A\n" +
	"\x11allowed_task_tags\x18\x06 \x03(\v2\x15.tkd.tasks.v1.TaskTagR\x0fallowedTaskTags\x12R\n" +
	"\x17allowed_task_priorities\x18\x12 \x03(\v2\x1a.tkd.tasks.v1.TaskPriorityR\x15allowedTaskPriorities\x12\x1b\n" +
	"\thelp_text\x18\a \x01(\tR\bhelpText\x12F\n" +
	"\x0fread_permission\x18\n" +
	" \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0ereadPermission\x12H\n" +
	"\x10write_permission\x18\v \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0fwritePermission\x12\x19\n" +
	"\bowner_id\x18\r \x01(\tR\aownerId\x12*\n" +
	"\x11eligible_role_ids\x18\x0e \x03(\tR\x0feligibleRoleIds\x12*\n" +
	"\x11eligible_user_ids\x18\x0f \x03(\tR\x0feligibleUserIds\x12L\n" +
	"\rsubscriptions\x18\x10 \x03(\v2&.tkd.tasks.v1.Board.SubscriptionsEntryR\rsubscriptions\x12%\n" +
	"\x0einitial_status\x18\x11 \x01(\tR\rinitialStatus\x12\x1f\n" +
	"\vdone_status\x18\x13 \x01(\tR\n" +
	"doneStatus\x12(\n" +
	"\x05views\x18\x14 \x03(\v2\x12.tkd.tasks.v1.ViewR\x05views\x12V\n" +
	"\x15summary_notifications\x18\x15 \x03(\v2!.tkd.tasks.v1.SummaryNotificationR\x14summaryNotifications\x1a\\\n" +
	"\x12SubscriptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.tkd.tasks.v1.SubscriptionR\x05value:\x028\x01J\x04\b\x04\x10\x05J\x04\b\f\x10\r\"\x9c\x01\n" +
	"\x19ManageSubscriptionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12 \n" +
	"\vunsubscribe\x18\x03 \x01(\bR\vunsubscribe\x124\n" +
	"\x05types\x18\x04 \x03(\x0e2\x1e.tkd.tasks.v1.NotificationTypeR\x05types\"\xcb\x06\n" +
	"\x12CreateBoardRequest\x12*\n" +
	"\fdisplay_name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\vdisplayName\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12-\n" +
	"\x04list\x18\x03 \x01(\v2\x17.tkd.tasks.v1.ListBoardH\x00R\x04list\x12H\n" +
	"\x13allowed_task_status\x18\x04 \x03(\v2\x18.tkd.tasks.v1.TaskStatusR\x11allowedTaskStatus\x12A\n" +
	"\x11allowed_task_tags\x18\x05 \x03(\v2\x15.tkd.tasks.v1.TaskTagR\x0fallowedTaskTags\x12R\n" +
	"\x17allowed_task_priorities\x18\x10 \x03(\v2\x1a.tkd.tasks.v1.TaskPriorityR\x15allowedTaskPriorities\x12\x1b\n" +
	"\thelp_text\x18\x06 \x01(\tR\bhelpText\x12F\n" +
	"\x0fread_permission\x18\n" +
	" \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0ereadPermission\x12H\n" +
	"\x10write_permission\x18\v \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0fwritePermission\x12*\n" +
	"\x11eligible_role_ids\x18\r \x03(\tR\x0feligibleRoleIds\x12*\n" +
	"\x11eligible_user_ids\x18\x0e \x03(\tR\x0feligibleUserIds\x12%\n" +
	"\x0einitial_status\x18\x0f \x01(\tR\rinitialStatus\x12\x1f\n" +
	"\vdone_status\x18\x11 \x01(\tR\n" +
	"doneStatus\x12(\n" +
	"\x05views\x18\x12 \x03(\v2\x12.tkd.tasks.v1.ViewR\x05views\x12V\n" +
	"\x15summary_notifications\x18\x13 \x03(\v2!.tkd.tasks.v1.SummaryNotificationR\x14summaryNotificationsB\x06\n" +
	"\x04kind\"@\n" +
	"\x13CreateBoardResponse\x12)\n" +
	"\x05board\x18\x01 \x01(\v2\x13.tkd.tasks.v1.BoardR\x05board\"\xc7\a\n" +
	"\x12UpdateBoardRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12-\n" +
	"\x04list\x18\x04 \x01(\v2\x17.tkd.tasks.v1.ListBoardH\x00R\x04list\x12H\n" +
	"\x13allowed_task_status\x18\x05 \x03(\v2\x18.tkd.tasks.v1.TaskStatusR\x11allowedTaskStatus\x12A\n" +
	"\x11allowed_task_tags\x18\x06 \x03(\v2\x15.tkd.tasks.v1.TaskTagR\x0fallowedTaskTags\x12R\n" +
	"\x17allowed_task_priorities\x18\x0f \x03(\v2\x1a.tkd.tasks.v1.TaskPriorityR\x15allowedTaskPriorities\x12\x1b\n" +
	"\thelp_text\x18\a \x01(\tR\bhelpText\x12\x19\n" +
	"\bowner_id\x18\b \x01(\tR\aownerId\x12%\n" +
	"\x0einitial_status\x18\t \x01(\tR\rinitialStatus\x12\x1f\n" +
	"\vdone_status\x18\x10 \x01(\tR\n" +
	"doneStatus\x12F\n" +
	"\x0fread_permission\x18\n" +
	" \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0ereadPermission\x12H\n" +
	"\x10write_permission\x18\v \x01(\v2\x1d.tkd.tasks.v1.BoardPermissionR\x0fwritePermission\x12*\n" +
	"\x11eligible_role_ids\x18\r \x03(\tR\x0feligibleRoleIds\x12*\n" +
	"\x11eligible_user_ids\x18\x0e \x03(\tR\x0feligibleUserIds\x12(\n" +
	"\x05views\x18\x11 \x03(\v2\x12.tkd.tasks.v1.ViewR\x05views\x12V\n" +
	"\x15summary_notifications\x18\x12 \x03(\v2!.tkd.tasks.v1.SummaryNotificationR\x14summaryNotifications\x12D\n" +
	"\vupdate_mask\x18c \x01(\v2\x1a.google.protobuf.FieldMaskB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"updateMaskB\x06\n" +
	"\x04kind\"@\n" +
	"\x13UpdateBoardResponse\x12)\n" +
	"\x05board\x18\x01 \x01(\v2\x13.tkd.tasks.v1.BoardR\x05board\"-\n" +
	"\x12DeleteBoardRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x02id\"\x13\n" +
	"\x11ListBoardsRequest\"A\n" +
	"\x12ListBoardsResponse\x12+\n" +
	"\x06boards\x18\x01 \x03(\v2\x13.tkd.tasks.v1.BoardR\x06boards\"*\n" +
	"\x0fGetBoardRequest\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x02id\"=\n" +
	"\x10GetBoardResponse\x12)\n" +
	"\x05board\x18\x01 \x01(\v2\x13.tkd.tasks.v1.BoardR\x05board\"u\n" +
	"\x14AddTaskStatusRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x129\n" +
	"\x06status\x18\x02 \x01(\v2\x18.tkd.tasks.v1.TaskStatusB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06status\"^\n" +
	"\x17DeleteTaskStatusRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x12\x1f\n" +
	"\x06status\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x06status\"i\n" +
	"\x11AddTaskTagRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x120\n" +
	"\x03tag\x18\x02 \x01(\v2\x15.tkd.tasks.v1.TaskTagB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x03tag\"U\n" +
	"\x14DeleteTaskTagRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x12\x19\n" +
	"\x03tag\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x03tag\"e\n" +
	"\x0eAddViewRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x12/\n" +
	"\x04view\x18\x02 \x01(\v2\x12.tkd.tasks.v1.ViewB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04view\"]\n" +
	"\x11DeleteViewRequest\x12\"\n" +
	"\bboard_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aboardId\x12$\n" +
	"\tview_name\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\bviewName*\x8b\x01\n" +
	"\x10NotificationType\x12!\n" +
	"\x1dNOTIFICATION_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15NOTIFICATION_TYPE_SMS\x10\x01\x12\x1a\n" +
	"\x16NOTIFICATION_TYPE_MAIL\x10\x02\x12\x1d\n" +
	"\x19NOTIFICATION_TYPE_WEBPUSH\x10\x03*o\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12EVENT_TYPE_CREATED\x10\x01\x12\x16\n" +
	"\x12EVENT_TYPE_UPDATED\x10\x02\x12\x16\n" +
	"\x12EVENT_TYPE_DELETED\x10\x032\xf0\a\n" +
	"\fBoardService\x12Y\n" +
	"\vCreateBoard\x12 .tkd.tasks.v1.CreateBoardRequest\x1a!.tkd.tasks.v1.CreateBoardResponse\"\x05\xb2~\x02\b\x01\x12Y\n" +
	"\vUpdateBoard\x12 .tkd.tasks.v1.UpdateBoardRequest\x1a!.tkd.tasks.v1.UpdateBoardResponse\"\x05\xb2~\x02\b\x01\x12V\n" +
	"\n" +
	"ListBoards\x12\x1f.tkd.tasks.v1.ListBoardsRequest\x1a .tkd.tasks.v1.ListBoardsResponse\"\x05\xb2~\x02\b\x01\x12N\n" +
	"\vDeleteBoard\x12 .tkd.tasks.v1.DeleteBoardRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12P\n" +
	"\bGetBoard\x12\x1d.tkd.tasks.v1.GetBoardRequest\x1a\x1e.tkd.tasks.v1.GetBoardResponse\"\x05\xb2~\x02\b\x01\x12C\n" +
	"\aAddView\x12\x1c.tkd.tasks.v1.AddViewRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12I\n" +
	"\n" +
	"DeleteView\x12\x1f.tkd.tasks.v1.DeleteViewRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12O\n" +
	"\rAddTaskStatus\x12\".tkd.tasks.v1.AddTaskStatusRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12U\n" +
	"\x10DeleteTaskStatus\x12%.tkd.tasks.v1.DeleteTaskStatusRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12I\n" +
	"\n" +
	"AddTaskTag\x12\x1f.tkd.tasks.v1.AddTaskTagRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12O\n" +
	"\rDeleteTaskTag\x12\".tkd.tasks.v1.DeleteTaskTagRequest\x1a\x13.tkd.tasks.v1.Board\"\x05\xb2~\x02\b\x01\x12\\\n" +
	"\x12ManageSubscription\x12'.tkd.tasks.v1.ManageSubscriptionRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01B\xb4\x01\n" +
	"\x10com.tkd.tasks.v1B\vBoardsProtoP\x01ZAgithub.com/tierklinik-dobersberg/apis/gen/go/tkd/tasks/v1;tasksv1\xa2\x02\x03TTX\xaa\x02\fTkd.Tasks.V1\xca\x02\fTkd\\Tasks\\V1\xe2\x02\x18Tkd\\Tasks\\V1\\GPBMetadata\xea\x02\x0eTkd::Tasks::V1b\x06proto3"

var (
	file_tkd_tasks_v1_boards_proto_rawDescOnce sync.Once
	file_tkd_tasks_v1_boards_proto_rawDescData []byte
)

func file_tkd_tasks_v1_boards_proto_rawDescGZIP() []byte {
	file_tkd_tasks_v1_boards_proto_rawDescOnce.Do(func() {
		file_tkd_tasks_v1_boards_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_tasks_v1_boards_proto_rawDesc), len(file_tkd_tasks_v1_boards_proto_rawDesc)))
	})
	return file_tkd_tasks_v1_boards_proto_rawDescData
}

var file_tkd_tasks_v1_boards_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tkd_tasks_v1_boards_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_tkd_tasks_v1_boards_proto_goTypes = []any{
	(NotificationType)(0),             // 0: tkd.tasks.v1.NotificationType
	(EventType)(0),                    // 1: tkd.tasks.v1.EventType
	(*ListBoard)(nil),                 // 2: tkd.tasks.v1.ListBoard
	(*BoardPermission)(nil),           // 3: tkd.tasks.v1.BoardPermission
	(*TaskStatus)(nil),                // 4: tkd.tasks.v1.TaskStatus
	(*TaskPriority)(nil),              // 5: tkd.tasks.v1.TaskPriority
	(*TaskTag)(nil),                   // 6: tkd.tasks.v1.TaskTag
	(*Subscription)(nil),              // 7: tkd.tasks.v1.Subscription
	(*View)(nil),                      // 8: tkd.tasks.v1.View
	(*SummaryNotification)(nil),       // 9: tkd.tasks.v1.SummaryNotification
	(*Board)(nil),                     // 10: tkd.tasks.v1.Board
	(*ManageSubscriptionRequest)(nil), // 11: tkd.tasks.v1.ManageSubscriptionRequest
	(*CreateBoardRequest)(nil),        // 12: tkd.tasks.v1.CreateBoardRequest
	(*CreateBoardResponse)(nil),       // 13: tkd.tasks.v1.CreateBoardResponse
	(*UpdateBoardRequest)(nil),        // 14: tkd.tasks.v1.UpdateBoardRequest
	(*UpdateBoardResponse)(nil),       // 15: tkd.tasks.v1.UpdateBoardResponse
	(*DeleteBoardRequest)(nil),        // 16: tkd.tasks.v1.DeleteBoardRequest
	(*ListBoardsRequest)(nil),         // 17: tkd.tasks.v1.ListBoardsRequest
	(*ListBoardsResponse)(nil),        // 18: tkd.tasks.v1.ListBoardsResponse
	(*GetBoardRequest)(nil),           // 19: tkd.tasks.v1.GetBoardRequest
	(*GetBoardResponse)(nil),          // 20: tkd.tasks.v1.GetBoardResponse
	(*AddTaskStatusRequest)(nil),      // 21: tkd.tasks.v1.AddTaskStatusRequest
	(*DeleteTaskStatusRequest)(nil),   // 22: tkd.tasks.v1.DeleteTaskStatusRequest
	(*AddTaskTagRequest)(nil),         // 23: tkd.tasks.v1.AddTaskTagRequest
	(*DeleteTaskTagRequest)(nil),      // 24: tkd.tasks.v1.DeleteTaskTagRequest
	(*AddViewRequest)(nil),            // 25: tkd.tasks.v1.AddViewRequest
	(*DeleteViewRequest)(nil),         // 26: tkd.tasks.v1.DeleteViewRequest
	nil,                               // 27: tkd.tasks.v1.Board.SubscriptionsEntry
	(*v1.Sort)(nil),                   // 28: tkd.common.v1.Sort
	(v1.SortDirection)(0),             // 29: tkd.common.v1.SortDirection
	(*fieldmaskpb.FieldMask)(nil),     // 30: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),             // 31: google.protobuf.Empty
}
var file_tkd_tasks_v1_boards_proto_depIdxs = []int32{
	0,  // 0: tkd.tasks.v1.Subscription.notification_types:type_name -> tkd.tasks.v1.NotificationType
	28, // 1: tkd.tasks.v1.View.sort:type_name -> tkd.common.v1.Sort
	29, // 2: tkd.tasks.v1.View.group_sort_direction:type_name -> tkd.common.v1.SortDirection
	4,  // 3: tkd.tasks.v1.Board.allowed_task_status:type_name -> tkd.tasks.v1.TaskStatus
	6,  // 4: tkd.tasks.v1.Board.allowed_task_tags:type_name -> tkd.tasks.v1.TaskTag
	5,  // 5: tkd.tasks.v1.Board.allowed_task_priorities:type_name -> tkd.tasks.v1.TaskPriority
	3,  // 6: tkd.tasks.v1.Board.read_permission:type_name -> tkd.tasks.v1.BoardPermission
	3,  // 7: tkd.tasks.v1.Board.write_permission:type_name -> tkd.tasks.v1.BoardPermission
	27, // 8: tkd.tasks.v1.Board.subscriptions:type_name -> tkd.tasks.v1.Board.SubscriptionsEntry
	8,  // 9: tkd.tasks.v1.Board.views:type_name -> tkd.tasks.v1.View
	9,  // 10: tkd.tasks.v1.Board.summary_notifications:type_name -> tkd.tasks.v1.SummaryNotification
	0,  // 11: tkd.tasks.v1.ManageSubscriptionRequest.types:type_name -> tkd.tasks.v1.NotificationType
	2,  // 12: tkd.tasks.v1.CreateBoardRequest.list:type_name -> tkd.tasks.v1.ListBoard
	4,  // 13: tkd.tasks.v1.CreateBoardRequest.allowed_task_status:type_name -> tkd.tasks.v1.TaskStatus
	6,  // 14: tkd.tasks.v1.CreateBoardRequest.allowed_task_tags:type_name -> tkd.tasks.v1.TaskTag
	5,  // 15: tkd.tasks.v1.CreateBoardRequest.allowed_task_priorities:type_name -> tkd.tasks.v1.TaskPriority
	3,  // 16: tkd.tasks.v1.CreateBoardRequest.read_permission:type_name -> tkd.tasks.v1.BoardPermission
	3,  // 17: tkd.tasks.v1.CreateBoardRequest.write_permission:type_name -> tkd.tasks.v1.BoardPermission
	8,  // 18: tkd.tasks.v1.CreateBoardRequest.views:type_name -> tkd.tasks.v1.View
	9,  // 19: tkd.tasks.v1.CreateBoardRequest.summary_notifications:type_name -> tkd.tasks.v1.SummaryNotification
	10, // 20: tkd.tasks.v1.CreateBoardResponse.board:type_name -> tkd.tasks.v1.Board
	2,  // 21: tkd.tasks.v1.UpdateBoardRequest.list:type_name -> tkd.tasks.v1.ListBoard
	4,  // 22: tkd.tasks.v1.UpdateBoardRequest.allowed_task_status:type_name -> tkd.tasks.v1.TaskStatus
	6,  // 23: tkd.tasks.v1.UpdateBoardRequest.allowed_task_tags:type_name -> tkd.tasks.v1.TaskTag
	5,  // 24: tkd.tasks.v1.UpdateBoardRequest.allowed_task_priorities:type_name -> tkd.tasks.v1.TaskPriority
	3,  // 25: tkd.tasks.v1.UpdateBoardRequest.read_permission:type_name -> tkd.tasks.v1.BoardPermission
	3,  // 26: tkd.tasks.v1.UpdateBoardRequest.write_permission:type_name -> tkd.tasks.v1.BoardPermission
	8,  // 27: tkd.tasks.v1.UpdateBoardRequest.views:type_name -> tkd.tasks.v1.View
	9,  // 28: tkd.tasks.v1.UpdateBoardRequest.summary_notifications:type_name -> tkd.tasks.v1.SummaryNotification
	30, // 29: tkd.tasks.v1.UpdateBoardRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 30: tkd.tasks.v1.UpdateBoardResponse.board:type_name -> tkd.tasks.v1.Board
	10, // 31: tkd.tasks.v1.ListBoardsResponse.boards:type_name -> tkd.tasks.v1.Board
	10, // 32: tkd.tasks.v1.GetBoardResponse.board:type_name -> tkd.tasks.v1.Board
	4,  // 33: tkd.tasks.v1.AddTaskStatusRequest.status:type_name -> tkd.tasks.v1.TaskStatus
	6,  // 34: tkd.tasks.v1.AddTaskTagRequest.tag:type_name -> tkd.tasks.v1.TaskTag
	8,  // 35: tkd.tasks.v1.AddViewRequest.view:type_name -> tkd.tasks.v1.View
	7,  // 36: tkd.tasks.v1.Board.SubscriptionsEntry.value:type_name -> tkd.tasks.v1.Subscription
	12, // 37: tkd.tasks.v1.BoardService.CreateBoard:input_type -> tkd.tasks.v1.CreateBoardRequest
	14, // 38: tkd.tasks.v1.BoardService.UpdateBoard:input_type -> tkd.tasks.v1.UpdateBoardRequest
	17, // 39: tkd.tasks.v1.BoardService.ListBoards:input_type -> tkd.tasks.v1.ListBoardsRequest
	16, // 40: tkd.tasks.v1.BoardService.DeleteBoard:input_type -> tkd.tasks.v1.DeleteBoardRequest
	19, // 41: tkd.tasks.v1.BoardService.GetBoard:input_type -> tkd.tasks.v1.GetBoardRequest
	25, // 42: tkd.tasks.v1.BoardService.AddView:input_type -> tkd.tasks.v1.AddViewRequest
	26, // 43: tkd.tasks.v1.BoardService.DeleteView:input_type -> tkd.tasks.v1.DeleteViewRequest
	21, // 44: tkd.tasks.v1.BoardService.AddTaskStatus:input_type -> tkd.tasks.v1.AddTaskStatusRequest
	22, // 45: tkd.tasks.v1.BoardService.DeleteTaskStatus:input_type -> tkd.tasks.v1.DeleteTaskStatusRequest
	23, // 46: tkd.tasks.v1.BoardService.AddTaskTag:input_type -> tkd.tasks.v1.AddTaskTagRequest
	24, // 47: tkd.tasks.v1.BoardService.DeleteTaskTag:input_type -> tkd.tasks.v1.DeleteTaskTagRequest
	11, // 48: tkd.tasks.v1.BoardService.ManageSubscription:input_type -> tkd.tasks.v1.ManageSubscriptionRequest
	13, // 49: tkd.tasks.v1.BoardService.CreateBoard:output_type -> tkd.tasks.v1.CreateBoardResponse
	15, // 50: tkd.tasks.v1.BoardService.UpdateBoard:output_type -> tkd.tasks.v1.UpdateBoardResponse
	18, // 51: tkd.tasks.v1.BoardService.ListBoards:output_type -> tkd.tasks.v1.ListBoardsResponse
	31, // 52: tkd.tasks.v1.BoardService.DeleteBoard:output_type -> google.protobuf.Empty
	20, // 53: tkd.tasks.v1.BoardService.GetBoard:output_type -> tkd.tasks.v1.GetBoardResponse
	10, // 54: tkd.tasks.v1.BoardService.AddView:output_type -> tkd.tasks.v1.Board
	10, // 55: tkd.tasks.v1.BoardService.DeleteView:output_type -> tkd.tasks.v1.Board
	10, // 56: tkd.tasks.v1.BoardService.AddTaskStatus:output_type -> tkd.tasks.v1.Board
	10, // 57: tkd.tasks.v1.BoardService.DeleteTaskStatus:output_type -> tkd.tasks.v1.Board
	10, // 58: tkd.tasks.v1.BoardService.AddTaskTag:output_type -> tkd.tasks.v1.Board
	10, // 59: tkd.tasks.v1.BoardService.DeleteTaskTag:output_type -> tkd.tasks.v1.Board
	31, // 60: tkd.tasks.v1.BoardService.ManageSubscription:output_type -> google.protobuf.Empty
	49, // [49:61] is the sub-list for method output_type
	37, // [37:49] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_tkd_tasks_v1_boards_proto_init() }
func file_tkd_tasks_v1_boards_proto_init() {
	if File_tkd_tasks_v1_boards_proto != nil {
		return
	}
	file_tkd_tasks_v1_boards_proto_msgTypes[10].OneofWrappers = []any{
		(*CreateBoardRequest_List)(nil),
	}
	file_tkd_tasks_v1_boards_proto_msgTypes[12].OneofWrappers = []any{
		(*UpdateBoardRequest_List)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_tasks_v1_boards_proto_rawDesc), len(file_tkd_tasks_v1_boards_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_tasks_v1_boards_proto_goTypes,
		DependencyIndexes: file_tkd_tasks_v1_boards_proto_depIdxs,
		EnumInfos:         file_tkd_tasks_v1_boards_proto_enumTypes,
		MessageInfos:      file_tkd_tasks_v1_boards_proto_msgTypes,
	}.Build()
	File_tkd_tasks_v1_boards_proto = out.File
	file_tkd_tasks_v1_boards_proto_goTypes = nil
	file_tkd_tasks_v1_boards_proto_depIdxs = nil
}
