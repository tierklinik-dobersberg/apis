// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/tasks/v1/boards.proto

package tasksv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/tasks/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BoardServiceName is the fully-qualified name of the BoardService service.
	BoardServiceName = "tkd.tasks.v1.BoardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BoardServiceCreateBoardProcedure is the fully-qualified name of the BoardService's CreateBoard
	// RPC.
	BoardServiceCreateBoardProcedure = "/tkd.tasks.v1.BoardService/CreateBoard"
	// BoardServiceUpdateBoardProcedure is the fully-qualified name of the BoardService's UpdateBoard
	// RPC.
	BoardServiceUpdateBoardProcedure = "/tkd.tasks.v1.BoardService/UpdateBoard"
	// BoardServiceListBoardsProcedure is the fully-qualified name of the BoardService's ListBoards RPC.
	BoardServiceListBoardsProcedure = "/tkd.tasks.v1.BoardService/ListBoards"
	// BoardServiceDeleteBoardProcedure is the fully-qualified name of the BoardService's DeleteBoard
	// RPC.
	BoardServiceDeleteBoardProcedure = "/tkd.tasks.v1.BoardService/DeleteBoard"
	// BoardServiceGetBoardProcedure is the fully-qualified name of the BoardService's GetBoard RPC.
	BoardServiceGetBoardProcedure = "/tkd.tasks.v1.BoardService/GetBoard"
	// BoardServiceAddViewProcedure is the fully-qualified name of the BoardService's AddView RPC.
	BoardServiceAddViewProcedure = "/tkd.tasks.v1.BoardService/AddView"
	// BoardServiceDeleteViewProcedure is the fully-qualified name of the BoardService's DeleteView RPC.
	BoardServiceDeleteViewProcedure = "/tkd.tasks.v1.BoardService/DeleteView"
	// BoardServiceAddTaskStatusProcedure is the fully-qualified name of the BoardService's
	// AddTaskStatus RPC.
	BoardServiceAddTaskStatusProcedure = "/tkd.tasks.v1.BoardService/AddTaskStatus"
	// BoardServiceDeleteTaskStatusProcedure is the fully-qualified name of the BoardService's
	// DeleteTaskStatus RPC.
	BoardServiceDeleteTaskStatusProcedure = "/tkd.tasks.v1.BoardService/DeleteTaskStatus"
	// BoardServiceAddTaskTagProcedure is the fully-qualified name of the BoardService's AddTaskTag RPC.
	BoardServiceAddTaskTagProcedure = "/tkd.tasks.v1.BoardService/AddTaskTag"
	// BoardServiceDeleteTaskTagProcedure is the fully-qualified name of the BoardService's
	// DeleteTaskTag RPC.
	BoardServiceDeleteTaskTagProcedure = "/tkd.tasks.v1.BoardService/DeleteTaskTag"
	// BoardServiceManageSubscriptionProcedure is the fully-qualified name of the BoardService's
	// ManageSubscription RPC.
	BoardServiceManageSubscriptionProcedure = "/tkd.tasks.v1.BoardService/ManageSubscription"
)

// BoardServiceClient is a client for the tkd.tasks.v1.BoardService service.
type BoardServiceClient interface {
	// CreateBoard creates a new task board.
	// The authenticated user perfoming this RPC is set as the
	// board owner and the only one that is allowed to manage board
	// settings.
	// A board subscription for all task updates is automatically created
	// for the board owner.
	CreateBoard(context.Context, *connect_go.Request[v1.CreateBoardRequest]) (*connect_go.Response[v1.CreateBoardResponse], error)
	// UpdateBoard allowed to update various board settings.
	// Only the board owner is allowed to perform board updates.
	// Note that if the board owner is changed, a subscription for the
	// board owner will be created but any existing subscriptions of the
	// old board owner will NOT BE REMOVED!
	UpdateBoard(context.Context, *connect_go.Request[v1.UpdateBoardRequest]) (*connect_go.Response[v1.UpdateBoardResponse], error)
	// ListBoards returns a list of boards the authenticated user has read or write
	// permisssions for.
	ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error)
	// DeleteBoard deletes as task board and all associated task resources.
	// This can only be executed by the board owner.
	// Attention: this operation cannot be undone!
	DeleteBoard(context.Context, *connect_go.Request[v1.DeleteBoardRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBoard loads a specific task-board identified by it's unique ID.
	GetBoard(context.Context, *connect_go.Request[v1.GetBoardRequest]) (*connect_go.Response[v1.GetBoardResponse], error)
	// AddView configures a new view for a task board.
	AddView(context.Context, *connect_go.Request[v1.AddViewRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteView deletes a view from a task board.
	DeleteView(context.Context, *connect_go.Request[v1.DeleteViewRequest]) (*connect_go.Response[v1.Board], error)
	// AddTaskStatus adds a new task status value for a board.
	AddTaskStatus(context.Context, *connect_go.Request[v1.AddTaskStatusRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteTaskStatus deletes a task status value from a board.
	// Tasks that still have the deleted status value set will be updated to use
	// the board's initial_status - which may also be empty.
	DeleteTaskStatus(context.Context, *connect_go.Request[v1.DeleteTaskStatusRequest]) (*connect_go.Response[v1.Board], error)
	// AddTaskTag configures a new task tag to be available for all tasks
	// within the specified board.
	AddTaskTag(context.Context, *connect_go.Request[v1.AddTaskTagRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteTaskTag deletes a task tag from the board. The tag will be remove dautomatically
	// from all tasks.
	DeleteTaskTag(context.Context, *connect_go.Request[v1.DeleteTaskTagRequest]) (*connect_go.Response[v1.Board], error)
	// ManageSubscription allows users to manage their notification subscription
	// for a whole board.
	ManageSubscription(context.Context, *connect_go.Request[v1.ManageSubscriptionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBoardServiceClient constructs a client for the tkd.tasks.v1.BoardService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBoardServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BoardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &boardServiceClient{
		createBoard: connect_go.NewClient[v1.CreateBoardRequest, v1.CreateBoardResponse](
			httpClient,
			baseURL+BoardServiceCreateBoardProcedure,
			opts...,
		),
		updateBoard: connect_go.NewClient[v1.UpdateBoardRequest, v1.UpdateBoardResponse](
			httpClient,
			baseURL+BoardServiceUpdateBoardProcedure,
			opts...,
		),
		listBoards: connect_go.NewClient[v1.ListBoardsRequest, v1.ListBoardsResponse](
			httpClient,
			baseURL+BoardServiceListBoardsProcedure,
			opts...,
		),
		deleteBoard: connect_go.NewClient[v1.DeleteBoardRequest, emptypb.Empty](
			httpClient,
			baseURL+BoardServiceDeleteBoardProcedure,
			opts...,
		),
		getBoard: connect_go.NewClient[v1.GetBoardRequest, v1.GetBoardResponse](
			httpClient,
			baseURL+BoardServiceGetBoardProcedure,
			opts...,
		),
		addView: connect_go.NewClient[v1.AddViewRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceAddViewProcedure,
			opts...,
		),
		deleteView: connect_go.NewClient[v1.DeleteViewRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceDeleteViewProcedure,
			opts...,
		),
		addTaskStatus: connect_go.NewClient[v1.AddTaskStatusRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceAddTaskStatusProcedure,
			opts...,
		),
		deleteTaskStatus: connect_go.NewClient[v1.DeleteTaskStatusRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceDeleteTaskStatusProcedure,
			opts...,
		),
		addTaskTag: connect_go.NewClient[v1.AddTaskTagRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceAddTaskTagProcedure,
			opts...,
		),
		deleteTaskTag: connect_go.NewClient[v1.DeleteTaskTagRequest, v1.Board](
			httpClient,
			baseURL+BoardServiceDeleteTaskTagProcedure,
			opts...,
		),
		manageSubscription: connect_go.NewClient[v1.ManageSubscriptionRequest, emptypb.Empty](
			httpClient,
			baseURL+BoardServiceManageSubscriptionProcedure,
			opts...,
		),
	}
}

// boardServiceClient implements BoardServiceClient.
type boardServiceClient struct {
	createBoard        *connect_go.Client[v1.CreateBoardRequest, v1.CreateBoardResponse]
	updateBoard        *connect_go.Client[v1.UpdateBoardRequest, v1.UpdateBoardResponse]
	listBoards         *connect_go.Client[v1.ListBoardsRequest, v1.ListBoardsResponse]
	deleteBoard        *connect_go.Client[v1.DeleteBoardRequest, emptypb.Empty]
	getBoard           *connect_go.Client[v1.GetBoardRequest, v1.GetBoardResponse]
	addView            *connect_go.Client[v1.AddViewRequest, v1.Board]
	deleteView         *connect_go.Client[v1.DeleteViewRequest, v1.Board]
	addTaskStatus      *connect_go.Client[v1.AddTaskStatusRequest, v1.Board]
	deleteTaskStatus   *connect_go.Client[v1.DeleteTaskStatusRequest, v1.Board]
	addTaskTag         *connect_go.Client[v1.AddTaskTagRequest, v1.Board]
	deleteTaskTag      *connect_go.Client[v1.DeleteTaskTagRequest, v1.Board]
	manageSubscription *connect_go.Client[v1.ManageSubscriptionRequest, emptypb.Empty]
}

// CreateBoard calls tkd.tasks.v1.BoardService.CreateBoard.
func (c *boardServiceClient) CreateBoard(ctx context.Context, req *connect_go.Request[v1.CreateBoardRequest]) (*connect_go.Response[v1.CreateBoardResponse], error) {
	return c.createBoard.CallUnary(ctx, req)
}

// UpdateBoard calls tkd.tasks.v1.BoardService.UpdateBoard.
func (c *boardServiceClient) UpdateBoard(ctx context.Context, req *connect_go.Request[v1.UpdateBoardRequest]) (*connect_go.Response[v1.UpdateBoardResponse], error) {
	return c.updateBoard.CallUnary(ctx, req)
}

// ListBoards calls tkd.tasks.v1.BoardService.ListBoards.
func (c *boardServiceClient) ListBoards(ctx context.Context, req *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error) {
	return c.listBoards.CallUnary(ctx, req)
}

// DeleteBoard calls tkd.tasks.v1.BoardService.DeleteBoard.
func (c *boardServiceClient) DeleteBoard(ctx context.Context, req *connect_go.Request[v1.DeleteBoardRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteBoard.CallUnary(ctx, req)
}

// GetBoard calls tkd.tasks.v1.BoardService.GetBoard.
func (c *boardServiceClient) GetBoard(ctx context.Context, req *connect_go.Request[v1.GetBoardRequest]) (*connect_go.Response[v1.GetBoardResponse], error) {
	return c.getBoard.CallUnary(ctx, req)
}

// AddView calls tkd.tasks.v1.BoardService.AddView.
func (c *boardServiceClient) AddView(ctx context.Context, req *connect_go.Request[v1.AddViewRequest]) (*connect_go.Response[v1.Board], error) {
	return c.addView.CallUnary(ctx, req)
}

// DeleteView calls tkd.tasks.v1.BoardService.DeleteView.
func (c *boardServiceClient) DeleteView(ctx context.Context, req *connect_go.Request[v1.DeleteViewRequest]) (*connect_go.Response[v1.Board], error) {
	return c.deleteView.CallUnary(ctx, req)
}

// AddTaskStatus calls tkd.tasks.v1.BoardService.AddTaskStatus.
func (c *boardServiceClient) AddTaskStatus(ctx context.Context, req *connect_go.Request[v1.AddTaskStatusRequest]) (*connect_go.Response[v1.Board], error) {
	return c.addTaskStatus.CallUnary(ctx, req)
}

// DeleteTaskStatus calls tkd.tasks.v1.BoardService.DeleteTaskStatus.
func (c *boardServiceClient) DeleteTaskStatus(ctx context.Context, req *connect_go.Request[v1.DeleteTaskStatusRequest]) (*connect_go.Response[v1.Board], error) {
	return c.deleteTaskStatus.CallUnary(ctx, req)
}

// AddTaskTag calls tkd.tasks.v1.BoardService.AddTaskTag.
func (c *boardServiceClient) AddTaskTag(ctx context.Context, req *connect_go.Request[v1.AddTaskTagRequest]) (*connect_go.Response[v1.Board], error) {
	return c.addTaskTag.CallUnary(ctx, req)
}

// DeleteTaskTag calls tkd.tasks.v1.BoardService.DeleteTaskTag.
func (c *boardServiceClient) DeleteTaskTag(ctx context.Context, req *connect_go.Request[v1.DeleteTaskTagRequest]) (*connect_go.Response[v1.Board], error) {
	return c.deleteTaskTag.CallUnary(ctx, req)
}

// ManageSubscription calls tkd.tasks.v1.BoardService.ManageSubscription.
func (c *boardServiceClient) ManageSubscription(ctx context.Context, req *connect_go.Request[v1.ManageSubscriptionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.manageSubscription.CallUnary(ctx, req)
}

// BoardServiceHandler is an implementation of the tkd.tasks.v1.BoardService service.
type BoardServiceHandler interface {
	// CreateBoard creates a new task board.
	// The authenticated user perfoming this RPC is set as the
	// board owner and the only one that is allowed to manage board
	// settings.
	// A board subscription for all task updates is automatically created
	// for the board owner.
	CreateBoard(context.Context, *connect_go.Request[v1.CreateBoardRequest]) (*connect_go.Response[v1.CreateBoardResponse], error)
	// UpdateBoard allowed to update various board settings.
	// Only the board owner is allowed to perform board updates.
	// Note that if the board owner is changed, a subscription for the
	// board owner will be created but any existing subscriptions of the
	// old board owner will NOT BE REMOVED!
	UpdateBoard(context.Context, *connect_go.Request[v1.UpdateBoardRequest]) (*connect_go.Response[v1.UpdateBoardResponse], error)
	// ListBoards returns a list of boards the authenticated user has read or write
	// permisssions for.
	ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error)
	// DeleteBoard deletes as task board and all associated task resources.
	// This can only be executed by the board owner.
	// Attention: this operation cannot be undone!
	DeleteBoard(context.Context, *connect_go.Request[v1.DeleteBoardRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBoard loads a specific task-board identified by it's unique ID.
	GetBoard(context.Context, *connect_go.Request[v1.GetBoardRequest]) (*connect_go.Response[v1.GetBoardResponse], error)
	// AddView configures a new view for a task board.
	AddView(context.Context, *connect_go.Request[v1.AddViewRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteView deletes a view from a task board.
	DeleteView(context.Context, *connect_go.Request[v1.DeleteViewRequest]) (*connect_go.Response[v1.Board], error)
	// AddTaskStatus adds a new task status value for a board.
	AddTaskStatus(context.Context, *connect_go.Request[v1.AddTaskStatusRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteTaskStatus deletes a task status value from a board.
	// Tasks that still have the deleted status value set will be updated to use
	// the board's initial_status - which may also be empty.
	DeleteTaskStatus(context.Context, *connect_go.Request[v1.DeleteTaskStatusRequest]) (*connect_go.Response[v1.Board], error)
	// AddTaskTag configures a new task tag to be available for all tasks
	// within the specified board.
	AddTaskTag(context.Context, *connect_go.Request[v1.AddTaskTagRequest]) (*connect_go.Response[v1.Board], error)
	// DeleteTaskTag deletes a task tag from the board. The tag will be remove dautomatically
	// from all tasks.
	DeleteTaskTag(context.Context, *connect_go.Request[v1.DeleteTaskTagRequest]) (*connect_go.Response[v1.Board], error)
	// ManageSubscription allows users to manage their notification subscription
	// for a whole board.
	ManageSubscription(context.Context, *connect_go.Request[v1.ManageSubscriptionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBoardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBoardServiceHandler(svc BoardServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	boardServiceCreateBoardHandler := connect_go.NewUnaryHandler(
		BoardServiceCreateBoardProcedure,
		svc.CreateBoard,
		opts...,
	)
	boardServiceUpdateBoardHandler := connect_go.NewUnaryHandler(
		BoardServiceUpdateBoardProcedure,
		svc.UpdateBoard,
		opts...,
	)
	boardServiceListBoardsHandler := connect_go.NewUnaryHandler(
		BoardServiceListBoardsProcedure,
		svc.ListBoards,
		opts...,
	)
	boardServiceDeleteBoardHandler := connect_go.NewUnaryHandler(
		BoardServiceDeleteBoardProcedure,
		svc.DeleteBoard,
		opts...,
	)
	boardServiceGetBoardHandler := connect_go.NewUnaryHandler(
		BoardServiceGetBoardProcedure,
		svc.GetBoard,
		opts...,
	)
	boardServiceAddViewHandler := connect_go.NewUnaryHandler(
		BoardServiceAddViewProcedure,
		svc.AddView,
		opts...,
	)
	boardServiceDeleteViewHandler := connect_go.NewUnaryHandler(
		BoardServiceDeleteViewProcedure,
		svc.DeleteView,
		opts...,
	)
	boardServiceAddTaskStatusHandler := connect_go.NewUnaryHandler(
		BoardServiceAddTaskStatusProcedure,
		svc.AddTaskStatus,
		opts...,
	)
	boardServiceDeleteTaskStatusHandler := connect_go.NewUnaryHandler(
		BoardServiceDeleteTaskStatusProcedure,
		svc.DeleteTaskStatus,
		opts...,
	)
	boardServiceAddTaskTagHandler := connect_go.NewUnaryHandler(
		BoardServiceAddTaskTagProcedure,
		svc.AddTaskTag,
		opts...,
	)
	boardServiceDeleteTaskTagHandler := connect_go.NewUnaryHandler(
		BoardServiceDeleteTaskTagProcedure,
		svc.DeleteTaskTag,
		opts...,
	)
	boardServiceManageSubscriptionHandler := connect_go.NewUnaryHandler(
		BoardServiceManageSubscriptionProcedure,
		svc.ManageSubscription,
		opts...,
	)
	return "/tkd.tasks.v1.BoardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BoardServiceCreateBoardProcedure:
			boardServiceCreateBoardHandler.ServeHTTP(w, r)
		case BoardServiceUpdateBoardProcedure:
			boardServiceUpdateBoardHandler.ServeHTTP(w, r)
		case BoardServiceListBoardsProcedure:
			boardServiceListBoardsHandler.ServeHTTP(w, r)
		case BoardServiceDeleteBoardProcedure:
			boardServiceDeleteBoardHandler.ServeHTTP(w, r)
		case BoardServiceGetBoardProcedure:
			boardServiceGetBoardHandler.ServeHTTP(w, r)
		case BoardServiceAddViewProcedure:
			boardServiceAddViewHandler.ServeHTTP(w, r)
		case BoardServiceDeleteViewProcedure:
			boardServiceDeleteViewHandler.ServeHTTP(w, r)
		case BoardServiceAddTaskStatusProcedure:
			boardServiceAddTaskStatusHandler.ServeHTTP(w, r)
		case BoardServiceDeleteTaskStatusProcedure:
			boardServiceDeleteTaskStatusHandler.ServeHTTP(w, r)
		case BoardServiceAddTaskTagProcedure:
			boardServiceAddTaskTagHandler.ServeHTTP(w, r)
		case BoardServiceDeleteTaskTagProcedure:
			boardServiceDeleteTaskTagHandler.ServeHTTP(w, r)
		case BoardServiceManageSubscriptionProcedure:
			boardServiceManageSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBoardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBoardServiceHandler struct{}

func (UnimplementedBoardServiceHandler) CreateBoard(context.Context, *connect_go.Request[v1.CreateBoardRequest]) (*connect_go.Response[v1.CreateBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.CreateBoard is not implemented"))
}

func (UnimplementedBoardServiceHandler) UpdateBoard(context.Context, *connect_go.Request[v1.UpdateBoardRequest]) (*connect_go.Response[v1.UpdateBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.UpdateBoard is not implemented"))
}

func (UnimplementedBoardServiceHandler) ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.ListBoards is not implemented"))
}

func (UnimplementedBoardServiceHandler) DeleteBoard(context.Context, *connect_go.Request[v1.DeleteBoardRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.DeleteBoard is not implemented"))
}

func (UnimplementedBoardServiceHandler) GetBoard(context.Context, *connect_go.Request[v1.GetBoardRequest]) (*connect_go.Response[v1.GetBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.GetBoard is not implemented"))
}

func (UnimplementedBoardServiceHandler) AddView(context.Context, *connect_go.Request[v1.AddViewRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.AddView is not implemented"))
}

func (UnimplementedBoardServiceHandler) DeleteView(context.Context, *connect_go.Request[v1.DeleteViewRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.DeleteView is not implemented"))
}

func (UnimplementedBoardServiceHandler) AddTaskStatus(context.Context, *connect_go.Request[v1.AddTaskStatusRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.AddTaskStatus is not implemented"))
}

func (UnimplementedBoardServiceHandler) DeleteTaskStatus(context.Context, *connect_go.Request[v1.DeleteTaskStatusRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.DeleteTaskStatus is not implemented"))
}

func (UnimplementedBoardServiceHandler) AddTaskTag(context.Context, *connect_go.Request[v1.AddTaskTagRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.AddTaskTag is not implemented"))
}

func (UnimplementedBoardServiceHandler) DeleteTaskTag(context.Context, *connect_go.Request[v1.DeleteTaskTagRequest]) (*connect_go.Response[v1.Board], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.DeleteTaskTag is not implemented"))
}

func (UnimplementedBoardServiceHandler) ManageSubscription(context.Context, *connect_go.Request[v1.ManageSubscriptionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.tasks.v1.BoardService.ManageSubscription is not implemented"))
}
