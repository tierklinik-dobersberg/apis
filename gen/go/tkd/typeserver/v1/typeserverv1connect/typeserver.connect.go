// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/typeserver/v1/typeserver.proto

package typeserverv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/typeserver/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TypeResolverServiceName is the fully-qualified name of the TypeResolverService service.
	TypeResolverServiceName = "tkd.typeserver.v1.TypeResolverService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TypeResolverServiceResolveTypeProcedure is the fully-qualified name of the TypeResolverService's
	// ResolveType RPC.
	TypeResolverServiceResolveTypeProcedure = "/tkd.typeserver.v1.TypeResolverService/ResolveType"
)

// TypeResolverServiceClient is a client for the tkd.typeserver.v1.TypeResolverService service.
type TypeResolverServiceClient interface {
	ResolveType(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error)
}

// NewTypeResolverServiceClient constructs a client for the tkd.typeserver.v1.TypeResolverService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTypeResolverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TypeResolverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &typeResolverServiceClient{
		resolveType: connect_go.NewClient[v1.ResolveRequest, v1.ResolveResponse](
			httpClient,
			baseURL+TypeResolverServiceResolveTypeProcedure,
			opts...,
		),
	}
}

// typeResolverServiceClient implements TypeResolverServiceClient.
type typeResolverServiceClient struct {
	resolveType *connect_go.Client[v1.ResolveRequest, v1.ResolveResponse]
}

// ResolveType calls tkd.typeserver.v1.TypeResolverService.ResolveType.
func (c *typeResolverServiceClient) ResolveType(ctx context.Context, req *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error) {
	return c.resolveType.CallUnary(ctx, req)
}

// TypeResolverServiceHandler is an implementation of the tkd.typeserver.v1.TypeResolverService
// service.
type TypeResolverServiceHandler interface {
	ResolveType(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error)
}

// NewTypeResolverServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTypeResolverServiceHandler(svc TypeResolverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	typeResolverServiceResolveTypeHandler := connect_go.NewUnaryHandler(
		TypeResolverServiceResolveTypeProcedure,
		svc.ResolveType,
		opts...,
	)
	return "/tkd.typeserver.v1.TypeResolverService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TypeResolverServiceResolveTypeProcedure:
			typeResolverServiceResolveTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTypeResolverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTypeResolverServiceHandler struct{}

func (UnimplementedTypeResolverServiceHandler) ResolveType(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.typeserver.v1.TypeResolverService.ResolveType is not implemented"))
}
