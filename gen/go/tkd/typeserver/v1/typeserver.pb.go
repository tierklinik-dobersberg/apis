// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: tkd/typeserver/v1/typeserver.proto

package typeserverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolveRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*ResolveRequest_FileByFilename
	//	*ResolveRequest_FileContainingSymbol
	//	*ResolveRequest_FileContainingUrl
	Kind          isResolveRequest_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_tkd_typeserver_v1_typeserver_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveRequest) GetKind() isResolveRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *ResolveRequest) GetFileByFilename() string {
	if x != nil {
		if x, ok := x.Kind.(*ResolveRequest_FileByFilename); ok {
			return x.FileByFilename
		}
	}
	return ""
}

func (x *ResolveRequest) GetFileContainingSymbol() string {
	if x != nil {
		if x, ok := x.Kind.(*ResolveRequest_FileContainingSymbol); ok {
			return x.FileContainingSymbol
		}
	}
	return ""
}

func (x *ResolveRequest) GetFileContainingUrl() string {
	if x != nil {
		if x, ok := x.Kind.(*ResolveRequest_FileContainingUrl); ok {
			return x.FileContainingUrl
		}
	}
	return ""
}

type isResolveRequest_Kind interface {
	isResolveRequest_Kind()
}

type ResolveRequest_FileByFilename struct {
	// Searches for the file descriptor proto by file name.
	// For example:
	//   - tkd/typeserver/v1/typeserver.proto
	//   - buf/validate/validate.proto
	FileByFilename string `protobuf:"bytes,1,opt,name=file_by_filename,json=fileByFilename,proto3,oneof"`
}

type ResolveRequest_FileContainingSymbol struct {
	// Searches for the file descriptor that contains the specified
	// symbol.
	// This field should be a fully-qualified symbol name
	// (e.g. <package>.<service>[.<method>] or <package>.<type>).
	//
	// For example:
	//   - tkd.typeserver.v1.TypeResolverService
	//   - tkd.idm.v1.Profile
	FileContainingSymbol string `protobuf:"bytes,2,opt,name=file_containing_symbol,json=fileContainingSymbol,proto3,oneof"`
}

type ResolveRequest_FileContainingUrl struct {
	// Similar file_containing_symbol but searches the type_url for a message.
	// See documentation for google.protobuf.Any for more information.
	FileContainingUrl string `protobuf:"bytes,3,opt,name=file_containing_url,json=fileContainingUrl,proto3,oneof"`
}

func (*ResolveRequest_FileByFilename) isResolveRequest_Kind() {}

func (*ResolveRequest_FileContainingSymbol) isResolveRequest_Kind() {}

func (*ResolveRequest_FileContainingUrl) isResolveRequest_Kind() {}

type ResolveResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OriginalRequest *ResolveRequest        `protobuf:"bytes,1,opt,name=original_request,json=originalRequest,proto3" json:"original_request,omitempty"`
	// Types that are valid to be assigned to MessageResponse:
	//
	//	*ResolveResponse_FileDescriptor
	MessageResponse isResolveResponse_MessageResponse `protobuf_oneof:"message_response"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResolveResponse) Reset() {
	*x = ResolveResponse{}
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveResponse) ProtoMessage() {}

func (x *ResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveResponse.ProtoReflect.Descriptor instead.
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return file_tkd_typeserver_v1_typeserver_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveResponse) GetOriginalRequest() *ResolveRequest {
	if x != nil {
		return x.OriginalRequest
	}
	return nil
}

func (x *ResolveResponse) GetMessageResponse() isResolveResponse_MessageResponse {
	if x != nil {
		return x.MessageResponse
	}
	return nil
}

func (x *ResolveResponse) GetFileDescriptor() *FileDescriptorResponse {
	if x != nil {
		if x, ok := x.MessageResponse.(*ResolveResponse_FileDescriptor); ok {
			return x.FileDescriptor
		}
	}
	return nil
}

type isResolveResponse_MessageResponse interface {
	isResolveResponse_MessageResponse()
}

type ResolveResponse_FileDescriptor struct {
	FileDescriptor *FileDescriptorResponse `protobuf:"bytes,2,opt,name=file_descriptor,json=fileDescriptor,proto3,oneof"`
}

func (*ResolveResponse_FileDescriptor) isResolveResponse_MessageResponse() {}

type FileDescriptorResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FileDescriptorProto []byte                 `protobuf:"bytes,3,opt,name=file_descriptor_proto,json=fileDescriptorProto,proto3" json:"file_descriptor_proto,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FileDescriptorResponse) Reset() {
	*x = FileDescriptorResponse{}
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptorResponse) ProtoMessage() {}

func (x *FileDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_typeserver_v1_typeserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptorResponse.ProtoReflect.Descriptor instead.
func (*FileDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_tkd_typeserver_v1_typeserver_proto_rawDescGZIP(), []int{2}
}

func (x *FileDescriptorResponse) GetFileDescriptorProto() []byte {
	if x != nil {
		return x.FileDescriptorProto
	}
	return nil
}

var File_tkd_typeserver_v1_typeserver_proto protoreflect.FileDescriptor

const file_tkd_typeserver_v1_typeserver_proto_rawDesc = "" +
	"\n" +
	"\"tkd/typeserver/v1/typeserver.proto\x12\x11tkd.typeserver.v1\"\xae\x01\n" +
	"\x0eResolveRequest\x12*\n" +
	"\x10file_by_filename\x18\x01 \x01(\tH\x00R\x0efileByFilename\x126\n" +
	"\x16file_containing_symbol\x18\x02 \x01(\tH\x00R\x14fileContainingSymbol\x120\n" +
	"\x13file_containing_url\x18\x03 \x01(\tH\x00R\x11fileContainingUrlB\x06\n" +
	"\x04kind\"\xc9\x01\n" +
	"\x0fResolveResponse\x12L\n" +
	"\x10original_request\x18\x01 \x01(\v2!.tkd.typeserver.v1.ResolveRequestR\x0foriginalRequest\x12T\n" +
	"\x0ffile_descriptor\x18\x02 \x01(\v2).tkd.typeserver.v1.FileDescriptorResponseH\x00R\x0efileDescriptorB\x12\n" +
	"\x10message_response\"L\n" +
	"\x16FileDescriptorResponse\x122\n" +
	"\x15file_descriptor_proto\x18\x03 \x01(\fR\x13fileDescriptorProto2k\n" +
	"\x13TypeResolverService\x12T\n" +
	"\vResolveType\x12!.tkd.typeserver.v1.ResolveRequest\x1a\".tkd.typeserver.v1.ResolveResponseB\xdb\x01\n" +
	"\x15com.tkd.typeserver.v1B\x0fTypeserverProtoP\x01ZKgithub.com/tierklinik-dobersberg/apis/gen/go/tkd/typeserver/v1;typeserverv1\xa2\x02\x03TTX\xaa\x02\x11Tkd.Typeserver.V1\xca\x02\x11Tkd\\Typeserver\\V1\xe2\x02\x1dTkd\\Typeserver\\V1\\GPBMetadata\xea\x02\x13Tkd::Typeserver::V1b\x06proto3"

var (
	file_tkd_typeserver_v1_typeserver_proto_rawDescOnce sync.Once
	file_tkd_typeserver_v1_typeserver_proto_rawDescData []byte
)

func file_tkd_typeserver_v1_typeserver_proto_rawDescGZIP() []byte {
	file_tkd_typeserver_v1_typeserver_proto_rawDescOnce.Do(func() {
		file_tkd_typeserver_v1_typeserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_typeserver_v1_typeserver_proto_rawDesc), len(file_tkd_typeserver_v1_typeserver_proto_rawDesc)))
	})
	return file_tkd_typeserver_v1_typeserver_proto_rawDescData
}

var file_tkd_typeserver_v1_typeserver_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tkd_typeserver_v1_typeserver_proto_goTypes = []any{
	(*ResolveRequest)(nil),         // 0: tkd.typeserver.v1.ResolveRequest
	(*ResolveResponse)(nil),        // 1: tkd.typeserver.v1.ResolveResponse
	(*FileDescriptorResponse)(nil), // 2: tkd.typeserver.v1.FileDescriptorResponse
}
var file_tkd_typeserver_v1_typeserver_proto_depIdxs = []int32{
	0, // 0: tkd.typeserver.v1.ResolveResponse.original_request:type_name -> tkd.typeserver.v1.ResolveRequest
	2, // 1: tkd.typeserver.v1.ResolveResponse.file_descriptor:type_name -> tkd.typeserver.v1.FileDescriptorResponse
	0, // 2: tkd.typeserver.v1.TypeResolverService.ResolveType:input_type -> tkd.typeserver.v1.ResolveRequest
	1, // 3: tkd.typeserver.v1.TypeResolverService.ResolveType:output_type -> tkd.typeserver.v1.ResolveResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tkd_typeserver_v1_typeserver_proto_init() }
func file_tkd_typeserver_v1_typeserver_proto_init() {
	if File_tkd_typeserver_v1_typeserver_proto != nil {
		return
	}
	file_tkd_typeserver_v1_typeserver_proto_msgTypes[0].OneofWrappers = []any{
		(*ResolveRequest_FileByFilename)(nil),
		(*ResolveRequest_FileContainingSymbol)(nil),
		(*ResolveRequest_FileContainingUrl)(nil),
	}
	file_tkd_typeserver_v1_typeserver_proto_msgTypes[1].OneofWrappers = []any{
		(*ResolveResponse_FileDescriptor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_typeserver_v1_typeserver_proto_rawDesc), len(file_tkd_typeserver_v1_typeserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_typeserver_v1_typeserver_proto_goTypes,
		DependencyIndexes: file_tkd_typeserver_v1_typeserver_proto_depIdxs,
		MessageInfos:      file_tkd_typeserver_v1_typeserver_proto_msgTypes,
	}.Build()
	File_tkd_typeserver_v1_typeserver_proto = out.File
	file_tkd_typeserver_v1_typeserver_proto_goTypes = nil
	file_tkd_typeserver_v1_typeserver_proto_depIdxs = nil
}
