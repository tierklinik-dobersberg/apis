// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tkd/printing/v1/printing.proto

package printingv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/longrunning/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrinterState int32

const (
	PrinterState_PRINTERSTATE_UNSPECIFIED PrinterState = 0
	PrinterState_PRINTERSTATE_IDLE        PrinterState = 1
	PrinterState_PRINTERSTATE_PRINTING    PrinterState = 2
	PrinterState_PRINTERSTATE_ERROR       PrinterState = 3
)

// Enum value maps for PrinterState.
var (
	PrinterState_name = map[int32]string{
		0: "PRINTERSTATE_UNSPECIFIED",
		1: "PRINTERSTATE_IDLE",
		2: "PRINTERSTATE_PRINTING",
		3: "PRINTERSTATE_ERROR",
	}
	PrinterState_value = map[string]int32{
		"PRINTERSTATE_UNSPECIFIED": 0,
		"PRINTERSTATE_IDLE":        1,
		"PRINTERSTATE_PRINTING":    2,
		"PRINTERSTATE_ERROR":       3,
	}
)

func (x PrinterState) Enum() *PrinterState {
	p := new(PrinterState)
	*p = x
	return p
}

func (x PrinterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrinterState) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_printing_v1_printing_proto_enumTypes[0].Descriptor()
}

func (PrinterState) Type() protoreflect.EnumType {
	return &file_tkd_printing_v1_printing_proto_enumTypes[0]
}

func (x PrinterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrinterState.Descriptor instead.
func (PrinterState) EnumDescriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{0}
}

type Orientation int32

const (
	Orientation_ORIENTATION_PORTRAIT  Orientation = 0
	Orientation_ORIENTATION_LANDSCAPE Orientation = 1
)

// Enum value maps for Orientation.
var (
	Orientation_name = map[int32]string{
		0: "ORIENTATION_PORTRAIT",
		1: "ORIENTATION_LANDSCAPE",
	}
	Orientation_value = map[string]int32{
		"ORIENTATION_PORTRAIT":  0,
		"ORIENTATION_LANDSCAPE": 1,
	}
)

func (x Orientation) Enum() *Orientation {
	p := new(Orientation)
	*p = x
	return p
}

func (x Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_printing_v1_printing_proto_enumTypes[1].Descriptor()
}

func (Orientation) Type() protoreflect.EnumType {
	return &file_tkd_printing_v1_printing_proto_enumTypes[1]
}

func (x Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Orientation.Descriptor instead.
func (Orientation) EnumDescriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{1}
}

type ColorMode int32

const (
	ColorMode_COLORMODE_COLOR     ColorMode = 0
	ColorMode_COLORMODE_GRAYSCALE ColorMode = 1
)

// Enum value maps for ColorMode.
var (
	ColorMode_name = map[int32]string{
		0: "COLORMODE_COLOR",
		1: "COLORMODE_GRAYSCALE",
	}
	ColorMode_value = map[string]int32{
		"COLORMODE_COLOR":     0,
		"COLORMODE_GRAYSCALE": 1,
	}
)

func (x ColorMode) Enum() *ColorMode {
	p := new(ColorMode)
	*p = x
	return p
}

func (x ColorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_printing_v1_printing_proto_enumTypes[2].Descriptor()
}

func (ColorMode) Type() protoreflect.EnumType {
	return &file_tkd_printing_v1_printing_proto_enumTypes[2]
}

func (x ColorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorMode.Descriptor instead.
func (ColorMode) EnumDescriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{2}
}

type PrintState int32

const (
	PrintState_PRINTSTATE_UNSPECIFIED PrintState = 0
	PrintState_PRINTSTATE_PENDING     PrintState = 1
	PrintState_PRINTSTATE_PRINTING    PrintState = 2
	PrintState_PRINTSTATE_COMPLETED   PrintState = 3
	PrintState_PRINTSTATE_CANCELLED   PrintState = 4
)

// Enum value maps for PrintState.
var (
	PrintState_name = map[int32]string{
		0: "PRINTSTATE_UNSPECIFIED",
		1: "PRINTSTATE_PENDING",
		2: "PRINTSTATE_PRINTING",
		3: "PRINTSTATE_COMPLETED",
		4: "PRINTSTATE_CANCELLED",
	}
	PrintState_value = map[string]int32{
		"PRINTSTATE_UNSPECIFIED": 0,
		"PRINTSTATE_PENDING":     1,
		"PRINTSTATE_PRINTING":    2,
		"PRINTSTATE_COMPLETED":   3,
		"PRINTSTATE_CANCELLED":   4,
	}
)

func (x PrintState) Enum() *PrintState {
	p := new(PrintState)
	*p = x
	return p
}

func (x PrintState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrintState) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_printing_v1_printing_proto_enumTypes[3].Descriptor()
}

func (PrintState) Type() protoreflect.EnumType {
	return &file_tkd_printing_v1_printing_proto_enumTypes[3]
}

func (x PrintState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrintState.Descriptor instead.
func (PrintState) EnumDescriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{3}
}

type Printer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name holds the unique name of the printer.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Manufactorer holds the manufactorer of the printer.
	Manufactorer string `protobuf:"bytes,2,opt,name=manufactorer,proto3" json:"manufactorer,omitempty"`
	// Model holds the printer model.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Location holds an optional location for the printer.
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// Description might hold an optional description of the printer.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Parameters might hold printing parameters.
	Parameters    map[string]string `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Printer) Reset() {
	*x = Printer{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Printer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Printer) ProtoMessage() {}

func (x *Printer) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Printer.ProtoReflect.Descriptor instead.
func (*Printer) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{0}
}

func (x *Printer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Printer) GetManufactorer() string {
	if x != nil {
		return x.Manufactorer
	}
	return ""
}

func (x *Printer) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Printer) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Printer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Printer) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Document struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the document to print.
	// It's used to for the long-running operation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ContentType holds the MIME type of the document to be printed.
	// If set to * or */* the document's MIME type will be autodetected by
	// checking the first few bytes.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Source defines the source of the document content.
	//
	// Types that are valid to be assigned to Source:
	//
	//	*Document_Data
	//	*Document_Url
	//	*Document_FilePath
	Source      isDocument_Source `protobuf_oneof:"source"`
	Orientation Orientation       `protobuf:"varint,6,opt,name=Orientation,proto3,enum=tkd.printing.v1.Orientation" json:"Orientation,omitempty"`
	ColorMode   ColorMode         `protobuf:"varint,7,opt,name=color_mode,json=colorMode,proto3,enum=tkd.printing.v1.ColorMode" json:"color_mode,omitempty"`
	// Printer might be used to specify the printer where the document should be printed.
	// If empty, the services default printer will be used.
	Printer       string `protobuf:"bytes,10,opt,name=printer,proto3" json:"printer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{1}
}

func (x *Document) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Document) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Document) GetSource() isDocument_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Document) GetData() []byte {
	if x != nil {
		if x, ok := x.Source.(*Document_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *Document) GetUrl() string {
	if x != nil {
		if x, ok := x.Source.(*Document_Url); ok {
			return x.Url
		}
	}
	return ""
}

func (x *Document) GetFilePath() string {
	if x != nil {
		if x, ok := x.Source.(*Document_FilePath); ok {
			return x.FilePath
		}
	}
	return ""
}

func (x *Document) GetOrientation() Orientation {
	if x != nil {
		return x.Orientation
	}
	return Orientation_ORIENTATION_PORTRAIT
}

func (x *Document) GetColorMode() ColorMode {
	if x != nil {
		return x.ColorMode
	}
	return ColorMode_COLORMODE_COLOR
}

func (x *Document) GetPrinter() string {
	if x != nil {
		return x.Printer
	}
	return ""
}

type isDocument_Source interface {
	isDocument_Source()
}

type Document_Data struct {
	// Data includes the whole document data in this request.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type Document_Url struct {
	// URL holds a web URL where the document should be fetched.
	Url string `protobuf:"bytes,4,opt,name=url,proto3,oneof"`
}

type Document_FilePath struct {
	// FilePath holds the path to the document on the file-storage.
	// Not all service implementations will support this source type.
	FilePath string `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3,oneof"`
}

func (*Document_Data) isDocument_Source() {}

func (*Document_Url) isDocument_Source() {}

func (*Document_FilePath) isDocument_Source() {}

type PrintDocumentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*PrintDocumentRequest_Document
	//	*PrintDocumentRequest_Data
	Message       isPrintDocumentRequest_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrintDocumentRequest) Reset() {
	*x = PrintDocumentRequest{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintDocumentRequest) ProtoMessage() {}

func (x *PrintDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintDocumentRequest.ProtoReflect.Descriptor instead.
func (*PrintDocumentRequest) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{2}
}

func (x *PrintDocumentRequest) GetMessage() isPrintDocumentRequest_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PrintDocumentRequest) GetDocument() *Document {
	if x != nil {
		if x, ok := x.Message.(*PrintDocumentRequest_Document); ok {
			return x.Document
		}
	}
	return nil
}

func (x *PrintDocumentRequest) GetData() []byte {
	if x != nil {
		if x, ok := x.Message.(*PrintDocumentRequest_Data); ok {
			return x.Data
		}
	}
	return nil
}

type isPrintDocumentRequest_Message interface {
	isPrintDocumentRequest_Message()
}

type PrintDocumentRequest_Document struct {
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3,oneof"`
}

type PrintDocumentRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*PrintDocumentRequest_Document) isPrintDocumentRequest_Message() {}

func (*PrintDocumentRequest_Data) isPrintDocumentRequest_Message() {}

type ListPrintersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrinterState  PrinterState           `protobuf:"varint,1,opt,name=printer_state,json=printerState,proto3,enum=tkd.printing.v1.PrinterState" json:"printer_state,omitempty"`
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPrintersRequest) Reset() {
	*x = ListPrintersRequest{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPrintersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrintersRequest) ProtoMessage() {}

func (x *ListPrintersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrintersRequest.ProtoReflect.Descriptor instead.
func (*ListPrintersRequest) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{3}
}

func (x *ListPrintersRequest) GetPrinterState() PrinterState {
	if x != nil {
		return x.PrinterState
	}
	return PrinterState_PRINTERSTATE_UNSPECIFIED
}

func (x *ListPrintersRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ListPrintersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Printers      []*Printer             `protobuf:"bytes,1,rep,name=printers,proto3" json:"printers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPrintersResponse) Reset() {
	*x = ListPrintersResponse{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPrintersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrintersResponse) ProtoMessage() {}

func (x *ListPrintersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrintersResponse.ProtoReflect.Descriptor instead.
func (*ListPrintersResponse) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{4}
}

func (x *ListPrintersResponse) GetPrinters() []*Printer {
	if x != nil {
		return x.Printers
	}
	return nil
}

type PrintOperationState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	State PrintState             `protobuf:"varint,1,opt,name=state,proto3,enum=tkd.printing.v1.PrintState" json:"state,omitempty"`
	// Percent shows how far printing has been done.
	// It's value is between (inclusive) 0 and 100
	Percent int32 `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
	// Document holds the document that is being printed.
	// If the document content has been specified using the source.data field,
	// it is omitted to avoid large blobs of data.
	Document      *Document `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrintOperationState) Reset() {
	*x = PrintOperationState{}
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrintOperationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintOperationState) ProtoMessage() {}

func (x *PrintOperationState) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_printing_v1_printing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintOperationState.ProtoReflect.Descriptor instead.
func (*PrintOperationState) Descriptor() ([]byte, []int) {
	return file_tkd_printing_v1_printing_proto_rawDescGZIP(), []int{5}
}

func (x *PrintOperationState) GetState() PrintState {
	if x != nil {
		return x.State
	}
	return PrintState_PRINTSTATE_UNSPECIFIED
}

func (x *PrintOperationState) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *PrintOperationState) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

var File_tkd_printing_v1_printing_proto protoreflect.FileDescriptor

var file_tkd_printing_v1_printing_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x74, 0x6b, 0x64, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x78, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x06, 0xfa, 0xf7, 0x18, 0x02, 0x08, 0x01, 0x22, 0x75, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x76, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e,
	0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x01, 0x2a, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x53, 0x43, 0x41, 0x4c,
	0x45, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49,
	0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x32, 0x95, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x13,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x01, 0x42, 0xcb, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x42, 0x0d, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65,
	0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x3b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x54, 0x50, 0x58, 0xaa, 0x02, 0x0f, 0x54, 0x6b, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x54, 0x6b, 0x64, 0x5c, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x54, 0x6b, 0x64, 0x5c, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_tkd_printing_v1_printing_proto_rawDescOnce sync.Once
	file_tkd_printing_v1_printing_proto_rawDescData []byte
)

func file_tkd_printing_v1_printing_proto_rawDescGZIP() []byte {
	file_tkd_printing_v1_printing_proto_rawDescOnce.Do(func() {
		file_tkd_printing_v1_printing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_printing_v1_printing_proto_rawDesc), len(file_tkd_printing_v1_printing_proto_rawDesc)))
	})
	return file_tkd_printing_v1_printing_proto_rawDescData
}

var file_tkd_printing_v1_printing_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tkd_printing_v1_printing_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tkd_printing_v1_printing_proto_goTypes = []any{
	(PrinterState)(0),            // 0: tkd.printing.v1.PrinterState
	(Orientation)(0),             // 1: tkd.printing.v1.Orientation
	(ColorMode)(0),               // 2: tkd.printing.v1.ColorMode
	(PrintState)(0),              // 3: tkd.printing.v1.PrintState
	(*Printer)(nil),              // 4: tkd.printing.v1.Printer
	(*Document)(nil),             // 5: tkd.printing.v1.Document
	(*PrintDocumentRequest)(nil), // 6: tkd.printing.v1.PrintDocumentRequest
	(*ListPrintersRequest)(nil),  // 7: tkd.printing.v1.ListPrintersRequest
	(*ListPrintersResponse)(nil), // 8: tkd.printing.v1.ListPrintersResponse
	(*PrintOperationState)(nil),  // 9: tkd.printing.v1.PrintOperationState
	nil,                          // 10: tkd.printing.v1.Printer.ParametersEntry
	(*v1.Operation)(nil),         // 11: tkd.longrunning.v1.Operation
}
var file_tkd_printing_v1_printing_proto_depIdxs = []int32{
	10, // 0: tkd.printing.v1.Printer.parameters:type_name -> tkd.printing.v1.Printer.ParametersEntry
	1,  // 1: tkd.printing.v1.Document.Orientation:type_name -> tkd.printing.v1.Orientation
	2,  // 2: tkd.printing.v1.Document.color_mode:type_name -> tkd.printing.v1.ColorMode
	5,  // 3: tkd.printing.v1.PrintDocumentRequest.document:type_name -> tkd.printing.v1.Document
	0,  // 4: tkd.printing.v1.ListPrintersRequest.printer_state:type_name -> tkd.printing.v1.PrinterState
	4,  // 5: tkd.printing.v1.ListPrintersResponse.printers:type_name -> tkd.printing.v1.Printer
	3,  // 6: tkd.printing.v1.PrintOperationState.state:type_name -> tkd.printing.v1.PrintState
	5,  // 7: tkd.printing.v1.PrintOperationState.document:type_name -> tkd.printing.v1.Document
	7,  // 8: tkd.printing.v1.PrintService.ListPrinters:input_type -> tkd.printing.v1.ListPrintersRequest
	5,  // 9: tkd.printing.v1.PrintService.PrintDocument:input_type -> tkd.printing.v1.Document
	6,  // 10: tkd.printing.v1.PrintService.PrintDocumentStream:input_type -> tkd.printing.v1.PrintDocumentRequest
	8,  // 11: tkd.printing.v1.PrintService.ListPrinters:output_type -> tkd.printing.v1.ListPrintersResponse
	11, // 12: tkd.printing.v1.PrintService.PrintDocument:output_type -> tkd.longrunning.v1.Operation
	11, // 13: tkd.printing.v1.PrintService.PrintDocumentStream:output_type -> tkd.longrunning.v1.Operation
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_tkd_printing_v1_printing_proto_init() }
func file_tkd_printing_v1_printing_proto_init() {
	if File_tkd_printing_v1_printing_proto != nil {
		return
	}
	file_tkd_printing_v1_printing_proto_msgTypes[1].OneofWrappers = []any{
		(*Document_Data)(nil),
		(*Document_Url)(nil),
		(*Document_FilePath)(nil),
	}
	file_tkd_printing_v1_printing_proto_msgTypes[2].OneofWrappers = []any{
		(*PrintDocumentRequest_Document)(nil),
		(*PrintDocumentRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_printing_v1_printing_proto_rawDesc), len(file_tkd_printing_v1_printing_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_printing_v1_printing_proto_goTypes,
		DependencyIndexes: file_tkd_printing_v1_printing_proto_depIdxs,
		EnumInfos:         file_tkd_printing_v1_printing_proto_enumTypes,
		MessageInfos:      file_tkd_printing_v1_printing_proto_msgTypes,
	}.Build()
	File_tkd_printing_v1_printing_proto = out.File
	file_tkd_printing_v1_printing_proto_goTypes = nil
	file_tkd_printing_v1_printing_proto_depIdxs = nil
}
