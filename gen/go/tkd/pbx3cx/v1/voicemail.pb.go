// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tkd/pbx3cx/v1/voicemail.proto

package pbx3cxv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/customer/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_SMS         NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_MAIL        NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_WEBPUSH     NotificationType = 3
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_SMS",
		2: "NOTIFICATION_TYPE_MAIL",
		3: "NOTIFICATION_TYPE_WEBPUSH",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED": 0,
		"NOTIFICATION_TYPE_SMS":         1,
		"NOTIFICATION_TYPE_MAIL":        2,
		"NOTIFICATION_TYPE_WEBPUSH":     3,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_pbx3cx_v1_voicemail_proto_enumTypes[0].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_tkd_pbx3cx_v1_voicemail_proto_enumTypes[0]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{0}
}

type VoiceMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mailbox     string                 `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	ReceiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// Types that are assignable to Caller:
	//
	//	*VoiceMail_Number
	//	*VoiceMail_Customer
	Caller        isVoiceMail_Caller     `protobuf_oneof:"caller"`
	Subject       string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Message       string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	InboundNumber string                 `protobuf:"bytes,8,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
	FileName      string                 `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	SeenTime      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=seen_time,json=seenTime,proto3" json:"seen_time,omitempty"`
}

func (x *VoiceMail) Reset() {
	*x = VoiceMail{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMail) ProtoMessage() {}

func (x *VoiceMail) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMail.ProtoReflect.Descriptor instead.
func (*VoiceMail) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{0}
}

func (x *VoiceMail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceMail) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *VoiceMail) GetReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveTime
	}
	return nil
}

func (m *VoiceMail) GetCaller() isVoiceMail_Caller {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (x *VoiceMail) GetNumber() string {
	if x, ok := x.GetCaller().(*VoiceMail_Number); ok {
		return x.Number
	}
	return ""
}

func (x *VoiceMail) GetCustomer() *v1.Customer {
	if x, ok := x.GetCaller().(*VoiceMail_Customer); ok {
		return x.Customer
	}
	return nil
}

func (x *VoiceMail) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *VoiceMail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VoiceMail) GetInboundNumber() string {
	if x != nil {
		return x.InboundNumber
	}
	return ""
}

func (x *VoiceMail) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VoiceMail) GetSeenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SeenTime
	}
	return nil
}

type isVoiceMail_Caller interface {
	isVoiceMail_Caller()
}

type VoiceMail_Number struct {
	Number string `protobuf:"bytes,4,opt,name=number,proto3,oneof"`
}

type VoiceMail_Customer struct {
	Customer *v1.Customer `protobuf:"bytes,5,opt,name=customer,proto3,oneof"`
}

func (*VoiceMail_Number) isVoiceMail_Caller() {}

func (*VoiceMail_Customer) isVoiceMail_Caller() {}

type NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	SubjectTemplate string `protobuf:"bytes,1,opt,name=subject_template,json=subjectTemplate,proto3" json:"subject_template,omitempty"`
	MessageTemplate string `protobuf:"bytes,2,opt,name=message_template,json=messageTemplate,proto3" json:"message_template,omitempty"`
	// Types that are assignable to Recipients:
	//
	//	*NotificationSettings_RoleIds
	//	*NotificationSettings_UserIds
	Recipients isNotificationSettings_Recipients `protobuf_oneof:"recipients"`
	SendTimes  []*v11.DayTime                    `protobuf:"bytes,5,rep,name=send_times,json=sendTimes,proto3" json:"send_times,omitempty"`
	Types      []NotificationType                `protobuf:"varint,6,rep,packed,name=types,proto3,enum=tkd.pbx3cx.v1.NotificationType" json:"types,omitempty"`
}

func (x *NotificationSettings) Reset() {
	*x = NotificationSettings{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSettings) ProtoMessage() {}

func (x *NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSettings.ProtoReflect.Descriptor instead.
func (*NotificationSettings) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationSettings) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NotificationSettings) GetSubjectTemplate() string {
	if x != nil {
		return x.SubjectTemplate
	}
	return ""
}

func (x *NotificationSettings) GetMessageTemplate() string {
	if x != nil {
		return x.MessageTemplate
	}
	return ""
}

func (m *NotificationSettings) GetRecipients() isNotificationSettings_Recipients {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (x *NotificationSettings) GetRoleIds() *v11.StringList {
	if x, ok := x.GetRecipients().(*NotificationSettings_RoleIds); ok {
		return x.RoleIds
	}
	return nil
}

func (x *NotificationSettings) GetUserIds() *v11.StringList {
	if x, ok := x.GetRecipients().(*NotificationSettings_UserIds); ok {
		return x.UserIds
	}
	return nil
}

func (x *NotificationSettings) GetSendTimes() []*v11.DayTime {
	if x != nil {
		return x.SendTimes
	}
	return nil
}

func (x *NotificationSettings) GetTypes() []NotificationType {
	if x != nil {
		return x.Types
	}
	return nil
}

type isNotificationSettings_Recipients interface {
	isNotificationSettings_Recipients()
}

type NotificationSettings_RoleIds struct {
	RoleIds *v11.StringList `protobuf:"bytes,3,opt,name=role_ids,json=roleIds,proto3,oneof"`
}

type NotificationSettings_UserIds struct {
	UserIds *v11.StringList `protobuf:"bytes,4,opt,name=user_ids,json=userIds,proto3,oneof"`
}

func (*NotificationSettings_RoleIds) isNotificationSettings_Recipients() {}

func (*NotificationSettings_UserIds) isNotificationSettings_Recipients() {}

type Mailbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier of the mailbox.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// DisplayName is the display-name of the mailbox.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// PollInterval specifies the interval at which the mailbox
	// should be polled for updates.
	PollInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// Config holds the IMAP configuration for the mailbox.
	Config *v11.IMAPConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// NotificationSettings holds settings for notifications about new
	// voice-mails
	NotificationSettings []*NotificationSettings `protobuf:"bytes,5,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	ExtractCallerRegexp  string                  `protobuf:"bytes,6,opt,name=extract_caller_regexp,json=extractCallerRegexp,proto3" json:"extract_caller_regexp,omitempty"`
	ExtractTargetRegexp  string                  `protobuf:"bytes,7,opt,name=extract_target_regexp,json=extractTargetRegexp,proto3" json:"extract_target_regexp,omitempty"`
}

func (x *Mailbox) Reset() {
	*x = Mailbox{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mailbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mailbox) ProtoMessage() {}

func (x *Mailbox) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mailbox.ProtoReflect.Descriptor instead.
func (*Mailbox) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{2}
}

func (x *Mailbox) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Mailbox) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Mailbox) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

func (x *Mailbox) GetConfig() *v11.IMAPConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Mailbox) GetNotificationSettings() []*NotificationSettings {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *Mailbox) GetExtractCallerRegexp() string {
	if x != nil {
		return x.ExtractCallerRegexp
	}
	return ""
}

func (x *Mailbox) GetExtractTargetRegexp() string {
	if x != nil {
		return x.ExtractTargetRegexp
	}
	return ""
}

type CreateMailboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox *Mailbox `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *CreateMailboxRequest) Reset() {
	*x = CreateMailboxRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMailboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMailboxRequest) ProtoMessage() {}

func (x *CreateMailboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMailboxRequest.ProtoReflect.Descriptor instead.
func (*CreateMailboxRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMailboxRequest) GetMailbox() *Mailbox {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

type CreateMailboxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateMailboxResponse) Reset() {
	*x = CreateMailboxResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMailboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMailboxResponse) ProtoMessage() {}

func (x *CreateMailboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMailboxResponse.ProtoReflect.Descriptor instead.
func (*CreateMailboxResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{4}
}

type ListMailboxesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View *v11.View `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *ListMailboxesRequest) Reset() {
	*x = ListMailboxesRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMailboxesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMailboxesRequest) ProtoMessage() {}

func (x *ListMailboxesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMailboxesRequest.ProtoReflect.Descriptor instead.
func (*ListMailboxesRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{5}
}

func (x *ListMailboxesRequest) GetView() *v11.View {
	if x != nil {
		return x.View
	}
	return nil
}

type ListMailboxesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailboxes []*Mailbox `protobuf:"bytes,1,rep,name=mailboxes,proto3" json:"mailboxes,omitempty"`
}

func (x *ListMailboxesResponse) Reset() {
	*x = ListMailboxesResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMailboxesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMailboxesResponse) ProtoMessage() {}

func (x *ListMailboxesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMailboxesResponse.ProtoReflect.Descriptor instead.
func (*ListMailboxesResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{6}
}

func (x *ListMailboxesResponse) GetMailboxes() []*Mailbox {
	if x != nil {
		return x.Mailboxes
	}
	return nil
}

type DeleteMailboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMailboxRequest) Reset() {
	*x = DeleteMailboxRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMailboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMailboxRequest) ProtoMessage() {}

func (x *DeleteMailboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMailboxRequest.ProtoReflect.Descriptor instead.
func (*DeleteMailboxRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMailboxRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VoiceMailFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *v11.TimeRange        `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Unseen    *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=unseen,proto3" json:"unseen,omitempty"`
	// Types that are assignable to Caller:
	//
	//	*VoiceMailFilter_Number
	//	*VoiceMailFilter_CustomerId
	Caller isVoiceMailFilter_Caller `protobuf_oneof:"caller"`
}

func (x *VoiceMailFilter) Reset() {
	*x = VoiceMailFilter{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceMailFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMailFilter) ProtoMessage() {}

func (x *VoiceMailFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMailFilter.ProtoReflect.Descriptor instead.
func (*VoiceMailFilter) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{8}
}

func (x *VoiceMailFilter) GetTimeRange() *v11.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *VoiceMailFilter) GetUnseen() *wrapperspb.BoolValue {
	if x != nil {
		return x.Unseen
	}
	return nil
}

func (m *VoiceMailFilter) GetCaller() isVoiceMailFilter_Caller {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (x *VoiceMailFilter) GetNumber() string {
	if x, ok := x.GetCaller().(*VoiceMailFilter_Number); ok {
		return x.Number
	}
	return ""
}

func (x *VoiceMailFilter) GetCustomerId() string {
	if x, ok := x.GetCaller().(*VoiceMailFilter_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

type isVoiceMailFilter_Caller interface {
	isVoiceMailFilter_Caller()
}

type VoiceMailFilter_Number struct {
	Number string `protobuf:"bytes,3,opt,name=number,proto3,oneof"`
}

type VoiceMailFilter_CustomerId struct {
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3,oneof"`
}

func (*VoiceMailFilter_Number) isVoiceMailFilter_Caller() {}

func (*VoiceMailFilter_CustomerId) isVoiceMailFilter_Caller() {}

type ListVoiceMailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string           `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Filter  *VoiceMailFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	View    *v11.View        `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *ListVoiceMailsRequest) Reset() {
	*x = ListVoiceMailsRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVoiceMailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVoiceMailsRequest) ProtoMessage() {}

func (x *ListVoiceMailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVoiceMailsRequest.ProtoReflect.Descriptor instead.
func (*ListVoiceMailsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{9}
}

func (x *ListVoiceMailsRequest) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *ListVoiceMailsRequest) GetFilter() *VoiceMailFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListVoiceMailsRequest) GetView() *v11.View {
	if x != nil {
		return x.View
	}
	return nil
}

type ListVoiceMailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voicemails []*VoiceMail   `protobuf:"bytes,1,rep,name=voicemails,proto3" json:"voicemails,omitempty"`
	Customers  []*v1.Customer `protobuf:"bytes,2,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *ListVoiceMailsResponse) Reset() {
	*x = ListVoiceMailsResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVoiceMailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVoiceMailsResponse) ProtoMessage() {}

func (x *ListVoiceMailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVoiceMailsResponse.ProtoReflect.Descriptor instead.
func (*ListVoiceMailsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{10}
}

func (x *ListVoiceMailsResponse) GetVoicemails() []*VoiceMail {
	if x != nil {
		return x.Voicemails
	}
	return nil
}

func (x *ListVoiceMailsResponse) GetCustomers() []*v1.Customer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type MarkVoiceMailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoicemailIds []string `protobuf:"bytes,1,rep,name=voicemail_ids,json=voicemailIds,proto3" json:"voicemail_ids,omitempty"`
	Seen         bool     `protobuf:"varint,2,opt,name=seen,proto3" json:"seen,omitempty"`
	Mailbox      string   `protobuf:"bytes,3,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *MarkVoiceMailsRequest) Reset() {
	*x = MarkVoiceMailsRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkVoiceMailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkVoiceMailsRequest) ProtoMessage() {}

func (x *MarkVoiceMailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkVoiceMailsRequest.ProtoReflect.Descriptor instead.
func (*MarkVoiceMailsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{11}
}

func (x *MarkVoiceMailsRequest) GetVoicemailIds() []string {
	if x != nil {
		return x.VoicemailIds
	}
	return nil
}

func (x *MarkVoiceMailsRequest) GetSeen() bool {
	if x != nil {
		return x.Seen
	}
	return false
}

func (x *MarkVoiceMailsRequest) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

type MarkVoiceMailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkVoiceMailsResponse) Reset() {
	*x = MarkVoiceMailsResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkVoiceMailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkVoiceMailsResponse) ProtoMessage() {}

func (x *MarkVoiceMailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkVoiceMailsResponse.ProtoReflect.Descriptor instead.
func (*MarkVoiceMailsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{12}
}

type GetVoiceMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	View *v11.View `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *GetVoiceMailRequest) Reset() {
	*x = GetVoiceMailRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoiceMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceMailRequest) ProtoMessage() {}

func (x *GetVoiceMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceMailRequest.ProtoReflect.Descriptor instead.
func (*GetVoiceMailRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{13}
}

func (x *GetVoiceMailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetVoiceMailRequest) GetView() *v11.View {
	if x != nil {
		return x.View
	}
	return nil
}

type GetVoiceMailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voicemail *VoiceMail `protobuf:"bytes,1,opt,name=voicemail,proto3" json:"voicemail,omitempty"`
}

func (x *GetVoiceMailResponse) Reset() {
	*x = GetVoiceMailResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoiceMailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceMailResponse) ProtoMessage() {}

func (x *GetVoiceMailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceMailResponse.ProtoReflect.Descriptor instead.
func (*GetVoiceMailResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{14}
}

func (x *GetVoiceMailResponse) GetVoicemail() *VoiceMail {
	if x != nil {
		return x.Voicemail
	}
	return nil
}

type UpdateMailboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailboxId string `protobuf:"bytes,1,opt,name=mailbox_id,json=mailboxId,proto3" json:"mailbox_id,omitempty"`
	// Types that are assignable to Update:
	//
	//	*UpdateMailboxRequest_Mailbox
	//	*UpdateMailboxRequest_AddNotificationSetting
	//	*UpdateMailboxRequest_DeleteNotificationSetting
	Update isUpdateMailboxRequest_Update `protobuf_oneof:"update"`
}

func (x *UpdateMailboxRequest) Reset() {
	*x = UpdateMailboxRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMailboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMailboxRequest) ProtoMessage() {}

func (x *UpdateMailboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMailboxRequest.ProtoReflect.Descriptor instead.
func (*UpdateMailboxRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMailboxRequest) GetMailboxId() string {
	if x != nil {
		return x.MailboxId
	}
	return ""
}

func (m *UpdateMailboxRequest) GetUpdate() isUpdateMailboxRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *UpdateMailboxRequest) GetMailbox() *Mailbox {
	if x, ok := x.GetUpdate().(*UpdateMailboxRequest_Mailbox); ok {
		return x.Mailbox
	}
	return nil
}

func (x *UpdateMailboxRequest) GetAddNotificationSetting() *NotificationSettings {
	if x, ok := x.GetUpdate().(*UpdateMailboxRequest_AddNotificationSetting); ok {
		return x.AddNotificationSetting
	}
	return nil
}

func (x *UpdateMailboxRequest) GetDeleteNotificationSetting() string {
	if x, ok := x.GetUpdate().(*UpdateMailboxRequest_DeleteNotificationSetting); ok {
		return x.DeleteNotificationSetting
	}
	return ""
}

type isUpdateMailboxRequest_Update interface {
	isUpdateMailboxRequest_Update()
}

type UpdateMailboxRequest_Mailbox struct {
	Mailbox *Mailbox `protobuf:"bytes,2,opt,name=mailbox,proto3,oneof"`
}

type UpdateMailboxRequest_AddNotificationSetting struct {
	AddNotificationSetting *NotificationSettings `protobuf:"bytes,3,opt,name=add_notification_setting,json=addNotificationSetting,proto3,oneof"`
}

type UpdateMailboxRequest_DeleteNotificationSetting struct {
	DeleteNotificationSetting string `protobuf:"bytes,4,opt,name=delete_notification_setting,json=deleteNotificationSetting,proto3,oneof"`
}

func (*UpdateMailboxRequest_Mailbox) isUpdateMailboxRequest_Update() {}

func (*UpdateMailboxRequest_AddNotificationSetting) isUpdateMailboxRequest_Update() {}

func (*UpdateMailboxRequest_DeleteNotificationSetting) isUpdateMailboxRequest_Update() {}

type UpdateMailboxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox *Mailbox `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *UpdateMailboxResponse) Reset() {
	*x = UpdateMailboxResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMailboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMailboxResponse) ProtoMessage() {}

func (x *UpdateMailboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMailboxResponse.ProtoReflect.Descriptor instead.
func (*UpdateMailboxResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMailboxResponse) GetMailbox() *Mailbox {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

type SearchVoiceMailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string    `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Query   string    `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	View    *v11.View `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *SearchVoiceMailsRequest) Reset() {
	*x = SearchVoiceMailsRequest{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchVoiceMailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVoiceMailsRequest) ProtoMessage() {}

func (x *SearchVoiceMailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVoiceMailsRequest.ProtoReflect.Descriptor instead.
func (*SearchVoiceMailsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{17}
}

func (x *SearchVoiceMailsRequest) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *SearchVoiceMailsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchVoiceMailsRequest) GetView() *v11.View {
	if x != nil {
		return x.View
	}
	return nil
}

type SearchVoiceMailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voicemails []*VoiceMail   `protobuf:"bytes,1,rep,name=voicemails,proto3" json:"voicemails,omitempty"`
	Customers  []*v1.Customer `protobuf:"bytes,2,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *SearchVoiceMailsResponse) Reset() {
	*x = SearchVoiceMailsResponse{}
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchVoiceMailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVoiceMailsResponse) ProtoMessage() {}

func (x *SearchVoiceMailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVoiceMailsResponse.ProtoReflect.Descriptor instead.
func (*SearchVoiceMailsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP(), []int{18}
}

func (x *SearchVoiceMailsResponse) GetVoicemails() []*VoiceMail {
	if x != nil {
		return x.Voicemails
	}
	return nil
}

func (x *SearchVoiceMailsResponse) GetCustomers() []*v1.Customer {
	if x != nil {
		return x.Customers
	}
	return nil
}

var File_tkd_pbx3cx_v1_voicemail_proto protoreflect.FileDescriptor

var file_tkd_pbx3cx_v1_voicemail_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x74, 0x6b, 0x64, 0x2f, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x74, 0x6b, 0x64, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x6b, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03,
	0x0a, 0x09, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x73, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0xb1, 0x03, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x14, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x06,
	0xfa, 0xf7, 0x18, 0x02, 0x08, 0x01, 0x22, 0xf1, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4d, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x42, 0x07, 0xfa, 0xf7, 0x18,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x17, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x22,
	0x9b, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x8b, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x4d,
	0x61, 0x72, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33,
	0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52,
	0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70,
	0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x16, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x19,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x7b,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x8d, 0x01, 0x0a, 0x18,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2a, 0x8b, 0x01, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x42, 0x50, 0x55, 0x53, 0x48, 0x10, 0x03, 0x32, 0xbc, 0x06, 0x0a, 0x10, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12,
	0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08,
	0x02, 0x12, 0x61, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2,
	0x7e, 0x02, 0x08, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33,
	0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12, 0x61, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x23, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12, 0x64, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02,
	0x08, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x12, 0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02,
	0x08, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x6a, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2,
	0x7e, 0x02, 0x08, 0x01, 0x1a, 0x12, 0xba, 0x7e, 0x0f, 0x0a, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x42, 0xbe, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x0e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65,
	0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65,
	0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x6b, 0x64, 0x2f, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x6b,
	0x64, 0x2e, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x6b,
	0x64, 0x5c, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x6b,
	0x64, 0x5c, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x50,
	0x62, 0x78, 0x33, 0x63, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tkd_pbx3cx_v1_voicemail_proto_rawDescOnce sync.Once
	file_tkd_pbx3cx_v1_voicemail_proto_rawDescData = file_tkd_pbx3cx_v1_voicemail_proto_rawDesc
)

func file_tkd_pbx3cx_v1_voicemail_proto_rawDescGZIP() []byte {
	file_tkd_pbx3cx_v1_voicemail_proto_rawDescOnce.Do(func() {
		file_tkd_pbx3cx_v1_voicemail_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_pbx3cx_v1_voicemail_proto_rawDescData)
	})
	return file_tkd_pbx3cx_v1_voicemail_proto_rawDescData
}

var file_tkd_pbx3cx_v1_voicemail_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tkd_pbx3cx_v1_voicemail_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_tkd_pbx3cx_v1_voicemail_proto_goTypes = []any{
	(NotificationType)(0),            // 0: tkd.pbx3cx.v1.NotificationType
	(*VoiceMail)(nil),                // 1: tkd.pbx3cx.v1.VoiceMail
	(*NotificationSettings)(nil),     // 2: tkd.pbx3cx.v1.NotificationSettings
	(*Mailbox)(nil),                  // 3: tkd.pbx3cx.v1.Mailbox
	(*CreateMailboxRequest)(nil),     // 4: tkd.pbx3cx.v1.CreateMailboxRequest
	(*CreateMailboxResponse)(nil),    // 5: tkd.pbx3cx.v1.CreateMailboxResponse
	(*ListMailboxesRequest)(nil),     // 6: tkd.pbx3cx.v1.ListMailboxesRequest
	(*ListMailboxesResponse)(nil),    // 7: tkd.pbx3cx.v1.ListMailboxesResponse
	(*DeleteMailboxRequest)(nil),     // 8: tkd.pbx3cx.v1.DeleteMailboxRequest
	(*VoiceMailFilter)(nil),          // 9: tkd.pbx3cx.v1.VoiceMailFilter
	(*ListVoiceMailsRequest)(nil),    // 10: tkd.pbx3cx.v1.ListVoiceMailsRequest
	(*ListVoiceMailsResponse)(nil),   // 11: tkd.pbx3cx.v1.ListVoiceMailsResponse
	(*MarkVoiceMailsRequest)(nil),    // 12: tkd.pbx3cx.v1.MarkVoiceMailsRequest
	(*MarkVoiceMailsResponse)(nil),   // 13: tkd.pbx3cx.v1.MarkVoiceMailsResponse
	(*GetVoiceMailRequest)(nil),      // 14: tkd.pbx3cx.v1.GetVoiceMailRequest
	(*GetVoiceMailResponse)(nil),     // 15: tkd.pbx3cx.v1.GetVoiceMailResponse
	(*UpdateMailboxRequest)(nil),     // 16: tkd.pbx3cx.v1.UpdateMailboxRequest
	(*UpdateMailboxResponse)(nil),    // 17: tkd.pbx3cx.v1.UpdateMailboxResponse
	(*SearchVoiceMailsRequest)(nil),  // 18: tkd.pbx3cx.v1.SearchVoiceMailsRequest
	(*SearchVoiceMailsResponse)(nil), // 19: tkd.pbx3cx.v1.SearchVoiceMailsResponse
	(*timestamppb.Timestamp)(nil),    // 20: google.protobuf.Timestamp
	(*v1.Customer)(nil),              // 21: tkd.customer.v1.Customer
	(*v11.StringList)(nil),           // 22: tkd.common.v1.StringList
	(*v11.DayTime)(nil),              // 23: tkd.common.v1.DayTime
	(*durationpb.Duration)(nil),      // 24: google.protobuf.Duration
	(*v11.IMAPConfig)(nil),           // 25: tkd.common.v1.IMAPConfig
	(*v11.View)(nil),                 // 26: tkd.common.v1.View
	(*v11.TimeRange)(nil),            // 27: tkd.common.v1.TimeRange
	(*wrapperspb.BoolValue)(nil),     // 28: google.protobuf.BoolValue
	(*emptypb.Empty)(nil),            // 29: google.protobuf.Empty
}
var file_tkd_pbx3cx_v1_voicemail_proto_depIdxs = []int32{
	20, // 0: tkd.pbx3cx.v1.VoiceMail.receive_time:type_name -> google.protobuf.Timestamp
	21, // 1: tkd.pbx3cx.v1.VoiceMail.customer:type_name -> tkd.customer.v1.Customer
	20, // 2: tkd.pbx3cx.v1.VoiceMail.seen_time:type_name -> google.protobuf.Timestamp
	22, // 3: tkd.pbx3cx.v1.NotificationSettings.role_ids:type_name -> tkd.common.v1.StringList
	22, // 4: tkd.pbx3cx.v1.NotificationSettings.user_ids:type_name -> tkd.common.v1.StringList
	23, // 5: tkd.pbx3cx.v1.NotificationSettings.send_times:type_name -> tkd.common.v1.DayTime
	0,  // 6: tkd.pbx3cx.v1.NotificationSettings.types:type_name -> tkd.pbx3cx.v1.NotificationType
	24, // 7: tkd.pbx3cx.v1.Mailbox.poll_interval:type_name -> google.protobuf.Duration
	25, // 8: tkd.pbx3cx.v1.Mailbox.config:type_name -> tkd.common.v1.IMAPConfig
	2,  // 9: tkd.pbx3cx.v1.Mailbox.notification_settings:type_name -> tkd.pbx3cx.v1.NotificationSettings
	3,  // 10: tkd.pbx3cx.v1.CreateMailboxRequest.mailbox:type_name -> tkd.pbx3cx.v1.Mailbox
	26, // 11: tkd.pbx3cx.v1.ListMailboxesRequest.view:type_name -> tkd.common.v1.View
	3,  // 12: tkd.pbx3cx.v1.ListMailboxesResponse.mailboxes:type_name -> tkd.pbx3cx.v1.Mailbox
	27, // 13: tkd.pbx3cx.v1.VoiceMailFilter.time_range:type_name -> tkd.common.v1.TimeRange
	28, // 14: tkd.pbx3cx.v1.VoiceMailFilter.unseen:type_name -> google.protobuf.BoolValue
	9,  // 15: tkd.pbx3cx.v1.ListVoiceMailsRequest.filter:type_name -> tkd.pbx3cx.v1.VoiceMailFilter
	26, // 16: tkd.pbx3cx.v1.ListVoiceMailsRequest.view:type_name -> tkd.common.v1.View
	1,  // 17: tkd.pbx3cx.v1.ListVoiceMailsResponse.voicemails:type_name -> tkd.pbx3cx.v1.VoiceMail
	21, // 18: tkd.pbx3cx.v1.ListVoiceMailsResponse.customers:type_name -> tkd.customer.v1.Customer
	26, // 19: tkd.pbx3cx.v1.GetVoiceMailRequest.view:type_name -> tkd.common.v1.View
	1,  // 20: tkd.pbx3cx.v1.GetVoiceMailResponse.voicemail:type_name -> tkd.pbx3cx.v1.VoiceMail
	3,  // 21: tkd.pbx3cx.v1.UpdateMailboxRequest.mailbox:type_name -> tkd.pbx3cx.v1.Mailbox
	2,  // 22: tkd.pbx3cx.v1.UpdateMailboxRequest.add_notification_setting:type_name -> tkd.pbx3cx.v1.NotificationSettings
	3,  // 23: tkd.pbx3cx.v1.UpdateMailboxResponse.mailbox:type_name -> tkd.pbx3cx.v1.Mailbox
	26, // 24: tkd.pbx3cx.v1.SearchVoiceMailsRequest.view:type_name -> tkd.common.v1.View
	1,  // 25: tkd.pbx3cx.v1.SearchVoiceMailsResponse.voicemails:type_name -> tkd.pbx3cx.v1.VoiceMail
	21, // 26: tkd.pbx3cx.v1.SearchVoiceMailsResponse.customers:type_name -> tkd.customer.v1.Customer
	4,  // 27: tkd.pbx3cx.v1.VoiceMailService.CreateMailbox:input_type -> tkd.pbx3cx.v1.CreateMailboxRequest
	6,  // 28: tkd.pbx3cx.v1.VoiceMailService.ListMailboxes:input_type -> tkd.pbx3cx.v1.ListMailboxesRequest
	8,  // 29: tkd.pbx3cx.v1.VoiceMailService.DeleteMailbox:input_type -> tkd.pbx3cx.v1.DeleteMailboxRequest
	16, // 30: tkd.pbx3cx.v1.VoiceMailService.UpdateMailbox:input_type -> tkd.pbx3cx.v1.UpdateMailboxRequest
	10, // 31: tkd.pbx3cx.v1.VoiceMailService.ListVoiceMails:input_type -> tkd.pbx3cx.v1.ListVoiceMailsRequest
	14, // 32: tkd.pbx3cx.v1.VoiceMailService.GetVoiceMail:input_type -> tkd.pbx3cx.v1.GetVoiceMailRequest
	12, // 33: tkd.pbx3cx.v1.VoiceMailService.MarkVoiceMails:input_type -> tkd.pbx3cx.v1.MarkVoiceMailsRequest
	18, // 34: tkd.pbx3cx.v1.VoiceMailService.SearchVoiceMails:input_type -> tkd.pbx3cx.v1.SearchVoiceMailsRequest
	5,  // 35: tkd.pbx3cx.v1.VoiceMailService.CreateMailbox:output_type -> tkd.pbx3cx.v1.CreateMailboxResponse
	7,  // 36: tkd.pbx3cx.v1.VoiceMailService.ListMailboxes:output_type -> tkd.pbx3cx.v1.ListMailboxesResponse
	29, // 37: tkd.pbx3cx.v1.VoiceMailService.DeleteMailbox:output_type -> google.protobuf.Empty
	17, // 38: tkd.pbx3cx.v1.VoiceMailService.UpdateMailbox:output_type -> tkd.pbx3cx.v1.UpdateMailboxResponse
	11, // 39: tkd.pbx3cx.v1.VoiceMailService.ListVoiceMails:output_type -> tkd.pbx3cx.v1.ListVoiceMailsResponse
	15, // 40: tkd.pbx3cx.v1.VoiceMailService.GetVoiceMail:output_type -> tkd.pbx3cx.v1.GetVoiceMailResponse
	13, // 41: tkd.pbx3cx.v1.VoiceMailService.MarkVoiceMails:output_type -> tkd.pbx3cx.v1.MarkVoiceMailsResponse
	19, // 42: tkd.pbx3cx.v1.VoiceMailService.SearchVoiceMails:output_type -> tkd.pbx3cx.v1.SearchVoiceMailsResponse
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_tkd_pbx3cx_v1_voicemail_proto_init() }
func file_tkd_pbx3cx_v1_voicemail_proto_init() {
	if File_tkd_pbx3cx_v1_voicemail_proto != nil {
		return
	}
	file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[0].OneofWrappers = []any{
		(*VoiceMail_Number)(nil),
		(*VoiceMail_Customer)(nil),
	}
	file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[1].OneofWrappers = []any{
		(*NotificationSettings_RoleIds)(nil),
		(*NotificationSettings_UserIds)(nil),
	}
	file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[8].OneofWrappers = []any{
		(*VoiceMailFilter_Number)(nil),
		(*VoiceMailFilter_CustomerId)(nil),
	}
	file_tkd_pbx3cx_v1_voicemail_proto_msgTypes[15].OneofWrappers = []any{
		(*UpdateMailboxRequest_Mailbox)(nil),
		(*UpdateMailboxRequest_AddNotificationSetting)(nil),
		(*UpdateMailboxRequest_DeleteNotificationSetting)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_pbx3cx_v1_voicemail_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_pbx3cx_v1_voicemail_proto_goTypes,
		DependencyIndexes: file_tkd_pbx3cx_v1_voicemail_proto_depIdxs,
		EnumInfos:         file_tkd_pbx3cx_v1_voicemail_proto_enumTypes,
		MessageInfos:      file_tkd_pbx3cx_v1_voicemail_proto_msgTypes,
	}.Build()
	File_tkd_pbx3cx_v1_voicemail_proto = out.File
	file_tkd_pbx3cx_v1_voicemail_proto_rawDesc = nil
	file_tkd_pbx3cx_v1_voicemail_proto_goTypes = nil
	file_tkd_pbx3cx_v1_voicemail_proto_depIdxs = nil
}
