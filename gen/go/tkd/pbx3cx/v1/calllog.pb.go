// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: tkd/pbx3cx/v1/calllog.proto

package pbx3cxv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	v12 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/customer/v1"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/idm/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallDirection int32

const (
	CallDirection_CALL_DIRECTION_UNSPECIFIED CallDirection = 0
	CallDirection_CALL_DIRECTION_INBOUND     CallDirection = 1
	CallDirection_CALL_DIRECTION_OUTBOUND    CallDirection = 2
)

// Enum value maps for CallDirection.
var (
	CallDirection_name = map[int32]string{
		0: "CALL_DIRECTION_UNSPECIFIED",
		1: "CALL_DIRECTION_INBOUND",
		2: "CALL_DIRECTION_OUTBOUND",
	}
	CallDirection_value = map[string]int32{
		"CALL_DIRECTION_UNSPECIFIED": 0,
		"CALL_DIRECTION_INBOUND":     1,
		"CALL_DIRECTION_OUTBOUND":    2,
	}
)

func (x CallDirection) Enum() *CallDirection {
	p := new(CallDirection)
	*p = x
	return p
}

func (x CallDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_pbx3cx_v1_calllog_proto_enumTypes[0].Descriptor()
}

func (CallDirection) Type() protoreflect.EnumType {
	return &file_tkd_pbx3cx_v1_calllog_proto_enumTypes[0]
}

func (x CallDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallDirection.Descriptor instead.
func (CallDirection) EnumDescriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{0}
}

type CallStatus int32

const (
	CallStatus_CALL_STATUS_UNSPECIFIED CallStatus = 0
	CallStatus_CALL_STATUS_INBOUND     CallStatus = 1
	CallStatus_CALL_STATUS_OUTBOUND    CallStatus = 2
	CallStatus_CALL_STATUS_MISSED      CallStatus = 3
	CallStatus_CALL_STATUS_NOTANSWERED CallStatus = 4
)

// Enum value maps for CallStatus.
var (
	CallStatus_name = map[int32]string{
		0: "CALL_STATUS_UNSPECIFIED",
		1: "CALL_STATUS_INBOUND",
		2: "CALL_STATUS_OUTBOUND",
		3: "CALL_STATUS_MISSED",
		4: "CALL_STATUS_NOTANSWERED",
	}
	CallStatus_value = map[string]int32{
		"CALL_STATUS_UNSPECIFIED": 0,
		"CALL_STATUS_INBOUND":     1,
		"CALL_STATUS_OUTBOUND":    2,
		"CALL_STATUS_MISSED":      3,
		"CALL_STATUS_NOTANSWERED": 4,
	}
)

func (x CallStatus) Enum() *CallStatus {
	p := new(CallStatus)
	*p = x
	return p
}

func (x CallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_pbx3cx_v1_calllog_proto_enumTypes[1].Descriptor()
}

func (CallStatus) Type() protoreflect.EnumType {
	return &file_tkd_pbx3cx_v1_calllog_proto_enumTypes[1]
}

func (x CallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallStatus.Descriptor instead.
func (CallStatus) EnumDescriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{1}
}

type CallEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Caller        string                 `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	InboundNumber string                 `protobuf:"bytes,3,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
	ReceivedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	CallType      string                 `protobuf:"bytes,6,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	AgentUserId   string                 `protobuf:"bytes,7,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`
	CustomerId    string                 `protobuf:"bytes,8,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// CustomerSource is unused.
	// Deprecated: CustomerSource is not used anymore.
	CustomerSource string        `protobuf:"bytes,9,opt,name=customer_source,json=customerSource,proto3" json:"customer_source,omitempty"`
	Error          bool          `protobuf:"varint,10,opt,name=error,proto3" json:"error,omitempty"`
	TransferTarget string        `protobuf:"bytes,11,opt,name=transfer_target,json=transferTarget,proto3" json:"transfer_target,omitempty"`
	AcceptedAgent  string        `protobuf:"bytes,12,opt,name=accepted_agent,json=acceptedAgent,proto3" json:"accepted_agent,omitempty"`
	Direction      CallDirection `protobuf:"varint,13,opt,name=direction,proto3,enum=tkd.pbx3cx.v1.CallDirection" json:"direction,omitempty"`
	QueueExtension string        `protobuf:"bytes,14,opt,name=queue_extension,json=queueExtension,proto3" json:"queue_extension,omitempty"`
	Status         CallStatus    `protobuf:"varint,15,opt,name=status,proto3,enum=tkd.pbx3cx.v1.CallStatus" json:"status,omitempty"`
}

func (x *CallEntry) Reset() {
	*x = CallEntry{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallEntry) ProtoMessage() {}

func (x *CallEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallEntry.ProtoReflect.Descriptor instead.
func (*CallEntry) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{0}
}

func (x *CallEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CallEntry) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *CallEntry) GetInboundNumber() string {
	if x != nil {
		return x.InboundNumber
	}
	return ""
}

func (x *CallEntry) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *CallEntry) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CallEntry) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *CallEntry) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *CallEntry) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CallEntry) GetCustomerSource() string {
	if x != nil {
		return x.CustomerSource
	}
	return ""
}

func (x *CallEntry) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CallEntry) GetTransferTarget() string {
	if x != nil {
		return x.TransferTarget
	}
	return ""
}

func (x *CallEntry) GetAcceptedAgent() string {
	if x != nil {
		return x.AcceptedAgent
	}
	return ""
}

func (x *CallEntry) GetDirection() CallDirection {
	if x != nil {
		return x.Direction
	}
	return CallDirection_CALL_DIRECTION_UNSPECIFIED
}

func (x *CallEntry) GetQueueExtension() string {
	if x != nil {
		return x.QueueExtension
	}
	return ""
}

func (x *CallEntry) GetStatus() CallStatus {
	if x != nil {
		return x.Status
	}
	return CallStatus_CALL_STATUS_UNSPECIFIED
}

type OnCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile        *v1.Profile            `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	TransferTarget string                 `protobuf:"bytes,2,opt,name=transfer_target,json=transferTarget,proto3" json:"transfer_target,omitempty"`
	Until          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *OnCall) Reset() {
	*x = OnCall{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnCall) ProtoMessage() {}

func (x *OnCall) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnCall.ProtoReflect.Descriptor instead.
func (*OnCall) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{1}
}

func (x *OnCall) GetProfile() *v1.Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *OnCall) GetTransferTarget() string {
	if x != nil {
		return x.TransferTarget
	}
	return ""
}

func (x *OnCall) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type CustomOverwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferTarget string `protobuf:"bytes,1,opt,name=transfer_target,json=transferTarget,proto3" json:"transfer_target,omitempty"`
	DisplayName    string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *CustomOverwrite) Reset() {
	*x = CustomOverwrite{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomOverwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomOverwrite) ProtoMessage() {}

func (x *CustomOverwrite) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomOverwrite.ProtoReflect.Descriptor instead.
func (*CustomOverwrite) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{2}
}

func (x *CustomOverwrite) GetTransferTarget() string {
	if x != nil {
		return x.TransferTarget
	}
	return ""
}

func (x *CustomOverwrite) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type Overwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Types that are assignable to Target:
	//
	//	*Overwrite_Custom
	//	*Overwrite_UserId
	Target          isOverwrite_Target     `protobuf_oneof:"target"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedByUserId string                 `protobuf:"bytes,7,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	InboundNumber   *InboundNumber         `protobuf:"bytes,8,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
}

func (x *Overwrite) Reset() {
	*x = Overwrite{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overwrite) ProtoMessage() {}

func (x *Overwrite) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overwrite.ProtoReflect.Descriptor instead.
func (*Overwrite) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{3}
}

func (x *Overwrite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Overwrite) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Overwrite) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (m *Overwrite) GetTarget() isOverwrite_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Overwrite) GetCustom() *CustomOverwrite {
	if x, ok := x.GetTarget().(*Overwrite_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *Overwrite) GetUserId() string {
	if x, ok := x.GetTarget().(*Overwrite_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *Overwrite) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Overwrite) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *Overwrite) GetInboundNumber() *InboundNumber {
	if x != nil {
		return x.InboundNumber
	}
	return nil
}

type isOverwrite_Target interface {
	isOverwrite_Target()
}

type Overwrite_Custom struct {
	Custom *CustomOverwrite `protobuf:"bytes,4,opt,name=custom,proto3,oneof"`
}

type Overwrite_UserId struct {
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*Overwrite_Custom) isOverwrite_Target() {}

func (*Overwrite_UserId) isOverwrite_Target() {}

type InboundNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the inbound number.
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// DisplayName is an optional display-name or description for
	// the inbound number.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// RosterShiftTags is a list of roster shift tags that should
	// be queried when resolving the employees that are currently on-duty.
	RosterShiftTags []string `protobuf:"bytes,3,rep,name=roster_shift_tags,json=rosterShiftTags,proto3" json:"roster_shift_tags,omitempty"`
	// An optional roster type name to query when resolving the employees
	// that are currently on duty.
	// If unset, CallService will use the default RosterTypeName from it's
	// configuration.
	RosterTypeName string `protobuf:"bytes,4,opt,name=roster_type_name,json=rosterTypeName,proto3" json:"roster_type_name,omitempty"`
	// ResultLimit may be set to a value greater than zero to limit the number
	// of on-call users returned.
	ResultLimit int32 `protobuf:"varint,5,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
}

func (x *InboundNumber) Reset() {
	*x = InboundNumber{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundNumber) ProtoMessage() {}

func (x *InboundNumber) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundNumber.ProtoReflect.Descriptor instead.
func (*InboundNumber) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{4}
}

func (x *InboundNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *InboundNumber) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *InboundNumber) GetRosterShiftTags() []string {
	if x != nil {
		return x.RosterShiftTags
	}
	return nil
}

func (x *InboundNumber) GetRosterTypeName() string {
	if x != nil {
		return x.RosterTypeName
	}
	return ""
}

func (x *InboundNumber) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

type RecordCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration       string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Number         string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Agent          string `protobuf:"bytes,3,opt,name=agent,proto3" json:"agent,omitempty"`
	CallType       string `protobuf:"bytes,4,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	DateTime       string `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	CustomerId     string `protobuf:"bytes,6,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	QueueExtension string `protobuf:"bytes,8,opt,name=queue_extension,json=queueExtension,proto3" json:"queue_extension,omitempty"`
	Direction      string `protobuf:"bytes,9,opt,name=direction,proto3" json:"direction,omitempty"`
	// CustomerSource used to hold the source of the customer.
	// Deprecated: this field is only set for old records
	CustomerSource string `protobuf:"bytes,7,opt,name=customer_source,json=customerSource,proto3" json:"customer_source,omitempty"`
}

func (x *RecordCallRequest) Reset() {
	*x = RecordCallRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCallRequest) ProtoMessage() {}

func (x *RecordCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCallRequest.ProtoReflect.Descriptor instead.
func (*RecordCallRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{5}
}

func (x *RecordCallRequest) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *RecordCallRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *RecordCallRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *RecordCallRequest) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *RecordCallRequest) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *RecordCallRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RecordCallRequest) GetQueueExtension() string {
	if x != nil {
		return x.QueueExtension
	}
	return ""
}

func (x *RecordCallRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *RecordCallRequest) GetCustomerSource() string {
	if x != nil {
		return x.CustomerSource
	}
	return ""
}

type GetLogsForCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLogsForCustomerRequest) Reset() {
	*x = GetLogsForCustomerRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsForCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsForCustomerRequest) ProtoMessage() {}

func (x *GetLogsForCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsForCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetLogsForCustomerRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogsForCustomerRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetLogsForCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLogsForCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CallEntry `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetLogsForCustomerResponse) Reset() {
	*x = GetLogsForCustomerResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsForCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsForCustomerResponse) ProtoMessage() {}

func (x *GetLogsForCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsForCustomerResponse.ProtoReflect.Descriptor instead.
func (*GetLogsForCustomerResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{7}
}

func (x *GetLogsForCustomerResponse) GetResults() []*CallEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetLogsForDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // YYYY-MM-DD
}

func (x *GetLogsForDateRequest) Reset() {
	*x = GetLogsForDateRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsForDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsForDateRequest) ProtoMessage() {}

func (x *GetLogsForDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsForDateRequest.ProtoReflect.Descriptor instead.
func (*GetLogsForDateRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{8}
}

func (x *GetLogsForDateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetLogsForDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CallEntry `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetLogsForDateResponse) Reset() {
	*x = GetLogsForDateResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsForDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsForDateResponse) ProtoMessage() {}

func (x *GetLogsForDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsForDateResponse.ProtoReflect.Descriptor instead.
func (*GetLogsForDateResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{9}
}

func (x *GetLogsForDateResponse) GetResults() []*CallEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type SearchCallLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string           `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // YYYY-MM-DD
	TimeRange   *v11.TimeRange   `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	CustomerRef *v12.CustomerRef `protobuf:"bytes,3,opt,name=customer_ref,json=customerRef,proto3" json:"customer_ref,omitempty"`
}

func (x *SearchCallLogsRequest) Reset() {
	*x = SearchCallLogsRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCallLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCallLogsRequest) ProtoMessage() {}

func (x *SearchCallLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCallLogsRequest.ProtoReflect.Descriptor instead.
func (*SearchCallLogsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{10}
}

func (x *SearchCallLogsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SearchCallLogsRequest) GetTimeRange() *v11.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *SearchCallLogsRequest) GetCustomerRef() *v12.CustomerRef {
	if x != nil {
		return x.CustomerRef
	}
	return nil
}

type SearchCallLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   []*CallEntry    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Customers []*v12.Customer `protobuf:"bytes,2,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *SearchCallLogsResponse) Reset() {
	*x = SearchCallLogsResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCallLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCallLogsResponse) ProtoMessage() {}

func (x *SearchCallLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCallLogsResponse.ProtoReflect.Descriptor instead.
func (*SearchCallLogsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{11}
}

func (x *SearchCallLogsResponse) GetResults() []*CallEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchCallLogsResponse) GetCustomers() []*v12.Customer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type GetOnCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date             string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // YYYY-MM-DD
	IgnoreOverwrites bool   `protobuf:"varint,2,opt,name=ignore_overwrites,json=ignoreOverwrites,proto3" json:"ignore_overwrites,omitempty"`
	InboundNumber    string `protobuf:"bytes,3,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
}

func (x *GetOnCallRequest) Reset() {
	*x = GetOnCallRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnCallRequest) ProtoMessage() {}

func (x *GetOnCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnCallRequest.ProtoReflect.Descriptor instead.
func (*GetOnCallRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{12}
}

func (x *GetOnCallRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetOnCallRequest) GetIgnoreOverwrites() bool {
	if x != nil {
		return x.IgnoreOverwrites
	}
	return false
}

func (x *GetOnCallRequest) GetInboundNumber() string {
	if x != nil {
		return x.InboundNumber
	}
	return ""
}

type GetOnCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnCall                []*OnCall `protobuf:"bytes,1,rep,name=on_call,json=onCall,proto3" json:"on_call,omitempty"`
	RosterDate            string    `protobuf:"bytes,2,opt,name=roster_date,json=rosterDate,proto3" json:"roster_date,omitempty"` // YYYY-MM-DD
	IsOverwrite           bool      `protobuf:"varint,3,opt,name=is_overwrite,json=isOverwrite,proto3" json:"is_overwrite,omitempty"`
	PrimaryTransferTarget string    `protobuf:"bytes,4,opt,name=primary_transfer_target,json=primaryTransferTarget,proto3" json:"primary_transfer_target,omitempty"`
}

func (x *GetOnCallResponse) Reset() {
	*x = GetOnCallResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnCallResponse) ProtoMessage() {}

func (x *GetOnCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnCallResponse.ProtoReflect.Descriptor instead.
func (*GetOnCallResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{13}
}

func (x *GetOnCallResponse) GetOnCall() []*OnCall {
	if x != nil {
		return x.OnCall
	}
	return nil
}

func (x *GetOnCallResponse) GetRosterDate() string {
	if x != nil {
		return x.RosterDate
	}
	return ""
}

func (x *GetOnCallResponse) GetIsOverwrite() bool {
	if x != nil {
		return x.IsOverwrite
	}
	return false
}

func (x *GetOnCallResponse) GetPrimaryTransferTarget() string {
	if x != nil {
		return x.PrimaryTransferTarget
	}
	return ""
}

type CreateOverwriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransferTarget:
	//
	//	*CreateOverwriteRequest_Custom
	//	*CreateOverwriteRequest_UserId
	TransferTarget isCreateOverwriteRequest_TransferTarget `protobuf_oneof:"transfer_target"`
	From           *timestamppb.Timestamp                  `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To             *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	InboundNumber  string                                  `protobuf:"bytes,5,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
}

func (x *CreateOverwriteRequest) Reset() {
	*x = CreateOverwriteRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOverwriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOverwriteRequest) ProtoMessage() {}

func (x *CreateOverwriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOverwriteRequest.ProtoReflect.Descriptor instead.
func (*CreateOverwriteRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{14}
}

func (m *CreateOverwriteRequest) GetTransferTarget() isCreateOverwriteRequest_TransferTarget {
	if m != nil {
		return m.TransferTarget
	}
	return nil
}

func (x *CreateOverwriteRequest) GetCustom() *CustomOverwrite {
	if x, ok := x.GetTransferTarget().(*CreateOverwriteRequest_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *CreateOverwriteRequest) GetUserId() string {
	if x, ok := x.GetTransferTarget().(*CreateOverwriteRequest_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *CreateOverwriteRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CreateOverwriteRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateOverwriteRequest) GetInboundNumber() string {
	if x != nil {
		return x.InboundNumber
	}
	return ""
}

type isCreateOverwriteRequest_TransferTarget interface {
	isCreateOverwriteRequest_TransferTarget()
}

type CreateOverwriteRequest_Custom struct {
	Custom *CustomOverwrite `protobuf:"bytes,1,opt,name=custom,proto3,oneof"`
}

type CreateOverwriteRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*CreateOverwriteRequest_Custom) isCreateOverwriteRequest_TransferTarget() {}

func (*CreateOverwriteRequest_UserId) isCreateOverwriteRequest_TransferTarget() {}

type CreateOverwriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overwrite *Overwrite `protobuf:"bytes,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *CreateOverwriteResponse) Reset() {
	*x = CreateOverwriteResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOverwriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOverwriteResponse) ProtoMessage() {}

func (x *CreateOverwriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOverwriteResponse.ProtoReflect.Descriptor instead.
func (*CreateOverwriteResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{15}
}

func (x *CreateOverwriteResponse) GetOverwrite() *Overwrite {
	if x != nil {
		return x.Overwrite
	}
	return nil
}

type DeleteOverwriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*DeleteOverwriteRequest_OverwriteId
	//	*DeleteOverwriteRequest_ActiveAt
	Selector       isDeleteOverwriteRequest_Selector `protobuf_oneof:"selector"`
	InboundNumbers *InboundNumberList                `protobuf:"bytes,3,opt,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
}

func (x *DeleteOverwriteRequest) Reset() {
	*x = DeleteOverwriteRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOverwriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOverwriteRequest) ProtoMessage() {}

func (x *DeleteOverwriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOverwriteRequest.ProtoReflect.Descriptor instead.
func (*DeleteOverwriteRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{16}
}

func (m *DeleteOverwriteRequest) GetSelector() isDeleteOverwriteRequest_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *DeleteOverwriteRequest) GetOverwriteId() string {
	if x, ok := x.GetSelector().(*DeleteOverwriteRequest_OverwriteId); ok {
		return x.OverwriteId
	}
	return ""
}

func (x *DeleteOverwriteRequest) GetActiveAt() *timestamppb.Timestamp {
	if x, ok := x.GetSelector().(*DeleteOverwriteRequest_ActiveAt); ok {
		return x.ActiveAt
	}
	return nil
}

func (x *DeleteOverwriteRequest) GetInboundNumbers() *InboundNumberList {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

type isDeleteOverwriteRequest_Selector interface {
	isDeleteOverwriteRequest_Selector()
}

type DeleteOverwriteRequest_OverwriteId struct {
	OverwriteId string `protobuf:"bytes,1,opt,name=overwrite_id,json=overwriteId,proto3,oneof"`
}

type DeleteOverwriteRequest_ActiveAt struct {
	ActiveAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=active_at,json=activeAt,proto3,oneof"`
}

func (*DeleteOverwriteRequest_OverwriteId) isDeleteOverwriteRequest_Selector() {}

func (*DeleteOverwriteRequest_ActiveAt) isDeleteOverwriteRequest_Selector() {}

type DeleteOverwriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOverwriteResponse) Reset() {
	*x = DeleteOverwriteResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOverwriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOverwriteResponse) ProtoMessage() {}

func (x *DeleteOverwriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOverwriteResponse.ProtoReflect.Descriptor instead.
func (*DeleteOverwriteResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{17}
}

type GetOverwriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*GetOverwriteRequest_OverwriteId
	//	*GetOverwriteRequest_ActiveAt
	//	*GetOverwriteRequest_TimeRange
	Selector       isGetOverwriteRequest_Selector `protobuf_oneof:"selector"`
	InboundNumbers *InboundNumberList             `protobuf:"bytes,4,opt,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
}

func (x *GetOverwriteRequest) Reset() {
	*x = GetOverwriteRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverwriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverwriteRequest) ProtoMessage() {}

func (x *GetOverwriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverwriteRequest.ProtoReflect.Descriptor instead.
func (*GetOverwriteRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{18}
}

func (m *GetOverwriteRequest) GetSelector() isGetOverwriteRequest_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *GetOverwriteRequest) GetOverwriteId() string {
	if x, ok := x.GetSelector().(*GetOverwriteRequest_OverwriteId); ok {
		return x.OverwriteId
	}
	return ""
}

func (x *GetOverwriteRequest) GetActiveAt() *timestamppb.Timestamp {
	if x, ok := x.GetSelector().(*GetOverwriteRequest_ActiveAt); ok {
		return x.ActiveAt
	}
	return nil
}

func (x *GetOverwriteRequest) GetTimeRange() *v11.TimeRange {
	if x, ok := x.GetSelector().(*GetOverwriteRequest_TimeRange); ok {
		return x.TimeRange
	}
	return nil
}

func (x *GetOverwriteRequest) GetInboundNumbers() *InboundNumberList {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

type isGetOverwriteRequest_Selector interface {
	isGetOverwriteRequest_Selector()
}

type GetOverwriteRequest_OverwriteId struct {
	OverwriteId string `protobuf:"bytes,1,opt,name=overwrite_id,json=overwriteId,proto3,oneof"`
}

type GetOverwriteRequest_ActiveAt struct {
	ActiveAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=active_at,json=activeAt,proto3,oneof"`
}

type GetOverwriteRequest_TimeRange struct {
	TimeRange *v11.TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3,oneof"`
}

func (*GetOverwriteRequest_OverwriteId) isGetOverwriteRequest_Selector() {}

func (*GetOverwriteRequest_ActiveAt) isGetOverwriteRequest_Selector() {}

func (*GetOverwriteRequest_TimeRange) isGetOverwriteRequest_Selector() {}

type InboundNumberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []string `protobuf:"bytes,1,rep,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *InboundNumberList) Reset() {
	*x = InboundNumberList{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundNumberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundNumberList) ProtoMessage() {}

func (x *InboundNumberList) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundNumberList.ProtoReflect.Descriptor instead.
func (*InboundNumberList) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{19}
}

func (x *InboundNumberList) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type GetOverwriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overwrites []*Overwrite `protobuf:"bytes,1,rep,name=overwrites,proto3" json:"overwrites,omitempty"`
}

func (x *GetOverwriteResponse) Reset() {
	*x = GetOverwriteResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverwriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverwriteResponse) ProtoMessage() {}

func (x *GetOverwriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverwriteResponse.ProtoReflect.Descriptor instead.
func (*GetOverwriteResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{20}
}

func (x *GetOverwriteResponse) GetOverwrites() []*Overwrite {
	if x != nil {
		return x.Overwrites
	}
	return nil
}

type CreateInboundNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number      string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// RosterShiftTags is a list of roster shift tags that should
	// be queried when resolving the employees that are currently on-duty.
	RosterShiftTags []string `protobuf:"bytes,3,rep,name=roster_shift_tags,json=rosterShiftTags,proto3" json:"roster_shift_tags,omitempty"`
	// An optional roster type name to query when resolving the employees
	// that are currently on duty.
	// If unset, CallService will use the default RosterTypeName from it's
	// configuration.
	RosterTypeName string `protobuf:"bytes,4,opt,name=roster_type_name,json=rosterTypeName,proto3" json:"roster_type_name,omitempty"`
	// ResultLimit may be set to a value greater than zero to limit the number
	// of on-call users returned.
	ResultLimit int32 `protobuf:"varint,5,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
}

func (x *CreateInboundNumberRequest) Reset() {
	*x = CreateInboundNumberRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundNumberRequest) ProtoMessage() {}

func (x *CreateInboundNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundNumberRequest.ProtoReflect.Descriptor instead.
func (*CreateInboundNumberRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{21}
}

func (x *CreateInboundNumberRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreateInboundNumberRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateInboundNumberRequest) GetRosterShiftTags() []string {
	if x != nil {
		return x.RosterShiftTags
	}
	return nil
}

func (x *CreateInboundNumberRequest) GetRosterTypeName() string {
	if x != nil {
		return x.RosterTypeName
	}
	return ""
}

func (x *CreateInboundNumberRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

type CreateInboundNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundNumber *InboundNumber `protobuf:"bytes,1,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
}

func (x *CreateInboundNumberResponse) Reset() {
	*x = CreateInboundNumberResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInboundNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInboundNumberResponse) ProtoMessage() {}

func (x *CreateInboundNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInboundNumberResponse.ProtoReflect.Descriptor instead.
func (*CreateInboundNumberResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{22}
}

func (x *CreateInboundNumberResponse) GetInboundNumber() *InboundNumber {
	if x != nil {
		return x.InboundNumber
	}
	return nil
}

type DeleteInboundNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *DeleteInboundNumberRequest) Reset() {
	*x = DeleteInboundNumberRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundNumberRequest) ProtoMessage() {}

func (x *DeleteInboundNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundNumberRequest.ProtoReflect.Descriptor instead.
func (*DeleteInboundNumberRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteInboundNumberRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type DeleteInboundNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInboundNumberResponse) Reset() {
	*x = DeleteInboundNumberResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInboundNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInboundNumberResponse) ProtoMessage() {}

func (x *DeleteInboundNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInboundNumberResponse.ProtoReflect.Descriptor instead.
func (*DeleteInboundNumberResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{24}
}

type ListInboundNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInboundNumberRequest) Reset() {
	*x = ListInboundNumberRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundNumberRequest) ProtoMessage() {}

func (x *ListInboundNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundNumberRequest.ProtoReflect.Descriptor instead.
func (*ListInboundNumberRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{25}
}

type ListInboundNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundNumbers []*InboundNumber `protobuf:"bytes,1,rep,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
}

func (x *ListInboundNumberResponse) Reset() {
	*x = ListInboundNumberResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInboundNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundNumberResponse) ProtoMessage() {}

func (x *ListInboundNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundNumberResponse.ProtoReflect.Descriptor instead.
func (*ListInboundNumberResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{26}
}

func (x *ListInboundNumberResponse) GetInboundNumbers() []*InboundNumber {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

type UpdateInboundNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the number to update.
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// NewDisplayName is the new display name for the number.
	NewDisplayName string `protobuf:"bytes,2,opt,name=new_display_name,json=newDisplayName,proto3" json:"new_display_name,omitempty"`
	// RosterShiftTags is a list of roster shift tags that should
	// be queried when resolving the employees that are currently on-duty.
	RosterShiftTags []string `protobuf:"bytes,3,rep,name=roster_shift_tags,json=rosterShiftTags,proto3" json:"roster_shift_tags,omitempty"`
	// An optional roster type name to query when resolving the employees
	// that are currently on duty.
	// If unset, CallService will use the default RosterTypeName from it's
	// configuration.
	RosterTypeName string `protobuf:"bytes,4,opt,name=roster_type_name,json=rosterTypeName,proto3" json:"roster_type_name,omitempty"`
	// UpdateMask specifies which fields of the InboundNumber should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateInboundNumberRequest) Reset() {
	*x = UpdateInboundNumberRequest{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundNumberRequest) ProtoMessage() {}

func (x *UpdateInboundNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundNumberRequest.ProtoReflect.Descriptor instead.
func (*UpdateInboundNumberRequest) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateInboundNumberRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *UpdateInboundNumberRequest) GetNewDisplayName() string {
	if x != nil {
		return x.NewDisplayName
	}
	return ""
}

func (x *UpdateInboundNumberRequest) GetRosterShiftTags() []string {
	if x != nil {
		return x.RosterShiftTags
	}
	return nil
}

func (x *UpdateInboundNumberRequest) GetRosterTypeName() string {
	if x != nil {
		return x.RosterTypeName
	}
	return ""
}

func (x *UpdateInboundNumberRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateInboundNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundNumber *InboundNumber `protobuf:"bytes,1,opt,name=inbound_number,json=inboundNumber,proto3" json:"inbound_number,omitempty"`
}

func (x *UpdateInboundNumberResponse) Reset() {
	*x = UpdateInboundNumberResponse{}
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInboundNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInboundNumberResponse) ProtoMessage() {}

func (x *UpdateInboundNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_pbx3cx_v1_calllog_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInboundNumberResponse.ProtoReflect.Descriptor instead.
func (*UpdateInboundNumberResponse) Descriptor() ([]byte, []int) {
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateInboundNumberResponse) GetInboundNumber() *InboundNumber {
	if x != nil {
		return x.InboundNumber
	}
	return nil
}

var File_tkd_pbx3cx_v1_calllog_proto protoreflect.FileDescriptor

var file_tkd_pbx3cx_v1_calllog_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x6b, 0x64, 0x2f, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x74, 0x6b, 0x64, 0x2f, 0x69, 0x64, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd7, 0x04, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x06, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x83, 0x03, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa8, 0x02, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70,
	0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x06, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x19,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x19,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x06, 0xfa, 0xf7, 0x18, 0x02, 0x08, 0x01, 0x22, 0x51, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x42, 0x12, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x06,
	0xfa, 0xf7, 0x18, 0x02, 0x08, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8f, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42,
	0x12, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x06, 0xfa, 0xf7, 0x18,
	0x02, 0x08, 0x01, 0x22, 0x2d, 0x0a, 0x11, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x62, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x62, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2a, 0x68, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x91, 0x01,
	0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x04, 0x32, 0x9d, 0x0a, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01,
	0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x90, 0x02, 0x01, 0x12, 0x73, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12,
	0x73, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2,
	0x7e, 0x02, 0x08, 0x02, 0x12, 0x73, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12, 0x6d, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08,
	0x01, 0x12, 0x67, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01,
	0x12, 0x64, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70,
	0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62, 0x78,
	0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x1a, 0x27, 0xb2, 0x7e, 0x12, 0x33, 0x63, 0x78,
	0x2e, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2e, 0x76, 0x65, 0x74, 0xba,
	0x7e, 0x0f, 0x0a, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x42, 0xbc, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x70, 0x62,
	0x78, 0x33, 0x63, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64,
	0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x78, 0x33, 0x63, 0x78, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54,
	0x50, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x2e, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x5c, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x6b, 0x64, 0x5c, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0f, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x50, 0x62, 0x78, 0x33, 0x63, 0x78, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tkd_pbx3cx_v1_calllog_proto_rawDescOnce sync.Once
	file_tkd_pbx3cx_v1_calllog_proto_rawDescData = file_tkd_pbx3cx_v1_calllog_proto_rawDesc
)

func file_tkd_pbx3cx_v1_calllog_proto_rawDescGZIP() []byte {
	file_tkd_pbx3cx_v1_calllog_proto_rawDescOnce.Do(func() {
		file_tkd_pbx3cx_v1_calllog_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_pbx3cx_v1_calllog_proto_rawDescData)
	})
	return file_tkd_pbx3cx_v1_calllog_proto_rawDescData
}

var file_tkd_pbx3cx_v1_calllog_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tkd_pbx3cx_v1_calllog_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_tkd_pbx3cx_v1_calllog_proto_goTypes = []any{
	(CallDirection)(0),                  // 0: tkd.pbx3cx.v1.CallDirection
	(CallStatus)(0),                     // 1: tkd.pbx3cx.v1.CallStatus
	(*CallEntry)(nil),                   // 2: tkd.pbx3cx.v1.CallEntry
	(*OnCall)(nil),                      // 3: tkd.pbx3cx.v1.OnCall
	(*CustomOverwrite)(nil),             // 4: tkd.pbx3cx.v1.CustomOverwrite
	(*Overwrite)(nil),                   // 5: tkd.pbx3cx.v1.Overwrite
	(*InboundNumber)(nil),               // 6: tkd.pbx3cx.v1.InboundNumber
	(*RecordCallRequest)(nil),           // 7: tkd.pbx3cx.v1.RecordCallRequest
	(*GetLogsForCustomerRequest)(nil),   // 8: tkd.pbx3cx.v1.GetLogsForCustomerRequest
	(*GetLogsForCustomerResponse)(nil),  // 9: tkd.pbx3cx.v1.GetLogsForCustomerResponse
	(*GetLogsForDateRequest)(nil),       // 10: tkd.pbx3cx.v1.GetLogsForDateRequest
	(*GetLogsForDateResponse)(nil),      // 11: tkd.pbx3cx.v1.GetLogsForDateResponse
	(*SearchCallLogsRequest)(nil),       // 12: tkd.pbx3cx.v1.SearchCallLogsRequest
	(*SearchCallLogsResponse)(nil),      // 13: tkd.pbx3cx.v1.SearchCallLogsResponse
	(*GetOnCallRequest)(nil),            // 14: tkd.pbx3cx.v1.GetOnCallRequest
	(*GetOnCallResponse)(nil),           // 15: tkd.pbx3cx.v1.GetOnCallResponse
	(*CreateOverwriteRequest)(nil),      // 16: tkd.pbx3cx.v1.CreateOverwriteRequest
	(*CreateOverwriteResponse)(nil),     // 17: tkd.pbx3cx.v1.CreateOverwriteResponse
	(*DeleteOverwriteRequest)(nil),      // 18: tkd.pbx3cx.v1.DeleteOverwriteRequest
	(*DeleteOverwriteResponse)(nil),     // 19: tkd.pbx3cx.v1.DeleteOverwriteResponse
	(*GetOverwriteRequest)(nil),         // 20: tkd.pbx3cx.v1.GetOverwriteRequest
	(*InboundNumberList)(nil),           // 21: tkd.pbx3cx.v1.InboundNumberList
	(*GetOverwriteResponse)(nil),        // 22: tkd.pbx3cx.v1.GetOverwriteResponse
	(*CreateInboundNumberRequest)(nil),  // 23: tkd.pbx3cx.v1.CreateInboundNumberRequest
	(*CreateInboundNumberResponse)(nil), // 24: tkd.pbx3cx.v1.CreateInboundNumberResponse
	(*DeleteInboundNumberRequest)(nil),  // 25: tkd.pbx3cx.v1.DeleteInboundNumberRequest
	(*DeleteInboundNumberResponse)(nil), // 26: tkd.pbx3cx.v1.DeleteInboundNumberResponse
	(*ListInboundNumberRequest)(nil),    // 27: tkd.pbx3cx.v1.ListInboundNumberRequest
	(*ListInboundNumberResponse)(nil),   // 28: tkd.pbx3cx.v1.ListInboundNumberResponse
	(*UpdateInboundNumberRequest)(nil),  // 29: tkd.pbx3cx.v1.UpdateInboundNumberRequest
	(*UpdateInboundNumberResponse)(nil), // 30: tkd.pbx3cx.v1.UpdateInboundNumberResponse
	(*timestamppb.Timestamp)(nil),       // 31: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 32: google.protobuf.Duration
	(*v1.Profile)(nil),                  // 33: tkd.idm.v1.Profile
	(*v11.TimeRange)(nil),               // 34: tkd.common.v1.TimeRange
	(*v12.CustomerRef)(nil),             // 35: tkd.customer.v1.CustomerRef
	(*v12.Customer)(nil),                // 36: tkd.customer.v1.Customer
	(*fieldmaskpb.FieldMask)(nil),       // 37: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),               // 38: google.protobuf.Empty
}
var file_tkd_pbx3cx_v1_calllog_proto_depIdxs = []int32{
	31, // 0: tkd.pbx3cx.v1.CallEntry.received_at:type_name -> google.protobuf.Timestamp
	32, // 1: tkd.pbx3cx.v1.CallEntry.duration:type_name -> google.protobuf.Duration
	0,  // 2: tkd.pbx3cx.v1.CallEntry.direction:type_name -> tkd.pbx3cx.v1.CallDirection
	1,  // 3: tkd.pbx3cx.v1.CallEntry.status:type_name -> tkd.pbx3cx.v1.CallStatus
	33, // 4: tkd.pbx3cx.v1.OnCall.profile:type_name -> tkd.idm.v1.Profile
	31, // 5: tkd.pbx3cx.v1.OnCall.until:type_name -> google.protobuf.Timestamp
	31, // 6: tkd.pbx3cx.v1.Overwrite.from:type_name -> google.protobuf.Timestamp
	31, // 7: tkd.pbx3cx.v1.Overwrite.to:type_name -> google.protobuf.Timestamp
	4,  // 8: tkd.pbx3cx.v1.Overwrite.custom:type_name -> tkd.pbx3cx.v1.CustomOverwrite
	31, // 9: tkd.pbx3cx.v1.Overwrite.created_at:type_name -> google.protobuf.Timestamp
	6,  // 10: tkd.pbx3cx.v1.Overwrite.inbound_number:type_name -> tkd.pbx3cx.v1.InboundNumber
	2,  // 11: tkd.pbx3cx.v1.GetLogsForCustomerResponse.results:type_name -> tkd.pbx3cx.v1.CallEntry
	2,  // 12: tkd.pbx3cx.v1.GetLogsForDateResponse.results:type_name -> tkd.pbx3cx.v1.CallEntry
	34, // 13: tkd.pbx3cx.v1.SearchCallLogsRequest.time_range:type_name -> tkd.common.v1.TimeRange
	35, // 14: tkd.pbx3cx.v1.SearchCallLogsRequest.customer_ref:type_name -> tkd.customer.v1.CustomerRef
	2,  // 15: tkd.pbx3cx.v1.SearchCallLogsResponse.results:type_name -> tkd.pbx3cx.v1.CallEntry
	36, // 16: tkd.pbx3cx.v1.SearchCallLogsResponse.customers:type_name -> tkd.customer.v1.Customer
	3,  // 17: tkd.pbx3cx.v1.GetOnCallResponse.on_call:type_name -> tkd.pbx3cx.v1.OnCall
	4,  // 18: tkd.pbx3cx.v1.CreateOverwriteRequest.custom:type_name -> tkd.pbx3cx.v1.CustomOverwrite
	31, // 19: tkd.pbx3cx.v1.CreateOverwriteRequest.from:type_name -> google.protobuf.Timestamp
	31, // 20: tkd.pbx3cx.v1.CreateOverwriteRequest.to:type_name -> google.protobuf.Timestamp
	5,  // 21: tkd.pbx3cx.v1.CreateOverwriteResponse.overwrite:type_name -> tkd.pbx3cx.v1.Overwrite
	31, // 22: tkd.pbx3cx.v1.DeleteOverwriteRequest.active_at:type_name -> google.protobuf.Timestamp
	21, // 23: tkd.pbx3cx.v1.DeleteOverwriteRequest.inbound_numbers:type_name -> tkd.pbx3cx.v1.InboundNumberList
	31, // 24: tkd.pbx3cx.v1.GetOverwriteRequest.active_at:type_name -> google.protobuf.Timestamp
	34, // 25: tkd.pbx3cx.v1.GetOverwriteRequest.time_range:type_name -> tkd.common.v1.TimeRange
	21, // 26: tkd.pbx3cx.v1.GetOverwriteRequest.inbound_numbers:type_name -> tkd.pbx3cx.v1.InboundNumberList
	5,  // 27: tkd.pbx3cx.v1.GetOverwriteResponse.overwrites:type_name -> tkd.pbx3cx.v1.Overwrite
	6,  // 28: tkd.pbx3cx.v1.CreateInboundNumberResponse.inbound_number:type_name -> tkd.pbx3cx.v1.InboundNumber
	6,  // 29: tkd.pbx3cx.v1.ListInboundNumberResponse.inbound_numbers:type_name -> tkd.pbx3cx.v1.InboundNumber
	37, // 30: tkd.pbx3cx.v1.UpdateInboundNumberRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 31: tkd.pbx3cx.v1.UpdateInboundNumberResponse.inbound_number:type_name -> tkd.pbx3cx.v1.InboundNumber
	7,  // 32: tkd.pbx3cx.v1.CallService.RecordCall:input_type -> tkd.pbx3cx.v1.RecordCallRequest
	14, // 33: tkd.pbx3cx.v1.CallService.GetOnCall:input_type -> tkd.pbx3cx.v1.GetOnCallRequest
	23, // 34: tkd.pbx3cx.v1.CallService.CreateInboundNumber:input_type -> tkd.pbx3cx.v1.CreateInboundNumberRequest
	29, // 35: tkd.pbx3cx.v1.CallService.UpdateInboundNumber:input_type -> tkd.pbx3cx.v1.UpdateInboundNumberRequest
	25, // 36: tkd.pbx3cx.v1.CallService.DeleteInboundNumber:input_type -> tkd.pbx3cx.v1.DeleteInboundNumberRequest
	27, // 37: tkd.pbx3cx.v1.CallService.ListInboundNumber:input_type -> tkd.pbx3cx.v1.ListInboundNumberRequest
	16, // 38: tkd.pbx3cx.v1.CallService.CreateOverwrite:input_type -> tkd.pbx3cx.v1.CreateOverwriteRequest
	18, // 39: tkd.pbx3cx.v1.CallService.DeleteOverwrite:input_type -> tkd.pbx3cx.v1.DeleteOverwriteRequest
	20, // 40: tkd.pbx3cx.v1.CallService.GetOverwrite:input_type -> tkd.pbx3cx.v1.GetOverwriteRequest
	10, // 41: tkd.pbx3cx.v1.CallService.GetLogsForDate:input_type -> tkd.pbx3cx.v1.GetLogsForDateRequest
	12, // 42: tkd.pbx3cx.v1.CallService.SearchCallLogs:input_type -> tkd.pbx3cx.v1.SearchCallLogsRequest
	8,  // 43: tkd.pbx3cx.v1.CallService.GetLogsForCustomer:input_type -> tkd.pbx3cx.v1.GetLogsForCustomerRequest
	38, // 44: tkd.pbx3cx.v1.CallService.RecordCall:output_type -> google.protobuf.Empty
	15, // 45: tkd.pbx3cx.v1.CallService.GetOnCall:output_type -> tkd.pbx3cx.v1.GetOnCallResponse
	24, // 46: tkd.pbx3cx.v1.CallService.CreateInboundNumber:output_type -> tkd.pbx3cx.v1.CreateInboundNumberResponse
	30, // 47: tkd.pbx3cx.v1.CallService.UpdateInboundNumber:output_type -> tkd.pbx3cx.v1.UpdateInboundNumberResponse
	26, // 48: tkd.pbx3cx.v1.CallService.DeleteInboundNumber:output_type -> tkd.pbx3cx.v1.DeleteInboundNumberResponse
	28, // 49: tkd.pbx3cx.v1.CallService.ListInboundNumber:output_type -> tkd.pbx3cx.v1.ListInboundNumberResponse
	17, // 50: tkd.pbx3cx.v1.CallService.CreateOverwrite:output_type -> tkd.pbx3cx.v1.CreateOverwriteResponse
	19, // 51: tkd.pbx3cx.v1.CallService.DeleteOverwrite:output_type -> tkd.pbx3cx.v1.DeleteOverwriteResponse
	22, // 52: tkd.pbx3cx.v1.CallService.GetOverwrite:output_type -> tkd.pbx3cx.v1.GetOverwriteResponse
	11, // 53: tkd.pbx3cx.v1.CallService.GetLogsForDate:output_type -> tkd.pbx3cx.v1.GetLogsForDateResponse
	13, // 54: tkd.pbx3cx.v1.CallService.SearchCallLogs:output_type -> tkd.pbx3cx.v1.SearchCallLogsResponse
	9,  // 55: tkd.pbx3cx.v1.CallService.GetLogsForCustomer:output_type -> tkd.pbx3cx.v1.GetLogsForCustomerResponse
	44, // [44:56] is the sub-list for method output_type
	32, // [32:44] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_tkd_pbx3cx_v1_calllog_proto_init() }
func file_tkd_pbx3cx_v1_calllog_proto_init() {
	if File_tkd_pbx3cx_v1_calllog_proto != nil {
		return
	}
	file_tkd_pbx3cx_v1_calllog_proto_msgTypes[3].OneofWrappers = []any{
		(*Overwrite_Custom)(nil),
		(*Overwrite_UserId)(nil),
	}
	file_tkd_pbx3cx_v1_calllog_proto_msgTypes[14].OneofWrappers = []any{
		(*CreateOverwriteRequest_Custom)(nil),
		(*CreateOverwriteRequest_UserId)(nil),
	}
	file_tkd_pbx3cx_v1_calllog_proto_msgTypes[16].OneofWrappers = []any{
		(*DeleteOverwriteRequest_OverwriteId)(nil),
		(*DeleteOverwriteRequest_ActiveAt)(nil),
	}
	file_tkd_pbx3cx_v1_calllog_proto_msgTypes[18].OneofWrappers = []any{
		(*GetOverwriteRequest_OverwriteId)(nil),
		(*GetOverwriteRequest_ActiveAt)(nil),
		(*GetOverwriteRequest_TimeRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_pbx3cx_v1_calllog_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_pbx3cx_v1_calllog_proto_goTypes,
		DependencyIndexes: file_tkd_pbx3cx_v1_calllog_proto_depIdxs,
		EnumInfos:         file_tkd_pbx3cx_v1_calllog_proto_enumTypes,
		MessageInfos:      file_tkd_pbx3cx_v1_calllog_proto_msgTypes,
	}.Build()
	File_tkd_pbx3cx_v1_calllog_proto = out.File
	file_tkd_pbx3cx_v1_calllog_proto_rawDesc = nil
	file_tkd_pbx3cx_v1_calllog_proto_goTypes = nil
	file_tkd_pbx3cx_v1_calllog_proto_depIdxs = nil
}
