// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tkd/roster/v1/workshift.proto

package rosterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Daytime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hour          int64                  `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute        int64                  `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Daytime) Reset() {
	*x = Daytime{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Daytime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Daytime) ProtoMessage() {}

func (x *Daytime) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Daytime.ProtoReflect.Descriptor instead.
func (*Daytime) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{0}
}

func (x *Daytime) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Daytime) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type WorkShift struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From               *Daytime               `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Duration           *durationpb.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Days               []int32                `protobuf:"varint,4,rep,packed,name=days,proto3" json:"days,omitempty"` // 0 = Sunday, 6 = Saturday
	Name               string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName        string                 `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OnHoliday          bool                   `protobuf:"varint,7,opt,name=on_holiday,json=onHoliday,proto3" json:"on_holiday,omitempty"`
	EligibleRoleIds    []string               `protobuf:"bytes,8,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	TimeWorth          *durationpb.Duration   `protobuf:"bytes,9,opt,name=time_worth,json=timeWorth,proto3" json:"time_worth,omitempty"`
	RequiredStaffCount int64                  `protobuf:"varint,10,opt,name=required_staff_count,json=requiredStaffCount,proto3" json:"required_staff_count,omitempty"`
	Color              string                 `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	Description        string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Order              int64                  `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`
	Tags               []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WorkShift) Reset() {
	*x = WorkShift{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkShift) ProtoMessage() {}

func (x *WorkShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkShift.ProtoReflect.Descriptor instead.
func (*WorkShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{1}
}

func (x *WorkShift) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkShift) GetFrom() *Daytime {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *WorkShift) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WorkShift) GetDays() []int32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *WorkShift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkShift) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WorkShift) GetOnHoliday() bool {
	if x != nil {
		return x.OnHoliday
	}
	return false
}

func (x *WorkShift) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *WorkShift) GetTimeWorth() *durationpb.Duration {
	if x != nil {
		return x.TimeWorth
	}
	return nil
}

func (x *WorkShift) GetRequiredStaffCount() int64 {
	if x != nil {
		return x.RequiredStaffCount
	}
	return 0
}

func (x *WorkShift) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *WorkShift) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkShift) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *WorkShift) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListWorkShiftsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkShiftsRequest) Reset() {
	*x = ListWorkShiftsRequest{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkShiftsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkShiftsRequest) ProtoMessage() {}

func (x *ListWorkShiftsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkShiftsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkShiftsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{2}
}

func (x *ListWorkShiftsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type ListWorkShiftsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkShifts    []*WorkShift           `protobuf:"bytes,1,rep,name=work_shifts,json=workShifts,proto3" json:"work_shifts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkShiftsResponse) Reset() {
	*x = ListWorkShiftsResponse{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkShiftsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkShiftsResponse) ProtoMessage() {}

func (x *ListWorkShiftsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkShiftsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkShiftsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{3}
}

func (x *ListWorkShiftsResponse) GetWorkShifts() []*WorkShift {
	if x != nil {
		return x.WorkShifts
	}
	return nil
}

type CreateWorkShiftRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	From               *Daytime               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Duration           *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Days               []int32                `protobuf:"varint,3,rep,packed,name=days,proto3" json:"days,omitempty"`
	Name               string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName        string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OnHoliday          bool                   `protobuf:"varint,6,opt,name=on_holiday,json=onHoliday,proto3" json:"on_holiday,omitempty"`
	EligibleRoleIds    []string               `protobuf:"bytes,7,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	TimeWorth          *durationpb.Duration   `protobuf:"bytes,8,opt,name=time_worth,json=timeWorth,proto3" json:"time_worth,omitempty"`
	RequiredStaffCount int64                  `protobuf:"varint,9,opt,name=required_staff_count,json=requiredStaffCount,proto3" json:"required_staff_count,omitempty"`
	Color              string                 `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Description        string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Order              int64                  `protobuf:"varint,12,opt,name=order,proto3" json:"order,omitempty"`
	Tags               []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateWorkShiftRequest) Reset() {
	*x = CreateWorkShiftRequest{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWorkShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkShiftRequest) ProtoMessage() {}

func (x *CreateWorkShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkShiftRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkShiftRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWorkShiftRequest) GetFrom() *Daytime {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CreateWorkShiftRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateWorkShiftRequest) GetDays() []int32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *CreateWorkShiftRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWorkShiftRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateWorkShiftRequest) GetOnHoliday() bool {
	if x != nil {
		return x.OnHoliday
	}
	return false
}

func (x *CreateWorkShiftRequest) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *CreateWorkShiftRequest) GetTimeWorth() *durationpb.Duration {
	if x != nil {
		return x.TimeWorth
	}
	return nil
}

func (x *CreateWorkShiftRequest) GetRequiredStaffCount() int64 {
	if x != nil {
		return x.RequiredStaffCount
	}
	return 0
}

func (x *CreateWorkShiftRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CreateWorkShiftRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWorkShiftRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CreateWorkShiftRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateWorkShiftResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkShift     *WorkShift             `protobuf:"bytes,1,opt,name=work_shift,json=workShift,proto3" json:"work_shift,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWorkShiftResponse) Reset() {
	*x = CreateWorkShiftResponse{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWorkShiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkShiftResponse) ProtoMessage() {}

func (x *CreateWorkShiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkShiftResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkShiftResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWorkShiftResponse) GetWorkShift() *WorkShift {
	if x != nil {
		return x.WorkShift
	}
	return nil
}

type WorkShiftUpdate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	From               *Daytime               `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Duration           *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Days               []int32                `protobuf:"varint,3,rep,packed,name=days,proto3" json:"days,omitempty"`
	Name               string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName        string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OnHoliday          bool                   `protobuf:"varint,6,opt,name=on_holiday,json=onHoliday,proto3" json:"on_holiday,omitempty"`
	EligibleRoleIds    []string               `protobuf:"bytes,7,rep,name=eligible_role_ids,json=eligibleRoleIds,proto3" json:"eligible_role_ids,omitempty"`
	TimeWorth          *durationpb.Duration   `protobuf:"bytes,8,opt,name=time_worth,json=timeWorth,proto3" json:"time_worth,omitempty"`
	RequiredStaffCount int64                  `protobuf:"varint,9,opt,name=required_staff_count,json=requiredStaffCount,proto3" json:"required_staff_count,omitempty"`
	Color              string                 `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Description        string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Order              int64                  `protobuf:"varint,12,opt,name=order,proto3" json:"order,omitempty"`
	Tags               []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WorkShiftUpdate) Reset() {
	*x = WorkShiftUpdate{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkShiftUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkShiftUpdate) ProtoMessage() {}

func (x *WorkShiftUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkShiftUpdate.ProtoReflect.Descriptor instead.
func (*WorkShiftUpdate) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{6}
}

func (x *WorkShiftUpdate) GetFrom() *Daytime {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *WorkShiftUpdate) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WorkShiftUpdate) GetDays() []int32 {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *WorkShiftUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkShiftUpdate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WorkShiftUpdate) GetOnHoliday() bool {
	if x != nil {
		return x.OnHoliday
	}
	return false
}

func (x *WorkShiftUpdate) GetEligibleRoleIds() []string {
	if x != nil {
		return x.EligibleRoleIds
	}
	return nil
}

func (x *WorkShiftUpdate) GetTimeWorth() *durationpb.Duration {
	if x != nil {
		return x.TimeWorth
	}
	return nil
}

func (x *WorkShiftUpdate) GetRequiredStaffCount() int64 {
	if x != nil {
		return x.RequiredStaffCount
	}
	return 0
}

func (x *WorkShiftUpdate) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *WorkShiftUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkShiftUpdate) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *WorkShiftUpdate) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateWorkShiftRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Update        *WorkShiftUpdate       `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	UpdateInPlace bool                   `protobuf:"varint,3,opt,name=update_in_place,json=updateInPlace,proto3" json:"update_in_place,omitempty"`
	WriteMask     *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=write_mask,json=writeMask,proto3" json:"write_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWorkShiftRequest) Reset() {
	*x = UpdateWorkShiftRequest{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkShiftRequest) ProtoMessage() {}

func (x *UpdateWorkShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkShiftRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkShiftRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkShiftRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWorkShiftRequest) GetUpdate() *WorkShiftUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateWorkShiftRequest) GetUpdateInPlace() bool {
	if x != nil {
		return x.UpdateInPlace
	}
	return false
}

func (x *UpdateWorkShiftRequest) GetWriteMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.WriteMask
	}
	return nil
}

type UpdateWorkShiftResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkShift     *WorkShift             `protobuf:"bytes,1,opt,name=work_shift,json=workShift,proto3" json:"work_shift,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWorkShiftResponse) Reset() {
	*x = UpdateWorkShiftResponse{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkShiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkShiftResponse) ProtoMessage() {}

func (x *UpdateWorkShiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkShiftResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkShiftResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateWorkShiftResponse) GetWorkShift() *WorkShift {
	if x != nil {
		return x.WorkShift
	}
	return nil
}

type DeleteWorkShiftRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWorkShiftRequest) Reset() {
	*x = DeleteWorkShiftRequest{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWorkShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkShiftRequest) ProtoMessage() {}

func (x *DeleteWorkShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkShiftRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkShiftRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWorkShiftRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWorkShiftResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWorkShiftResponse) Reset() {
	*x = DeleteWorkShiftResponse{}
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWorkShiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkShiftResponse) ProtoMessage() {}

func (x *DeleteWorkShiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_workshift_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkShiftResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkShiftResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_workshift_proto_rawDescGZIP(), []int{10}
}

var File_tkd_roster_v1_workshift_proto protoreflect.FileDescriptor

var file_tkd_roster_v1_workshift_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53,
	0x0a, 0x07, 0x44, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xfa, 0xf7, 0x18, 0x09, 0xc8, 0x01, 0x01,
	0x22, 0x04, 0x18, 0x18, 0x28, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xfa, 0xf7,
	0x18, 0x09, 0xc8, 0x01, 0x01, 0x22, 0x04, 0x18, 0x3b, 0x28, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x35, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x57,
	0x6f, 0x72, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x53, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x22,
	0x9b, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x3e, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0xfa, 0xf7,
	0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0xfa,
	0xf7, 0x18, 0x09, 0xc8, 0x01, 0x01, 0x1a, 0x04, 0x18, 0x06, 0x28, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x52, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x22, 0xe7, 0x03, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0xfa, 0xf7, 0x18, 0x09, 0xd0, 0x01, 0x01, 0x1a,
	0x04, 0x18, 0x06, 0x28, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x52, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8, 0x03, 0x0a, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x73, 0x12, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05,
	0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12, 0x67,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02, 0x12, 0x67, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x02,
	0x1a, 0x13, 0xba, 0x7e, 0x10, 0x0a, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0xbe, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c,
	0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x52, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x2e, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x5c, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x6b, 0x64, 0x5c, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tkd_roster_v1_workshift_proto_rawDescOnce sync.Once
	file_tkd_roster_v1_workshift_proto_rawDescData []byte
)

func file_tkd_roster_v1_workshift_proto_rawDescGZIP() []byte {
	file_tkd_roster_v1_workshift_proto_rawDescOnce.Do(func() {
		file_tkd_roster_v1_workshift_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_roster_v1_workshift_proto_rawDesc), len(file_tkd_roster_v1_workshift_proto_rawDesc)))
	})
	return file_tkd_roster_v1_workshift_proto_rawDescData
}

var file_tkd_roster_v1_workshift_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tkd_roster_v1_workshift_proto_goTypes = []any{
	(*Daytime)(nil),                 // 0: tkd.roster.v1.Daytime
	(*WorkShift)(nil),               // 1: tkd.roster.v1.WorkShift
	(*ListWorkShiftsRequest)(nil),   // 2: tkd.roster.v1.ListWorkShiftsRequest
	(*ListWorkShiftsResponse)(nil),  // 3: tkd.roster.v1.ListWorkShiftsResponse
	(*CreateWorkShiftRequest)(nil),  // 4: tkd.roster.v1.CreateWorkShiftRequest
	(*CreateWorkShiftResponse)(nil), // 5: tkd.roster.v1.CreateWorkShiftResponse
	(*WorkShiftUpdate)(nil),         // 6: tkd.roster.v1.WorkShiftUpdate
	(*UpdateWorkShiftRequest)(nil),  // 7: tkd.roster.v1.UpdateWorkShiftRequest
	(*UpdateWorkShiftResponse)(nil), // 8: tkd.roster.v1.UpdateWorkShiftResponse
	(*DeleteWorkShiftRequest)(nil),  // 9: tkd.roster.v1.DeleteWorkShiftRequest
	(*DeleteWorkShiftResponse)(nil), // 10: tkd.roster.v1.DeleteWorkShiftResponse
	(*durationpb.Duration)(nil),     // 11: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),   // 12: google.protobuf.FieldMask
}
var file_tkd_roster_v1_workshift_proto_depIdxs = []int32{
	0,  // 0: tkd.roster.v1.WorkShift.from:type_name -> tkd.roster.v1.Daytime
	11, // 1: tkd.roster.v1.WorkShift.duration:type_name -> google.protobuf.Duration
	11, // 2: tkd.roster.v1.WorkShift.time_worth:type_name -> google.protobuf.Duration
	12, // 3: tkd.roster.v1.ListWorkShiftsRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 4: tkd.roster.v1.ListWorkShiftsResponse.work_shifts:type_name -> tkd.roster.v1.WorkShift
	0,  // 5: tkd.roster.v1.CreateWorkShiftRequest.from:type_name -> tkd.roster.v1.Daytime
	11, // 6: tkd.roster.v1.CreateWorkShiftRequest.duration:type_name -> google.protobuf.Duration
	11, // 7: tkd.roster.v1.CreateWorkShiftRequest.time_worth:type_name -> google.protobuf.Duration
	1,  // 8: tkd.roster.v1.CreateWorkShiftResponse.work_shift:type_name -> tkd.roster.v1.WorkShift
	0,  // 9: tkd.roster.v1.WorkShiftUpdate.from:type_name -> tkd.roster.v1.Daytime
	11, // 10: tkd.roster.v1.WorkShiftUpdate.duration:type_name -> google.protobuf.Duration
	11, // 11: tkd.roster.v1.WorkShiftUpdate.time_worth:type_name -> google.protobuf.Duration
	6,  // 12: tkd.roster.v1.UpdateWorkShiftRequest.update:type_name -> tkd.roster.v1.WorkShiftUpdate
	12, // 13: tkd.roster.v1.UpdateWorkShiftRequest.write_mask:type_name -> google.protobuf.FieldMask
	1,  // 14: tkd.roster.v1.UpdateWorkShiftResponse.work_shift:type_name -> tkd.roster.v1.WorkShift
	2,  // 15: tkd.roster.v1.WorkShiftService.ListWorkShifts:input_type -> tkd.roster.v1.ListWorkShiftsRequest
	4,  // 16: tkd.roster.v1.WorkShiftService.CreateWorkShift:input_type -> tkd.roster.v1.CreateWorkShiftRequest
	7,  // 17: tkd.roster.v1.WorkShiftService.UpdateWorkShift:input_type -> tkd.roster.v1.UpdateWorkShiftRequest
	9,  // 18: tkd.roster.v1.WorkShiftService.DeleteWorkShift:input_type -> tkd.roster.v1.DeleteWorkShiftRequest
	3,  // 19: tkd.roster.v1.WorkShiftService.ListWorkShifts:output_type -> tkd.roster.v1.ListWorkShiftsResponse
	5,  // 20: tkd.roster.v1.WorkShiftService.CreateWorkShift:output_type -> tkd.roster.v1.CreateWorkShiftResponse
	8,  // 21: tkd.roster.v1.WorkShiftService.UpdateWorkShift:output_type -> tkd.roster.v1.UpdateWorkShiftResponse
	10, // 22: tkd.roster.v1.WorkShiftService.DeleteWorkShift:output_type -> tkd.roster.v1.DeleteWorkShiftResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_tkd_roster_v1_workshift_proto_init() }
func file_tkd_roster_v1_workshift_proto_init() {
	if File_tkd_roster_v1_workshift_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_roster_v1_workshift_proto_rawDesc), len(file_tkd_roster_v1_workshift_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_roster_v1_workshift_proto_goTypes,
		DependencyIndexes: file_tkd_roster_v1_workshift_proto_depIdxs,
		MessageInfos:      file_tkd_roster_v1_workshift_proto_msgTypes,
	}.Build()
	File_tkd_roster_v1_workshift_proto = out.File
	file_tkd_roster_v1_workshift_proto_goTypes = nil
	file_tkd_roster_v1_workshift_proto_depIdxs = nil
}
