// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tkd/roster/v1/offtime.proto

package rosterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OffTimeType int32

const (
	OffTimeType_OFF_TIME_TYPE_UNSPECIFIED OffTimeType = 0
	OffTimeType_OFF_TIME_TYPE_VACATION    OffTimeType = 1
	OffTimeType_OFF_TIME_TYPE_TIME_OFF    OffTimeType = 2
	OffTimeType_OFF_TIME_TYPE_CREDITS     OffTimeType = 3
)

// Enum value maps for OffTimeType.
var (
	OffTimeType_name = map[int32]string{
		0: "OFF_TIME_TYPE_UNSPECIFIED",
		1: "OFF_TIME_TYPE_VACATION",
		2: "OFF_TIME_TYPE_TIME_OFF",
		3: "OFF_TIME_TYPE_CREDITS",
	}
	OffTimeType_value = map[string]int32{
		"OFF_TIME_TYPE_UNSPECIFIED": 0,
		"OFF_TIME_TYPE_VACATION":    1,
		"OFF_TIME_TYPE_TIME_OFF":    2,
		"OFF_TIME_TYPE_CREDITS":     3,
	}
)

func (x OffTimeType) Enum() *OffTimeType {
	p := new(OffTimeType)
	*p = x
	return p
}

func (x OffTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_roster_v1_offtime_proto_enumTypes[0].Descriptor()
}

func (OffTimeType) Type() protoreflect.EnumType {
	return &file_tkd_roster_v1_offtime_proto_enumTypes[0]
}

func (x OffTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OffTimeType.Descriptor instead.
func (OffTimeType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{0}
}

type ApprovalRequestType int32

const (
	ApprovalRequestType_APPROVAL_REQUEST_TYPE_UNSPECIFIED ApprovalRequestType = 0
	ApprovalRequestType_APPROVAL_REQUEST_TYPE_APPROVED    ApprovalRequestType = 1
	ApprovalRequestType_APPROVAL_REQUEST_TYPE_REJECTED    ApprovalRequestType = 2
)

// Enum value maps for ApprovalRequestType.
var (
	ApprovalRequestType_name = map[int32]string{
		0: "APPROVAL_REQUEST_TYPE_UNSPECIFIED",
		1: "APPROVAL_REQUEST_TYPE_APPROVED",
		2: "APPROVAL_REQUEST_TYPE_REJECTED",
	}
	ApprovalRequestType_value = map[string]int32{
		"APPROVAL_REQUEST_TYPE_UNSPECIFIED": 0,
		"APPROVAL_REQUEST_TYPE_APPROVED":    1,
		"APPROVAL_REQUEST_TYPE_REJECTED":    2,
	}
)

func (x ApprovalRequestType) Enum() *ApprovalRequestType {
	p := new(ApprovalRequestType)
	*p = x
	return p
}

func (x ApprovalRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_roster_v1_offtime_proto_enumTypes[1].Descriptor()
}

func (ApprovalRequestType) Type() protoreflect.EnumType {
	return &file_tkd_roster_v1_offtime_proto_enumTypes[1]
}

func (x ApprovalRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalRequestType.Descriptor instead.
func (ApprovalRequestType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{1}
}

type OffTimeCosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacationDays float32              `protobuf:"fixed32,1,opt,name=vacation_days,json=vacationDays,proto3" json:"vacation_days,omitempty"`
	Duration     *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *OffTimeCosts) Reset() {
	*x = OffTimeCosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffTimeCosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffTimeCosts) ProtoMessage() {}

func (x *OffTimeCosts) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffTimeCosts.ProtoReflect.Descriptor instead.
func (*OffTimeCosts) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{0}
}

func (x *OffTimeCosts) GetVacationDays() float32 {
	if x != nil {
		return x.VacationDays
	}
	return 0
}

func (x *OffTimeCosts) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type OffTimeApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approved    bool                   `protobuf:"varint,1,opt,name=approved,proto3" json:"approved,omitempty"`
	ApprovedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	Comment     string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	ActualCosts *OffTimeCosts          `protobuf:"bytes,4,opt,name=actual_costs,json=actualCosts,proto3" json:"actual_costs,omitempty"`
}

func (x *OffTimeApproval) Reset() {
	*x = OffTimeApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffTimeApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffTimeApproval) ProtoMessage() {}

func (x *OffTimeApproval) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffTimeApproval.ProtoReflect.Descriptor instead.
func (*OffTimeApproval) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{1}
}

func (x *OffTimeApproval) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *OffTimeApproval) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *OffTimeApproval) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *OffTimeApproval) GetActualCosts() *OffTimeCosts {
	if x != nil {
		return x.ActualCosts
	}
	return nil
}

type OffTimeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserId          string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type            OffTimeType            `protobuf:"varint,5,opt,name=type,proto3,enum=tkd.roster.v1.OffTimeType" json:"type,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedByUserId string                 `protobuf:"bytes,7,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	Costs           *OffTimeCosts          `protobuf:"bytes,8,opt,name=costs,proto3" json:"costs,omitempty"`
	Approval        *OffTimeApproval       `protobuf:"bytes,9,opt,name=approval,proto3" json:"approval,omitempty"`
}

func (x *OffTimeEntry) Reset() {
	*x = OffTimeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffTimeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffTimeEntry) ProtoMessage() {}

func (x *OffTimeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffTimeEntry.ProtoReflect.Descriptor instead.
func (*OffTimeEntry) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{2}
}

func (x *OffTimeEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OffTimeEntry) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *OffTimeEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OffTimeEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OffTimeEntry) GetType() OffTimeType {
	if x != nil {
		return x.Type
	}
	return OffTimeType_OFF_TIME_TYPE_UNSPECIFIED
}

func (x *OffTimeEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OffTimeEntry) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *OffTimeEntry) GetCosts() *OffTimeCosts {
	if x != nil {
		return x.Costs
	}
	return nil
}

func (x *OffTimeEntry) GetApproval() *OffTimeApproval {
	if x != nil {
		return x.Approval
	}
	return nil
}

type OffTimeCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days     float32              `protobuf:"fixed32,1,opt,name=days,proto3" json:"days,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *OffTimeCredits) Reset() {
	*x = OffTimeCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffTimeCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffTimeCredits) ProtoMessage() {}

func (x *OffTimeCredits) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffTimeCredits.ProtoReflect.Descriptor instead.
func (*OffTimeCredits) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{3}
}

func (x *OffTimeCredits) GetDays() float32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *OffTimeCredits) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type GetOffTimeEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOffTimeEntryRequest) Reset() {
	*x = GetOffTimeEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffTimeEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffTimeEntryRequest) ProtoMessage() {}

func (x *GetOffTimeEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffTimeEntryRequest.ProtoReflect.Descriptor instead.
func (*GetOffTimeEntryRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{4}
}

func (x *GetOffTimeEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOffTimeEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *OffTimeEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *GetOffTimeEntryResponse) Reset() {
	*x = GetOffTimeEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffTimeEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffTimeEntryResponse) ProtoMessage() {}

func (x *GetOffTimeEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffTimeEntryResponse.ProtoReflect.Descriptor instead.
func (*GetOffTimeEntryResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{5}
}

func (x *GetOffTimeEntryResponse) GetEntry() *OffTimeEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type CreateOffTimeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	StaffId     string                 `protobuf:"bytes,3,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	RequestType OffTimeType            `protobuf:"varint,5,opt,name=request_type,json=requestType,proto3,enum=tkd.roster.v1.OffTimeType" json:"request_type,omitempty"` // Must not be OFF_TIME_TYPE_CREDITS
}

func (x *CreateOffTimeRequestRequest) Reset() {
	*x = CreateOffTimeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOffTimeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOffTimeRequestRequest) ProtoMessage() {}

func (x *CreateOffTimeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOffTimeRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateOffTimeRequestRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOffTimeRequestRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CreateOffTimeRequestRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateOffTimeRequestRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *CreateOffTimeRequestRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateOffTimeRequestRequest) GetRequestType() OffTimeType {
	if x != nil {
		return x.RequestType
	}
	return OffTimeType_OFF_TIME_TYPE_UNSPECIFIED
}

type CreateOffTimeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *OffTimeEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *CreateOffTimeRequestResponse) Reset() {
	*x = CreateOffTimeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOffTimeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOffTimeRequestResponse) ProtoMessage() {}

func (x *CreateOffTimeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOffTimeRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateOffTimeRequestResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOffTimeRequestResponse) GetEntry() *OffTimeEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type DeleteOffTimeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOffTimeRequestRequest) Reset() {
	*x = DeleteOffTimeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOffTimeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOffTimeRequestRequest) ProtoMessage() {}

func (x *DeleteOffTimeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOffTimeRequestRequest.ProtoReflect.Descriptor instead.
func (*DeleteOffTimeRequestRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteOffTimeRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteOffTimeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOffTimeRequestResponse) Reset() {
	*x = DeleteOffTimeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOffTimeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOffTimeRequestResponse) ProtoMessage() {}

func (x *DeleteOffTimeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOffTimeRequestResponse.ProtoReflect.Descriptor instead.
func (*DeleteOffTimeRequestResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{9}
}

type FindOffTimeRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	UserIds  []string               `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Approved *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=approved,proto3" json:"approved,omitempty"`
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *FindOffTimeRequestsRequest) Reset() {
	*x = FindOffTimeRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOffTimeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOffTimeRequestsRequest) ProtoMessage() {}

func (x *FindOffTimeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOffTimeRequestsRequest.ProtoReflect.Descriptor instead.
func (*FindOffTimeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{10}
}

func (x *FindOffTimeRequestsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FindOffTimeRequestsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FindOffTimeRequestsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *FindOffTimeRequestsRequest) GetApproved() *wrapperspb.BoolValue {
	if x != nil {
		return x.Approved
	}
	return nil
}

func (x *FindOffTimeRequestsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type FindOffTimeRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OffTimeEntry `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FindOffTimeRequestsResponse) Reset() {
	*x = FindOffTimeRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOffTimeRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOffTimeRequestsResponse) ProtoMessage() {}

func (x *FindOffTimeRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOffTimeRequestsResponse.ProtoReflect.Descriptor instead.
func (*FindOffTimeRequestsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{11}
}

func (x *FindOffTimeRequestsResponse) GetResults() []*OffTimeEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type ApproveOrRejectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment     string               `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Type        ApprovalRequestType  `protobuf:"varint,3,opt,name=type,proto3,enum=tkd.roster.v1.ApprovalRequestType" json:"type,omitempty"`
	ActualCosts *durationpb.Duration `protobuf:"bytes,4,opt,name=actual_costs,json=actualCosts,proto3" json:"actual_costs,omitempty"`
}

func (x *ApproveOrRejectRequest) Reset() {
	*x = ApproveOrRejectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveOrRejectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOrRejectRequest) ProtoMessage() {}

func (x *ApproveOrRejectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOrRejectRequest.ProtoReflect.Descriptor instead.
func (*ApproveOrRejectRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveOrRejectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApproveOrRejectRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ApproveOrRejectRequest) GetType() ApprovalRequestType {
	if x != nil {
		return x.Type
	}
	return ApprovalRequestType_APPROVAL_REQUEST_TYPE_UNSPECIFIED
}

func (x *ApproveOrRejectRequest) GetActualCosts() *durationpb.Duration {
	if x != nil {
		return x.ActualCosts
	}
	return nil
}

type ApproveOrRejectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *OffTimeEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *ApproveOrRejectResponse) Reset() {
	*x = ApproveOrRejectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveOrRejectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOrRejectResponse) ProtoMessage() {}

func (x *ApproveOrRejectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOrRejectResponse.ProtoReflect.Descriptor instead.
func (*ApproveOrRejectResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{13}
}

func (x *ApproveOrRejectResponse) GetEntry() *OffTimeEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type GetOffTimeCreditsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetOffTimeCreditsRequest) Reset() {
	*x = GetOffTimeCreditsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffTimeCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffTimeCreditsRequest) ProtoMessage() {}

func (x *GetOffTimeCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffTimeCreditsRequest.ProtoReflect.Descriptor instead.
func (*GetOffTimeCreditsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{14}
}

func (x *GetOffTimeCreditsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetOffTimeCreditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*OffTimeCredits `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetOffTimeCreditsResponse) Reset() {
	*x = GetOffTimeCreditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_offtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffTimeCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffTimeCreditsResponse) ProtoMessage() {}

func (x *GetOffTimeCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_offtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffTimeCreditsResponse.ProtoReflect.Descriptor instead.
func (*GetOffTimeCreditsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_offtime_proto_rawDescGZIP(), []int{15}
}

func (x *GetOffTimeCreditsResponse) GetResults() map[string]*OffTimeCredits {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_tkd_roster_v1_offtime_proto protoreflect.FileDescriptor

var file_tkd_roster_v1_offtime_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x66, 0x66, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74,
	0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x0c,
	0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x4f, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22,
	0xe1, 0x03, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x3a, 0x4f, 0xd2, 0x7e, 0x4c, 0x0a, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x1a, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x1a, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x31, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x91, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0xfa, 0xf7, 0x18,
	0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x40, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x38, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0xfa, 0xf7, 0x18, 0x08, 0xc8, 0x01, 0x01,
	0xb2, 0x01, 0x02, 0x40, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x36, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x84, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x54, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xca, 0x01,
	0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xfa,
	0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x35, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0xc7, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x59,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x7f, 0x0a, 0x0b, 0x4f, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x46, 0x46, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x46, 0x46, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x13, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x32, 0xd6, 0x05, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x76, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05,
	0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x76, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x73, 0x0a,
	0x13, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02,
	0x08, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xb2, 0x7e, 0x21, 0x08, 0x01, 0x12, 0x0d, 0x69, 0x64,
	0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x12, 0x27, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x42, 0xbc, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x4f, 0x66, 0x66, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65,
	0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65,
	0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x52, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x6b,
	0x64, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x6b,
	0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x6b,
	0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tkd_roster_v1_offtime_proto_rawDescOnce sync.Once
	file_tkd_roster_v1_offtime_proto_rawDescData = file_tkd_roster_v1_offtime_proto_rawDesc
)

func file_tkd_roster_v1_offtime_proto_rawDescGZIP() []byte {
	file_tkd_roster_v1_offtime_proto_rawDescOnce.Do(func() {
		file_tkd_roster_v1_offtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_roster_v1_offtime_proto_rawDescData)
	})
	return file_tkd_roster_v1_offtime_proto_rawDescData
}

var file_tkd_roster_v1_offtime_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tkd_roster_v1_offtime_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tkd_roster_v1_offtime_proto_goTypes = []interface{}{
	(OffTimeType)(0),                     // 0: tkd.roster.v1.OffTimeType
	(ApprovalRequestType)(0),             // 1: tkd.roster.v1.ApprovalRequestType
	(*OffTimeCosts)(nil),                 // 2: tkd.roster.v1.OffTimeCosts
	(*OffTimeApproval)(nil),              // 3: tkd.roster.v1.OffTimeApproval
	(*OffTimeEntry)(nil),                 // 4: tkd.roster.v1.OffTimeEntry
	(*OffTimeCredits)(nil),               // 5: tkd.roster.v1.OffTimeCredits
	(*GetOffTimeEntryRequest)(nil),       // 6: tkd.roster.v1.GetOffTimeEntryRequest
	(*GetOffTimeEntryResponse)(nil),      // 7: tkd.roster.v1.GetOffTimeEntryResponse
	(*CreateOffTimeRequestRequest)(nil),  // 8: tkd.roster.v1.CreateOffTimeRequestRequest
	(*CreateOffTimeRequestResponse)(nil), // 9: tkd.roster.v1.CreateOffTimeRequestResponse
	(*DeleteOffTimeRequestRequest)(nil),  // 10: tkd.roster.v1.DeleteOffTimeRequestRequest
	(*DeleteOffTimeRequestResponse)(nil), // 11: tkd.roster.v1.DeleteOffTimeRequestResponse
	(*FindOffTimeRequestsRequest)(nil),   // 12: tkd.roster.v1.FindOffTimeRequestsRequest
	(*FindOffTimeRequestsResponse)(nil),  // 13: tkd.roster.v1.FindOffTimeRequestsResponse
	(*ApproveOrRejectRequest)(nil),       // 14: tkd.roster.v1.ApproveOrRejectRequest
	(*ApproveOrRejectResponse)(nil),      // 15: tkd.roster.v1.ApproveOrRejectResponse
	(*GetOffTimeCreditsRequest)(nil),     // 16: tkd.roster.v1.GetOffTimeCreditsRequest
	(*GetOffTimeCreditsResponse)(nil),    // 17: tkd.roster.v1.GetOffTimeCreditsResponse
	nil,                                  // 18: tkd.roster.v1.GetOffTimeCreditsResponse.ResultsEntry
	(*durationpb.Duration)(nil),          // 19: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 20: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),         // 21: google.protobuf.BoolValue
	(*fieldmaskpb.FieldMask)(nil),        // 22: google.protobuf.FieldMask
}
var file_tkd_roster_v1_offtime_proto_depIdxs = []int32{
	19, // 0: tkd.roster.v1.OffTimeCosts.duration:type_name -> google.protobuf.Duration
	20, // 1: tkd.roster.v1.OffTimeApproval.approved_at:type_name -> google.protobuf.Timestamp
	2,  // 2: tkd.roster.v1.OffTimeApproval.actual_costs:type_name -> tkd.roster.v1.OffTimeCosts
	20, // 3: tkd.roster.v1.OffTimeEntry.from:type_name -> google.protobuf.Timestamp
	0,  // 4: tkd.roster.v1.OffTimeEntry.type:type_name -> tkd.roster.v1.OffTimeType
	20, // 5: tkd.roster.v1.OffTimeEntry.created_at:type_name -> google.protobuf.Timestamp
	2,  // 6: tkd.roster.v1.OffTimeEntry.costs:type_name -> tkd.roster.v1.OffTimeCosts
	3,  // 7: tkd.roster.v1.OffTimeEntry.approval:type_name -> tkd.roster.v1.OffTimeApproval
	19, // 8: tkd.roster.v1.OffTimeCredits.duration:type_name -> google.protobuf.Duration
	4,  // 9: tkd.roster.v1.GetOffTimeEntryResponse.entry:type_name -> tkd.roster.v1.OffTimeEntry
	20, // 10: tkd.roster.v1.CreateOffTimeRequestRequest.from:type_name -> google.protobuf.Timestamp
	20, // 11: tkd.roster.v1.CreateOffTimeRequestRequest.to:type_name -> google.protobuf.Timestamp
	0,  // 12: tkd.roster.v1.CreateOffTimeRequestRequest.request_type:type_name -> tkd.roster.v1.OffTimeType
	4,  // 13: tkd.roster.v1.CreateOffTimeRequestResponse.entry:type_name -> tkd.roster.v1.OffTimeEntry
	20, // 14: tkd.roster.v1.FindOffTimeRequestsRequest.from:type_name -> google.protobuf.Timestamp
	20, // 15: tkd.roster.v1.FindOffTimeRequestsRequest.to:type_name -> google.protobuf.Timestamp
	21, // 16: tkd.roster.v1.FindOffTimeRequestsRequest.approved:type_name -> google.protobuf.BoolValue
	22, // 17: tkd.roster.v1.FindOffTimeRequestsRequest.read_mask:type_name -> google.protobuf.FieldMask
	4,  // 18: tkd.roster.v1.FindOffTimeRequestsResponse.results:type_name -> tkd.roster.v1.OffTimeEntry
	1,  // 19: tkd.roster.v1.ApproveOrRejectRequest.type:type_name -> tkd.roster.v1.ApprovalRequestType
	19, // 20: tkd.roster.v1.ApproveOrRejectRequest.actual_costs:type_name -> google.protobuf.Duration
	4,  // 21: tkd.roster.v1.ApproveOrRejectResponse.entry:type_name -> tkd.roster.v1.OffTimeEntry
	18, // 22: tkd.roster.v1.GetOffTimeCreditsResponse.results:type_name -> tkd.roster.v1.GetOffTimeCreditsResponse.ResultsEntry
	5,  // 23: tkd.roster.v1.GetOffTimeCreditsResponse.ResultsEntry.value:type_name -> tkd.roster.v1.OffTimeCredits
	6,  // 24: tkd.roster.v1.OffTimeService.GetOffTimeEntry:input_type -> tkd.roster.v1.GetOffTimeEntryRequest
	8,  // 25: tkd.roster.v1.OffTimeService.CreateOffTimeRequest:input_type -> tkd.roster.v1.CreateOffTimeRequestRequest
	10, // 26: tkd.roster.v1.OffTimeService.DeleteOffTimeRequest:input_type -> tkd.roster.v1.DeleteOffTimeRequestRequest
	12, // 27: tkd.roster.v1.OffTimeService.FindOffTimeRequests:input_type -> tkd.roster.v1.FindOffTimeRequestsRequest
	14, // 28: tkd.roster.v1.OffTimeService.ApproveOrReject:input_type -> tkd.roster.v1.ApproveOrRejectRequest
	16, // 29: tkd.roster.v1.OffTimeService.GetOffTimeCredits:input_type -> tkd.roster.v1.GetOffTimeCreditsRequest
	7,  // 30: tkd.roster.v1.OffTimeService.GetOffTimeEntry:output_type -> tkd.roster.v1.GetOffTimeEntryResponse
	9,  // 31: tkd.roster.v1.OffTimeService.CreateOffTimeRequest:output_type -> tkd.roster.v1.CreateOffTimeRequestResponse
	11, // 32: tkd.roster.v1.OffTimeService.DeleteOffTimeRequest:output_type -> tkd.roster.v1.DeleteOffTimeRequestResponse
	13, // 33: tkd.roster.v1.OffTimeService.FindOffTimeRequests:output_type -> tkd.roster.v1.FindOffTimeRequestsResponse
	15, // 34: tkd.roster.v1.OffTimeService.ApproveOrReject:output_type -> tkd.roster.v1.ApproveOrRejectResponse
	17, // 35: tkd.roster.v1.OffTimeService.GetOffTimeCredits:output_type -> tkd.roster.v1.GetOffTimeCreditsResponse
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_tkd_roster_v1_offtime_proto_init() }
func file_tkd_roster_v1_offtime_proto_init() {
	if File_tkd_roster_v1_offtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tkd_roster_v1_offtime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffTimeCosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffTimeApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffTimeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffTimeCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffTimeEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffTimeEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOffTimeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOffTimeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOffTimeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOffTimeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOffTimeRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOffTimeRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveOrRejectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveOrRejectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffTimeCreditsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_offtime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffTimeCreditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_roster_v1_offtime_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_roster_v1_offtime_proto_goTypes,
		DependencyIndexes: file_tkd_roster_v1_offtime_proto_depIdxs,
		EnumInfos:         file_tkd_roster_v1_offtime_proto_enumTypes,
		MessageInfos:      file_tkd_roster_v1_offtime_proto_msgTypes,
	}.Build()
	File_tkd_roster_v1_offtime_proto = out.File
	file_tkd_roster_v1_offtime_proto_rawDesc = nil
	file_tkd_roster_v1_offtime_proto_goTypes = nil
	file_tkd_roster_v1_offtime_proto_depIdxs = nil
}
