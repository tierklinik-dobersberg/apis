// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/roster/v1/workshift.proto

package rosterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/roster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkShiftServiceName is the fully-qualified name of the WorkShiftService service.
	WorkShiftServiceName = "tkd.roster.v1.WorkShiftService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkShiftServiceListWorkShiftsProcedure is the fully-qualified name of the WorkShiftService's
	// ListWorkShifts RPC.
	WorkShiftServiceListWorkShiftsProcedure = "/tkd.roster.v1.WorkShiftService/ListWorkShifts"
	// WorkShiftServiceCreateWorkShiftProcedure is the fully-qualified name of the WorkShiftService's
	// CreateWorkShift RPC.
	WorkShiftServiceCreateWorkShiftProcedure = "/tkd.roster.v1.WorkShiftService/CreateWorkShift"
	// WorkShiftServiceUpdateWorkShiftProcedure is the fully-qualified name of the WorkShiftService's
	// UpdateWorkShift RPC.
	WorkShiftServiceUpdateWorkShiftProcedure = "/tkd.roster.v1.WorkShiftService/UpdateWorkShift"
	// WorkShiftServiceDeleteWorkShiftProcedure is the fully-qualified name of the WorkShiftService's
	// DeleteWorkShift RPC.
	WorkShiftServiceDeleteWorkShiftProcedure = "/tkd.roster.v1.WorkShiftService/DeleteWorkShift"
)

// WorkShiftServiceClient is a client for the tkd.roster.v1.WorkShiftService service.
type WorkShiftServiceClient interface {
	ListWorkShifts(context.Context, *connect_go.Request[v1.ListWorkShiftsRequest]) (*connect_go.Response[v1.ListWorkShiftsResponse], error)
	CreateWorkShift(context.Context, *connect_go.Request[v1.CreateWorkShiftRequest]) (*connect_go.Response[v1.CreateWorkShiftResponse], error)
	UpdateWorkShift(context.Context, *connect_go.Request[v1.UpdateWorkShiftRequest]) (*connect_go.Response[v1.UpdateWorkShiftResponse], error)
	DeleteWorkShift(context.Context, *connect_go.Request[v1.DeleteWorkShiftRequest]) (*connect_go.Response[v1.DeleteWorkShiftResponse], error)
}

// NewWorkShiftServiceClient constructs a client for the tkd.roster.v1.WorkShiftService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkShiftServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkShiftServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workShiftServiceClient{
		listWorkShifts: connect_go.NewClient[v1.ListWorkShiftsRequest, v1.ListWorkShiftsResponse](
			httpClient,
			baseURL+WorkShiftServiceListWorkShiftsProcedure,
			opts...,
		),
		createWorkShift: connect_go.NewClient[v1.CreateWorkShiftRequest, v1.CreateWorkShiftResponse](
			httpClient,
			baseURL+WorkShiftServiceCreateWorkShiftProcedure,
			opts...,
		),
		updateWorkShift: connect_go.NewClient[v1.UpdateWorkShiftRequest, v1.UpdateWorkShiftResponse](
			httpClient,
			baseURL+WorkShiftServiceUpdateWorkShiftProcedure,
			opts...,
		),
		deleteWorkShift: connect_go.NewClient[v1.DeleteWorkShiftRequest, v1.DeleteWorkShiftResponse](
			httpClient,
			baseURL+WorkShiftServiceDeleteWorkShiftProcedure,
			opts...,
		),
	}
}

// workShiftServiceClient implements WorkShiftServiceClient.
type workShiftServiceClient struct {
	listWorkShifts  *connect_go.Client[v1.ListWorkShiftsRequest, v1.ListWorkShiftsResponse]
	createWorkShift *connect_go.Client[v1.CreateWorkShiftRequest, v1.CreateWorkShiftResponse]
	updateWorkShift *connect_go.Client[v1.UpdateWorkShiftRequest, v1.UpdateWorkShiftResponse]
	deleteWorkShift *connect_go.Client[v1.DeleteWorkShiftRequest, v1.DeleteWorkShiftResponse]
}

// ListWorkShifts calls tkd.roster.v1.WorkShiftService.ListWorkShifts.
func (c *workShiftServiceClient) ListWorkShifts(ctx context.Context, req *connect_go.Request[v1.ListWorkShiftsRequest]) (*connect_go.Response[v1.ListWorkShiftsResponse], error) {
	return c.listWorkShifts.CallUnary(ctx, req)
}

// CreateWorkShift calls tkd.roster.v1.WorkShiftService.CreateWorkShift.
func (c *workShiftServiceClient) CreateWorkShift(ctx context.Context, req *connect_go.Request[v1.CreateWorkShiftRequest]) (*connect_go.Response[v1.CreateWorkShiftResponse], error) {
	return c.createWorkShift.CallUnary(ctx, req)
}

// UpdateWorkShift calls tkd.roster.v1.WorkShiftService.UpdateWorkShift.
func (c *workShiftServiceClient) UpdateWorkShift(ctx context.Context, req *connect_go.Request[v1.UpdateWorkShiftRequest]) (*connect_go.Response[v1.UpdateWorkShiftResponse], error) {
	return c.updateWorkShift.CallUnary(ctx, req)
}

// DeleteWorkShift calls tkd.roster.v1.WorkShiftService.DeleteWorkShift.
func (c *workShiftServiceClient) DeleteWorkShift(ctx context.Context, req *connect_go.Request[v1.DeleteWorkShiftRequest]) (*connect_go.Response[v1.DeleteWorkShiftResponse], error) {
	return c.deleteWorkShift.CallUnary(ctx, req)
}

// WorkShiftServiceHandler is an implementation of the tkd.roster.v1.WorkShiftService service.
type WorkShiftServiceHandler interface {
	ListWorkShifts(context.Context, *connect_go.Request[v1.ListWorkShiftsRequest]) (*connect_go.Response[v1.ListWorkShiftsResponse], error)
	CreateWorkShift(context.Context, *connect_go.Request[v1.CreateWorkShiftRequest]) (*connect_go.Response[v1.CreateWorkShiftResponse], error)
	UpdateWorkShift(context.Context, *connect_go.Request[v1.UpdateWorkShiftRequest]) (*connect_go.Response[v1.UpdateWorkShiftResponse], error)
	DeleteWorkShift(context.Context, *connect_go.Request[v1.DeleteWorkShiftRequest]) (*connect_go.Response[v1.DeleteWorkShiftResponse], error)
}

// NewWorkShiftServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkShiftServiceHandler(svc WorkShiftServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	workShiftServiceListWorkShiftsHandler := connect_go.NewUnaryHandler(
		WorkShiftServiceListWorkShiftsProcedure,
		svc.ListWorkShifts,
		opts...,
	)
	workShiftServiceCreateWorkShiftHandler := connect_go.NewUnaryHandler(
		WorkShiftServiceCreateWorkShiftProcedure,
		svc.CreateWorkShift,
		opts...,
	)
	workShiftServiceUpdateWorkShiftHandler := connect_go.NewUnaryHandler(
		WorkShiftServiceUpdateWorkShiftProcedure,
		svc.UpdateWorkShift,
		opts...,
	)
	workShiftServiceDeleteWorkShiftHandler := connect_go.NewUnaryHandler(
		WorkShiftServiceDeleteWorkShiftProcedure,
		svc.DeleteWorkShift,
		opts...,
	)
	return "/tkd.roster.v1.WorkShiftService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkShiftServiceListWorkShiftsProcedure:
			workShiftServiceListWorkShiftsHandler.ServeHTTP(w, r)
		case WorkShiftServiceCreateWorkShiftProcedure:
			workShiftServiceCreateWorkShiftHandler.ServeHTTP(w, r)
		case WorkShiftServiceUpdateWorkShiftProcedure:
			workShiftServiceUpdateWorkShiftHandler.ServeHTTP(w, r)
		case WorkShiftServiceDeleteWorkShiftProcedure:
			workShiftServiceDeleteWorkShiftHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkShiftServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkShiftServiceHandler struct{}

func (UnimplementedWorkShiftServiceHandler) ListWorkShifts(context.Context, *connect_go.Request[v1.ListWorkShiftsRequest]) (*connect_go.Response[v1.ListWorkShiftsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkShiftService.ListWorkShifts is not implemented"))
}

func (UnimplementedWorkShiftServiceHandler) CreateWorkShift(context.Context, *connect_go.Request[v1.CreateWorkShiftRequest]) (*connect_go.Response[v1.CreateWorkShiftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkShiftService.CreateWorkShift is not implemented"))
}

func (UnimplementedWorkShiftServiceHandler) UpdateWorkShift(context.Context, *connect_go.Request[v1.UpdateWorkShiftRequest]) (*connect_go.Response[v1.UpdateWorkShiftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkShiftService.UpdateWorkShift is not implemented"))
}

func (UnimplementedWorkShiftServiceHandler) DeleteWorkShift(context.Context, *connect_go.Request[v1.DeleteWorkShiftRequest]) (*connect_go.Response[v1.DeleteWorkShiftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkShiftService.DeleteWorkShift is not implemented"))
}
