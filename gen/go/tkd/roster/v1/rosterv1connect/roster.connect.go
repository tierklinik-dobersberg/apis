// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/roster/v1/roster.proto

package rosterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/roster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RosterServiceName is the fully-qualified name of the RosterService service.
	RosterServiceName = "tkd.roster.v1.RosterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RosterServiceCreateRosterTypeProcedure is the fully-qualified name of the RosterService's
	// CreateRosterType RPC.
	RosterServiceCreateRosterTypeProcedure = "/tkd.roster.v1.RosterService/CreateRosterType"
	// RosterServiceDeleteRosterTypeProcedure is the fully-qualified name of the RosterService's
	// DeleteRosterType RPC.
	RosterServiceDeleteRosterTypeProcedure = "/tkd.roster.v1.RosterService/DeleteRosterType"
	// RosterServiceListRosterTypesProcedure is the fully-qualified name of the RosterService's
	// ListRosterTypes RPC.
	RosterServiceListRosterTypesProcedure = "/tkd.roster.v1.RosterService/ListRosterTypes"
	// RosterServiceListShiftTagsProcedure is the fully-qualified name of the RosterService's
	// ListShiftTags RPC.
	RosterServiceListShiftTagsProcedure = "/tkd.roster.v1.RosterService/ListShiftTags"
	// RosterServiceSaveRosterProcedure is the fully-qualified name of the RosterService's SaveRoster
	// RPC.
	RosterServiceSaveRosterProcedure = "/tkd.roster.v1.RosterService/SaveRoster"
	// RosterServiceDeleteRosterProcedure is the fully-qualified name of the RosterService's
	// DeleteRoster RPC.
	RosterServiceDeleteRosterProcedure = "/tkd.roster.v1.RosterService/DeleteRoster"
	// RosterServiceAnalyzeWorkTimeProcedure is the fully-qualified name of the RosterService's
	// AnalyzeWorkTime RPC.
	RosterServiceAnalyzeWorkTimeProcedure = "/tkd.roster.v1.RosterService/AnalyzeWorkTime"
	// RosterServiceApproveRosterProcedure is the fully-qualified name of the RosterService's
	// ApproveRoster RPC.
	RosterServiceApproveRosterProcedure = "/tkd.roster.v1.RosterService/ApproveRoster"
	// RosterServiceGetRosterProcedure is the fully-qualified name of the RosterService's GetRoster RPC.
	RosterServiceGetRosterProcedure = "/tkd.roster.v1.RosterService/GetRoster"
	// RosterServiceGetWorkingStaffProcedure is the fully-qualified name of the RosterService's
	// GetWorkingStaff RPC.
	RosterServiceGetWorkingStaffProcedure = "/tkd.roster.v1.RosterService/GetWorkingStaff"
	// RosterServiceGetRequiredShiftsProcedure is the fully-qualified name of the RosterService's
	// GetRequiredShifts RPC.
	RosterServiceGetRequiredShiftsProcedure = "/tkd.roster.v1.RosterService/GetRequiredShifts"
	// RosterServiceSendRosterPreviewProcedure is the fully-qualified name of the RosterService's
	// SendRosterPreview RPC.
	RosterServiceSendRosterPreviewProcedure = "/tkd.roster.v1.RosterService/SendRosterPreview"
)

// RosterServiceClient is a client for the tkd.roster.v1.RosterService service.
type RosterServiceClient interface {
	CreateRosterType(context.Context, *connect_go.Request[v1.CreateRosterTypeRequest]) (*connect_go.Response[v1.CreateRosterTypeResponse], error)
	DeleteRosterType(context.Context, *connect_go.Request[v1.DeleteRosterTypeRequest]) (*connect_go.Response[v1.DeleteRosterTypeResponse], error)
	ListRosterTypes(context.Context, *connect_go.Request[v1.ListRosterTypesRequest]) (*connect_go.Response[v1.ListRosterTypesResponse], error)
	ListShiftTags(context.Context, *connect_go.Request[v1.ListShiftTagsRequest]) (*connect_go.Response[v1.ListShiftTagsResponse], error)
	// SaveRoster saves a duty roster. It may be used to initially create a new
	// roster or to save subsequent changes.
	SaveRoster(context.Context, *connect_go.Request[v1.SaveRosterRequest]) (*connect_go.Response[v1.SaveRosterResponse], error)
	// DeleteRoster deletes a roster from the internal storage. This operation
	// cannot be undone!
	DeleteRoster(context.Context, *connect_go.Request[v1.DeleteRosterRequest]) (*connect_go.Response[v1.DeleteRosterResponse], error)
	// AnalyzeWorkTime can be used to analyze the work time of users to determine
	// undertime or overtime in a given time-range.
	AnalyzeWorkTime(context.Context, *connect_go.Request[v1.AnalyzeWorkTimeRequest]) (*connect_go.Response[v1.AnalyzeWorkTimeResponse], error)
	// ApproveRoster marks a roster as approved by management.
	ApproveRoster(context.Context, *connect_go.Request[v1.ApproveRosterRequest]) (*connect_go.Response[v1.ApproveRosterResponse], error)
	// GetRoster returns a previously saved roster.
	GetRoster(context.Context, *connect_go.Request[v1.GetRosterRequest]) (*connect_go.Response[v1.GetRosterResponse], error)
	// GetWorkingStaff returns a list of user_ids that are working at the
	// date specified in GetWorkingStaffRequest. If date is unset, it defaults
	// to NOW.
	GetWorkingStaff(context.Context, *connect_go.Request[v1.GetWorkingStaffRequest]) (*connect_go.Response[v1.GetWorkingStaffResponse], error)
	GetRequiredShifts(context.Context, *connect_go.Request[v1.GetRequiredShiftsRequest]) (*connect_go.Response[v1.GetRequiredShiftsResponse], error)
	SendRosterPreview(context.Context, *connect_go.Request[v1.SendRosterPreviewRequest]) (*connect_go.Response[v1.SendRosterPreviewResponse], error)
}

// NewRosterServiceClient constructs a client for the tkd.roster.v1.RosterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRosterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RosterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rosterServiceClient{
		createRosterType: connect_go.NewClient[v1.CreateRosterTypeRequest, v1.CreateRosterTypeResponse](
			httpClient,
			baseURL+RosterServiceCreateRosterTypeProcedure,
			opts...,
		),
		deleteRosterType: connect_go.NewClient[v1.DeleteRosterTypeRequest, v1.DeleteRosterTypeResponse](
			httpClient,
			baseURL+RosterServiceDeleteRosterTypeProcedure,
			opts...,
		),
		listRosterTypes: connect_go.NewClient[v1.ListRosterTypesRequest, v1.ListRosterTypesResponse](
			httpClient,
			baseURL+RosterServiceListRosterTypesProcedure,
			opts...,
		),
		listShiftTags: connect_go.NewClient[v1.ListShiftTagsRequest, v1.ListShiftTagsResponse](
			httpClient,
			baseURL+RosterServiceListShiftTagsProcedure,
			opts...,
		),
		saveRoster: connect_go.NewClient[v1.SaveRosterRequest, v1.SaveRosterResponse](
			httpClient,
			baseURL+RosterServiceSaveRosterProcedure,
			opts...,
		),
		deleteRoster: connect_go.NewClient[v1.DeleteRosterRequest, v1.DeleteRosterResponse](
			httpClient,
			baseURL+RosterServiceDeleteRosterProcedure,
			opts...,
		),
		analyzeWorkTime: connect_go.NewClient[v1.AnalyzeWorkTimeRequest, v1.AnalyzeWorkTimeResponse](
			httpClient,
			baseURL+RosterServiceAnalyzeWorkTimeProcedure,
			opts...,
		),
		approveRoster: connect_go.NewClient[v1.ApproveRosterRequest, v1.ApproveRosterResponse](
			httpClient,
			baseURL+RosterServiceApproveRosterProcedure,
			opts...,
		),
		getRoster: connect_go.NewClient[v1.GetRosterRequest, v1.GetRosterResponse](
			httpClient,
			baseURL+RosterServiceGetRosterProcedure,
			opts...,
		),
		getWorkingStaff: connect_go.NewClient[v1.GetWorkingStaffRequest, v1.GetWorkingStaffResponse](
			httpClient,
			baseURL+RosterServiceGetWorkingStaffProcedure,
			opts...,
		),
		getRequiredShifts: connect_go.NewClient[v1.GetRequiredShiftsRequest, v1.GetRequiredShiftsResponse](
			httpClient,
			baseURL+RosterServiceGetRequiredShiftsProcedure,
			opts...,
		),
		sendRosterPreview: connect_go.NewClient[v1.SendRosterPreviewRequest, v1.SendRosterPreviewResponse](
			httpClient,
			baseURL+RosterServiceSendRosterPreviewProcedure,
			opts...,
		),
	}
}

// rosterServiceClient implements RosterServiceClient.
type rosterServiceClient struct {
	createRosterType  *connect_go.Client[v1.CreateRosterTypeRequest, v1.CreateRosterTypeResponse]
	deleteRosterType  *connect_go.Client[v1.DeleteRosterTypeRequest, v1.DeleteRosterTypeResponse]
	listRosterTypes   *connect_go.Client[v1.ListRosterTypesRequest, v1.ListRosterTypesResponse]
	listShiftTags     *connect_go.Client[v1.ListShiftTagsRequest, v1.ListShiftTagsResponse]
	saveRoster        *connect_go.Client[v1.SaveRosterRequest, v1.SaveRosterResponse]
	deleteRoster      *connect_go.Client[v1.DeleteRosterRequest, v1.DeleteRosterResponse]
	analyzeWorkTime   *connect_go.Client[v1.AnalyzeWorkTimeRequest, v1.AnalyzeWorkTimeResponse]
	approveRoster     *connect_go.Client[v1.ApproveRosterRequest, v1.ApproveRosterResponse]
	getRoster         *connect_go.Client[v1.GetRosterRequest, v1.GetRosterResponse]
	getWorkingStaff   *connect_go.Client[v1.GetWorkingStaffRequest, v1.GetWorkingStaffResponse]
	getRequiredShifts *connect_go.Client[v1.GetRequiredShiftsRequest, v1.GetRequiredShiftsResponse]
	sendRosterPreview *connect_go.Client[v1.SendRosterPreviewRequest, v1.SendRosterPreviewResponse]
}

// CreateRosterType calls tkd.roster.v1.RosterService.CreateRosterType.
func (c *rosterServiceClient) CreateRosterType(ctx context.Context, req *connect_go.Request[v1.CreateRosterTypeRequest]) (*connect_go.Response[v1.CreateRosterTypeResponse], error) {
	return c.createRosterType.CallUnary(ctx, req)
}

// DeleteRosterType calls tkd.roster.v1.RosterService.DeleteRosterType.
func (c *rosterServiceClient) DeleteRosterType(ctx context.Context, req *connect_go.Request[v1.DeleteRosterTypeRequest]) (*connect_go.Response[v1.DeleteRosterTypeResponse], error) {
	return c.deleteRosterType.CallUnary(ctx, req)
}

// ListRosterTypes calls tkd.roster.v1.RosterService.ListRosterTypes.
func (c *rosterServiceClient) ListRosterTypes(ctx context.Context, req *connect_go.Request[v1.ListRosterTypesRequest]) (*connect_go.Response[v1.ListRosterTypesResponse], error) {
	return c.listRosterTypes.CallUnary(ctx, req)
}

// ListShiftTags calls tkd.roster.v1.RosterService.ListShiftTags.
func (c *rosterServiceClient) ListShiftTags(ctx context.Context, req *connect_go.Request[v1.ListShiftTagsRequest]) (*connect_go.Response[v1.ListShiftTagsResponse], error) {
	return c.listShiftTags.CallUnary(ctx, req)
}

// SaveRoster calls tkd.roster.v1.RosterService.SaveRoster.
func (c *rosterServiceClient) SaveRoster(ctx context.Context, req *connect_go.Request[v1.SaveRosterRequest]) (*connect_go.Response[v1.SaveRosterResponse], error) {
	return c.saveRoster.CallUnary(ctx, req)
}

// DeleteRoster calls tkd.roster.v1.RosterService.DeleteRoster.
func (c *rosterServiceClient) DeleteRoster(ctx context.Context, req *connect_go.Request[v1.DeleteRosterRequest]) (*connect_go.Response[v1.DeleteRosterResponse], error) {
	return c.deleteRoster.CallUnary(ctx, req)
}

// AnalyzeWorkTime calls tkd.roster.v1.RosterService.AnalyzeWorkTime.
func (c *rosterServiceClient) AnalyzeWorkTime(ctx context.Context, req *connect_go.Request[v1.AnalyzeWorkTimeRequest]) (*connect_go.Response[v1.AnalyzeWorkTimeResponse], error) {
	return c.analyzeWorkTime.CallUnary(ctx, req)
}

// ApproveRoster calls tkd.roster.v1.RosterService.ApproveRoster.
func (c *rosterServiceClient) ApproveRoster(ctx context.Context, req *connect_go.Request[v1.ApproveRosterRequest]) (*connect_go.Response[v1.ApproveRosterResponse], error) {
	return c.approveRoster.CallUnary(ctx, req)
}

// GetRoster calls tkd.roster.v1.RosterService.GetRoster.
func (c *rosterServiceClient) GetRoster(ctx context.Context, req *connect_go.Request[v1.GetRosterRequest]) (*connect_go.Response[v1.GetRosterResponse], error) {
	return c.getRoster.CallUnary(ctx, req)
}

// GetWorkingStaff calls tkd.roster.v1.RosterService.GetWorkingStaff.
func (c *rosterServiceClient) GetWorkingStaff(ctx context.Context, req *connect_go.Request[v1.GetWorkingStaffRequest]) (*connect_go.Response[v1.GetWorkingStaffResponse], error) {
	return c.getWorkingStaff.CallUnary(ctx, req)
}

// GetRequiredShifts calls tkd.roster.v1.RosterService.GetRequiredShifts.
func (c *rosterServiceClient) GetRequiredShifts(ctx context.Context, req *connect_go.Request[v1.GetRequiredShiftsRequest]) (*connect_go.Response[v1.GetRequiredShiftsResponse], error) {
	return c.getRequiredShifts.CallUnary(ctx, req)
}

// SendRosterPreview calls tkd.roster.v1.RosterService.SendRosterPreview.
func (c *rosterServiceClient) SendRosterPreview(ctx context.Context, req *connect_go.Request[v1.SendRosterPreviewRequest]) (*connect_go.Response[v1.SendRosterPreviewResponse], error) {
	return c.sendRosterPreview.CallUnary(ctx, req)
}

// RosterServiceHandler is an implementation of the tkd.roster.v1.RosterService service.
type RosterServiceHandler interface {
	CreateRosterType(context.Context, *connect_go.Request[v1.CreateRosterTypeRequest]) (*connect_go.Response[v1.CreateRosterTypeResponse], error)
	DeleteRosterType(context.Context, *connect_go.Request[v1.DeleteRosterTypeRequest]) (*connect_go.Response[v1.DeleteRosterTypeResponse], error)
	ListRosterTypes(context.Context, *connect_go.Request[v1.ListRosterTypesRequest]) (*connect_go.Response[v1.ListRosterTypesResponse], error)
	ListShiftTags(context.Context, *connect_go.Request[v1.ListShiftTagsRequest]) (*connect_go.Response[v1.ListShiftTagsResponse], error)
	// SaveRoster saves a duty roster. It may be used to initially create a new
	// roster or to save subsequent changes.
	SaveRoster(context.Context, *connect_go.Request[v1.SaveRosterRequest]) (*connect_go.Response[v1.SaveRosterResponse], error)
	// DeleteRoster deletes a roster from the internal storage. This operation
	// cannot be undone!
	DeleteRoster(context.Context, *connect_go.Request[v1.DeleteRosterRequest]) (*connect_go.Response[v1.DeleteRosterResponse], error)
	// AnalyzeWorkTime can be used to analyze the work time of users to determine
	// undertime or overtime in a given time-range.
	AnalyzeWorkTime(context.Context, *connect_go.Request[v1.AnalyzeWorkTimeRequest]) (*connect_go.Response[v1.AnalyzeWorkTimeResponse], error)
	// ApproveRoster marks a roster as approved by management.
	ApproveRoster(context.Context, *connect_go.Request[v1.ApproveRosterRequest]) (*connect_go.Response[v1.ApproveRosterResponse], error)
	// GetRoster returns a previously saved roster.
	GetRoster(context.Context, *connect_go.Request[v1.GetRosterRequest]) (*connect_go.Response[v1.GetRosterResponse], error)
	// GetWorkingStaff returns a list of user_ids that are working at the
	// date specified in GetWorkingStaffRequest. If date is unset, it defaults
	// to NOW.
	GetWorkingStaff(context.Context, *connect_go.Request[v1.GetWorkingStaffRequest]) (*connect_go.Response[v1.GetWorkingStaffResponse], error)
	GetRequiredShifts(context.Context, *connect_go.Request[v1.GetRequiredShiftsRequest]) (*connect_go.Response[v1.GetRequiredShiftsResponse], error)
	SendRosterPreview(context.Context, *connect_go.Request[v1.SendRosterPreviewRequest]) (*connect_go.Response[v1.SendRosterPreviewResponse], error)
}

// NewRosterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRosterServiceHandler(svc RosterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	rosterServiceCreateRosterTypeHandler := connect_go.NewUnaryHandler(
		RosterServiceCreateRosterTypeProcedure,
		svc.CreateRosterType,
		opts...,
	)
	rosterServiceDeleteRosterTypeHandler := connect_go.NewUnaryHandler(
		RosterServiceDeleteRosterTypeProcedure,
		svc.DeleteRosterType,
		opts...,
	)
	rosterServiceListRosterTypesHandler := connect_go.NewUnaryHandler(
		RosterServiceListRosterTypesProcedure,
		svc.ListRosterTypes,
		opts...,
	)
	rosterServiceListShiftTagsHandler := connect_go.NewUnaryHandler(
		RosterServiceListShiftTagsProcedure,
		svc.ListShiftTags,
		opts...,
	)
	rosterServiceSaveRosterHandler := connect_go.NewUnaryHandler(
		RosterServiceSaveRosterProcedure,
		svc.SaveRoster,
		opts...,
	)
	rosterServiceDeleteRosterHandler := connect_go.NewUnaryHandler(
		RosterServiceDeleteRosterProcedure,
		svc.DeleteRoster,
		opts...,
	)
	rosterServiceAnalyzeWorkTimeHandler := connect_go.NewUnaryHandler(
		RosterServiceAnalyzeWorkTimeProcedure,
		svc.AnalyzeWorkTime,
		opts...,
	)
	rosterServiceApproveRosterHandler := connect_go.NewUnaryHandler(
		RosterServiceApproveRosterProcedure,
		svc.ApproveRoster,
		opts...,
	)
	rosterServiceGetRosterHandler := connect_go.NewUnaryHandler(
		RosterServiceGetRosterProcedure,
		svc.GetRoster,
		opts...,
	)
	rosterServiceGetWorkingStaffHandler := connect_go.NewUnaryHandler(
		RosterServiceGetWorkingStaffProcedure,
		svc.GetWorkingStaff,
		opts...,
	)
	rosterServiceGetRequiredShiftsHandler := connect_go.NewUnaryHandler(
		RosterServiceGetRequiredShiftsProcedure,
		svc.GetRequiredShifts,
		opts...,
	)
	rosterServiceSendRosterPreviewHandler := connect_go.NewUnaryHandler(
		RosterServiceSendRosterPreviewProcedure,
		svc.SendRosterPreview,
		opts...,
	)
	return "/tkd.roster.v1.RosterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RosterServiceCreateRosterTypeProcedure:
			rosterServiceCreateRosterTypeHandler.ServeHTTP(w, r)
		case RosterServiceDeleteRosterTypeProcedure:
			rosterServiceDeleteRosterTypeHandler.ServeHTTP(w, r)
		case RosterServiceListRosterTypesProcedure:
			rosterServiceListRosterTypesHandler.ServeHTTP(w, r)
		case RosterServiceListShiftTagsProcedure:
			rosterServiceListShiftTagsHandler.ServeHTTP(w, r)
		case RosterServiceSaveRosterProcedure:
			rosterServiceSaveRosterHandler.ServeHTTP(w, r)
		case RosterServiceDeleteRosterProcedure:
			rosterServiceDeleteRosterHandler.ServeHTTP(w, r)
		case RosterServiceAnalyzeWorkTimeProcedure:
			rosterServiceAnalyzeWorkTimeHandler.ServeHTTP(w, r)
		case RosterServiceApproveRosterProcedure:
			rosterServiceApproveRosterHandler.ServeHTTP(w, r)
		case RosterServiceGetRosterProcedure:
			rosterServiceGetRosterHandler.ServeHTTP(w, r)
		case RosterServiceGetWorkingStaffProcedure:
			rosterServiceGetWorkingStaffHandler.ServeHTTP(w, r)
		case RosterServiceGetRequiredShiftsProcedure:
			rosterServiceGetRequiredShiftsHandler.ServeHTTP(w, r)
		case RosterServiceSendRosterPreviewProcedure:
			rosterServiceSendRosterPreviewHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRosterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRosterServiceHandler struct{}

func (UnimplementedRosterServiceHandler) CreateRosterType(context.Context, *connect_go.Request[v1.CreateRosterTypeRequest]) (*connect_go.Response[v1.CreateRosterTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.CreateRosterType is not implemented"))
}

func (UnimplementedRosterServiceHandler) DeleteRosterType(context.Context, *connect_go.Request[v1.DeleteRosterTypeRequest]) (*connect_go.Response[v1.DeleteRosterTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.DeleteRosterType is not implemented"))
}

func (UnimplementedRosterServiceHandler) ListRosterTypes(context.Context, *connect_go.Request[v1.ListRosterTypesRequest]) (*connect_go.Response[v1.ListRosterTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.ListRosterTypes is not implemented"))
}

func (UnimplementedRosterServiceHandler) ListShiftTags(context.Context, *connect_go.Request[v1.ListShiftTagsRequest]) (*connect_go.Response[v1.ListShiftTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.ListShiftTags is not implemented"))
}

func (UnimplementedRosterServiceHandler) SaveRoster(context.Context, *connect_go.Request[v1.SaveRosterRequest]) (*connect_go.Response[v1.SaveRosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.SaveRoster is not implemented"))
}

func (UnimplementedRosterServiceHandler) DeleteRoster(context.Context, *connect_go.Request[v1.DeleteRosterRequest]) (*connect_go.Response[v1.DeleteRosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.DeleteRoster is not implemented"))
}

func (UnimplementedRosterServiceHandler) AnalyzeWorkTime(context.Context, *connect_go.Request[v1.AnalyzeWorkTimeRequest]) (*connect_go.Response[v1.AnalyzeWorkTimeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.AnalyzeWorkTime is not implemented"))
}

func (UnimplementedRosterServiceHandler) ApproveRoster(context.Context, *connect_go.Request[v1.ApproveRosterRequest]) (*connect_go.Response[v1.ApproveRosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.ApproveRoster is not implemented"))
}

func (UnimplementedRosterServiceHandler) GetRoster(context.Context, *connect_go.Request[v1.GetRosterRequest]) (*connect_go.Response[v1.GetRosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.GetRoster is not implemented"))
}

func (UnimplementedRosterServiceHandler) GetWorkingStaff(context.Context, *connect_go.Request[v1.GetWorkingStaffRequest]) (*connect_go.Response[v1.GetWorkingStaffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.GetWorkingStaff is not implemented"))
}

func (UnimplementedRosterServiceHandler) GetRequiredShifts(context.Context, *connect_go.Request[v1.GetRequiredShiftsRequest]) (*connect_go.Response[v1.GetRequiredShiftsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.GetRequiredShifts is not implemented"))
}

func (UnimplementedRosterServiceHandler) SendRosterPreview(context.Context, *connect_go.Request[v1.SendRosterPreviewRequest]) (*connect_go.Response[v1.SendRosterPreviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.RosterService.SendRosterPreview is not implemented"))
}
