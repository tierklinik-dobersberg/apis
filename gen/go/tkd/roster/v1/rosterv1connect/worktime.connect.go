// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/roster/v1/worktime.proto

package rosterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/roster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkTimeServiceName is the fully-qualified name of the WorkTimeService service.
	WorkTimeServiceName = "tkd.roster.v1.WorkTimeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkTimeServiceSetWorkTimeProcedure is the fully-qualified name of the WorkTimeService's
	// SetWorkTime RPC.
	WorkTimeServiceSetWorkTimeProcedure = "/tkd.roster.v1.WorkTimeService/SetWorkTime"
	// WorkTimeServiceGetWorkTimeProcedure is the fully-qualified name of the WorkTimeService's
	// GetWorkTime RPC.
	WorkTimeServiceGetWorkTimeProcedure = "/tkd.roster.v1.WorkTimeService/GetWorkTime"
	// WorkTimeServiceGetVacationCreditsLeftProcedure is the fully-qualified name of the
	// WorkTimeService's GetVacationCreditsLeft RPC.
	WorkTimeServiceGetVacationCreditsLeftProcedure = "/tkd.roster.v1.WorkTimeService/GetVacationCreditsLeft"
)

// WorkTimeServiceClient is a client for the tkd.roster.v1.WorkTimeService service.
type WorkTimeServiceClient interface {
	SetWorkTime(context.Context, *connect_go.Request[v1.SetWorkTimeRequest]) (*connect_go.Response[v1.SetWorkTimeResponse], error)
	GetWorkTime(context.Context, *connect_go.Request[v1.GetWorkTimeRequest]) (*connect_go.Response[v1.GetWorkTimeResponse], error)
	GetVacationCreditsLeft(context.Context, *connect_go.Request[v1.GetVacationCreditsLeftRequest]) (*connect_go.Response[v1.GetVacationCreditsLeftResponse], error)
}

// NewWorkTimeServiceClient constructs a client for the tkd.roster.v1.WorkTimeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkTimeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkTimeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workTimeServiceClient{
		setWorkTime: connect_go.NewClient[v1.SetWorkTimeRequest, v1.SetWorkTimeResponse](
			httpClient,
			baseURL+WorkTimeServiceSetWorkTimeProcedure,
			opts...,
		),
		getWorkTime: connect_go.NewClient[v1.GetWorkTimeRequest, v1.GetWorkTimeResponse](
			httpClient,
			baseURL+WorkTimeServiceGetWorkTimeProcedure,
			opts...,
		),
		getVacationCreditsLeft: connect_go.NewClient[v1.GetVacationCreditsLeftRequest, v1.GetVacationCreditsLeftResponse](
			httpClient,
			baseURL+WorkTimeServiceGetVacationCreditsLeftProcedure,
			opts...,
		),
	}
}

// workTimeServiceClient implements WorkTimeServiceClient.
type workTimeServiceClient struct {
	setWorkTime            *connect_go.Client[v1.SetWorkTimeRequest, v1.SetWorkTimeResponse]
	getWorkTime            *connect_go.Client[v1.GetWorkTimeRequest, v1.GetWorkTimeResponse]
	getVacationCreditsLeft *connect_go.Client[v1.GetVacationCreditsLeftRequest, v1.GetVacationCreditsLeftResponse]
}

// SetWorkTime calls tkd.roster.v1.WorkTimeService.SetWorkTime.
func (c *workTimeServiceClient) SetWorkTime(ctx context.Context, req *connect_go.Request[v1.SetWorkTimeRequest]) (*connect_go.Response[v1.SetWorkTimeResponse], error) {
	return c.setWorkTime.CallUnary(ctx, req)
}

// GetWorkTime calls tkd.roster.v1.WorkTimeService.GetWorkTime.
func (c *workTimeServiceClient) GetWorkTime(ctx context.Context, req *connect_go.Request[v1.GetWorkTimeRequest]) (*connect_go.Response[v1.GetWorkTimeResponse], error) {
	return c.getWorkTime.CallUnary(ctx, req)
}

// GetVacationCreditsLeft calls tkd.roster.v1.WorkTimeService.GetVacationCreditsLeft.
func (c *workTimeServiceClient) GetVacationCreditsLeft(ctx context.Context, req *connect_go.Request[v1.GetVacationCreditsLeftRequest]) (*connect_go.Response[v1.GetVacationCreditsLeftResponse], error) {
	return c.getVacationCreditsLeft.CallUnary(ctx, req)
}

// WorkTimeServiceHandler is an implementation of the tkd.roster.v1.WorkTimeService service.
type WorkTimeServiceHandler interface {
	SetWorkTime(context.Context, *connect_go.Request[v1.SetWorkTimeRequest]) (*connect_go.Response[v1.SetWorkTimeResponse], error)
	GetWorkTime(context.Context, *connect_go.Request[v1.GetWorkTimeRequest]) (*connect_go.Response[v1.GetWorkTimeResponse], error)
	GetVacationCreditsLeft(context.Context, *connect_go.Request[v1.GetVacationCreditsLeftRequest]) (*connect_go.Response[v1.GetVacationCreditsLeftResponse], error)
}

// NewWorkTimeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkTimeServiceHandler(svc WorkTimeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	workTimeServiceSetWorkTimeHandler := connect_go.NewUnaryHandler(
		WorkTimeServiceSetWorkTimeProcedure,
		svc.SetWorkTime,
		opts...,
	)
	workTimeServiceGetWorkTimeHandler := connect_go.NewUnaryHandler(
		WorkTimeServiceGetWorkTimeProcedure,
		svc.GetWorkTime,
		opts...,
	)
	workTimeServiceGetVacationCreditsLeftHandler := connect_go.NewUnaryHandler(
		WorkTimeServiceGetVacationCreditsLeftProcedure,
		svc.GetVacationCreditsLeft,
		opts...,
	)
	return "/tkd.roster.v1.WorkTimeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkTimeServiceSetWorkTimeProcedure:
			workTimeServiceSetWorkTimeHandler.ServeHTTP(w, r)
		case WorkTimeServiceGetWorkTimeProcedure:
			workTimeServiceGetWorkTimeHandler.ServeHTTP(w, r)
		case WorkTimeServiceGetVacationCreditsLeftProcedure:
			workTimeServiceGetVacationCreditsLeftHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkTimeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkTimeServiceHandler struct{}

func (UnimplementedWorkTimeServiceHandler) SetWorkTime(context.Context, *connect_go.Request[v1.SetWorkTimeRequest]) (*connect_go.Response[v1.SetWorkTimeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkTimeService.SetWorkTime is not implemented"))
}

func (UnimplementedWorkTimeServiceHandler) GetWorkTime(context.Context, *connect_go.Request[v1.GetWorkTimeRequest]) (*connect_go.Response[v1.GetWorkTimeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkTimeService.GetWorkTime is not implemented"))
}

func (UnimplementedWorkTimeServiceHandler) GetVacationCreditsLeft(context.Context, *connect_go.Request[v1.GetVacationCreditsLeftRequest]) (*connect_go.Response[v1.GetVacationCreditsLeftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.roster.v1.WorkTimeService.GetVacationCreditsLeft is not implemented"))
}
