// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tkd/roster/v1/roster.proto

package rosterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlannedShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedUserIds []string               `protobuf:"bytes,1,rep,name=assigned_user_ids,json=assignedUserIds,proto3" json:"assigned_user_ids,omitempty"`
	WorkShiftId     string                 `protobuf:"bytes,2,opt,name=work_shift_id,json=workShiftId,proto3" json:"work_shift_id,omitempty"`
	IsHoliday       bool                   `protobuf:"varint,3,opt,name=is_holiday,json=isHoliday,proto3" json:"is_holiday,omitempty"`
	IsWeekend       bool                   `protobuf:"varint,4,opt,name=is_weekend,json=isWeekend,proto3" json:"is_weekend,omitempty"`
	From            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	TimeWorth       *durationpb.Duration   `protobuf:"bytes,7,opt,name=time_worth,json=timeWorth,proto3" json:"time_worth,omitempty"`
	Shift           *WorkShift             `protobuf:"bytes,8,opt,name=shift,proto3" json:"shift,omitempty"`
	EligibleUserIds []string               `protobuf:"bytes,9,rep,name=eligible_user_ids,json=eligibleUserIds,proto3" json:"eligible_user_ids,omitempty"`
	ReadMask        *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *PlannedShift) Reset() {
	*x = PlannedShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlannedShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedShift) ProtoMessage() {}

func (x *PlannedShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedShift.ProtoReflect.Descriptor instead.
func (*PlannedShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{0}
}

func (x *PlannedShift) GetAssignedUserIds() []string {
	if x != nil {
		return x.AssignedUserIds
	}
	return nil
}

func (x *PlannedShift) GetWorkShiftId() string {
	if x != nil {
		return x.WorkShiftId
	}
	return ""
}

func (x *PlannedShift) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

func (x *PlannedShift) GetIsWeekend() bool {
	if x != nil {
		return x.IsWeekend
	}
	return false
}

func (x *PlannedShift) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PlannedShift) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *PlannedShift) GetTimeWorth() *durationpb.Duration {
	if x != nil {
		return x.TimeWorth
	}
	return nil
}

func (x *PlannedShift) GetShift() *WorkShift {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *PlannedShift) GetEligibleUserIds() []string {
	if x != nil {
		return x.EligibleUserIds
	}
	return nil
}

func (x *PlannedShift) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type RosterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Month          int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Year           int64                  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Approved       bool                   `protobuf:"varint,4,opt,name=approved,proto3" json:"approved,omitempty"`
	ApprovedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	LastModifiedBy string                 `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RosterMeta) Reset() {
	*x = RosterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterMeta) ProtoMessage() {}

func (x *RosterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterMeta.ProtoReflect.Descriptor instead.
func (*RosterMeta) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{1}
}

func (x *RosterMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RosterMeta) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *RosterMeta) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RosterMeta) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *RosterMeta) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *RosterMeta) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *RosterMeta) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RosterMeta) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type WorkTimeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimePerWeek      *durationpb.Duration `protobuf:"bytes,1,opt,name=time_per_week,json=timePerWeek,proto3" json:"time_per_week,omitempty"`
	ExpectedWorkTime *durationpb.Duration `protobuf:"bytes,2,opt,name=expected_work_time,json=expectedWorkTime,proto3" json:"expected_work_time,omitempty"`
	PlannedWorkTime  *durationpb.Duration `protobuf:"bytes,3,opt,name=planned_work_time,json=plannedWorkTime,proto3" json:"planned_work_time,omitempty"`
}

func (x *WorkTimeStatus) Reset() {
	*x = WorkTimeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeStatus) ProtoMessage() {}

func (x *WorkTimeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeStatus.ProtoReflect.Descriptor instead.
func (*WorkTimeStatus) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{2}
}

func (x *WorkTimeStatus) GetTimePerWeek() *durationpb.Duration {
	if x != nil {
		return x.TimePerWeek
	}
	return nil
}

func (x *WorkTimeStatus) GetExpectedWorkTime() *durationpb.Duration {
	if x != nil {
		return x.ExpectedWorkTime
	}
	return nil
}

func (x *WorkTimeStatus) GetPlannedWorkTime() *durationpb.Duration {
	if x != nil {
		return x.PlannedWorkTime
	}
	return nil
}

type StartSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *StartSessionRequest) Reset() {
	*x = StartSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionRequest) ProtoMessage() {}

func (x *StartSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionRequest.ProtoReflect.Descriptor instead.
func (*StartSessionRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{3}
}

func (x *StartSessionRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *StartSessionRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type StartSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta          *RosterMeta     `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	PlannedShifts []*PlannedShift `protobuf:"bytes,2,rep,name=planned_shifts,json=plannedShifts,proto3" json:"planned_shifts,omitempty"`
	ActiveUsers   []string        `protobuf:"bytes,3,rep,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"`
}

func (x *StartSessionResponse) Reset() {
	*x = StartSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionResponse) ProtoMessage() {}

func (x *StartSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionResponse.ProtoReflect.Descriptor instead.
func (*StartSessionResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{4}
}

func (x *StartSessionResponse) GetMeta() *RosterMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *StartSessionResponse) GetPlannedShifts() []*PlannedShift {
	if x != nil {
		return x.PlannedShifts
	}
	return nil
}

func (x *StartSessionResponse) GetActiveUsers() []string {
	if x != nil {
		return x.ActiveUsers
	}
	return nil
}

type AssignUserToShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShiftId string                 `protobuf:"bytes,2,opt,name=shift_id,json=shiftId,proto3" json:"shift_id,omitempty"`
	From    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *AssignUserToShift) Reset() {
	*x = AssignUserToShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserToShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserToShift) ProtoMessage() {}

func (x *AssignUserToShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserToShift.ProtoReflect.Descriptor instead.
func (*AssignUserToShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{5}
}

func (x *AssignUserToShift) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignUserToShift) GetShiftId() string {
	if x != nil {
		return x.ShiftId
	}
	return ""
}

func (x *AssignUserToShift) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AssignUserToShift) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type UnassignUserFromShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShiftId string                 `protobuf:"bytes,2,opt,name=shift_id,json=shiftId,proto3" json:"shift_id,omitempty"`
	From    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *UnassignUserFromShift) Reset() {
	*x = UnassignUserFromShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignUserFromShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignUserFromShift) ProtoMessage() {}

func (x *UnassignUserFromShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignUserFromShift.ProtoReflect.Descriptor instead.
func (*UnassignUserFromShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{6}
}

func (x *UnassignUserFromShift) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnassignUserFromShift) GetShiftId() string {
	if x != nil {
		return x.ShiftId
	}
	return ""
}

func (x *UnassignUserFromShift) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *UnassignUserFromShift) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ShiftUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shift     *PlannedShift `protobuf:"bytes,1,opt,name=shift,proto3" json:"shift,omitempty"`
	ChangedBy string        `protobuf:"bytes,2,opt,name=changed_by,json=changedBy,proto3" json:"changed_by,omitempty"`
}

func (x *ShiftUpdateEvent) Reset() {
	*x = ShiftUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftUpdateEvent) ProtoMessage() {}

func (x *ShiftUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftUpdateEvent.ProtoReflect.Descriptor instead.
func (*ShiftUpdateEvent) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{7}
}

func (x *ShiftUpdateEvent) GetShift() *PlannedShift {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *ShiftUpdateEvent) GetChangedBy() string {
	if x != nil {
		return x.ChangedBy
	}
	return ""
}

type WorkTimeUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkTimes map[string]*WorkTimeStatus `protobuf:"bytes,1,rep,name=work_times,json=workTimes,proto3" json:"work_times,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkTimeUpdateEvent) Reset() {
	*x = WorkTimeUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeUpdateEvent) ProtoMessage() {}

func (x *WorkTimeUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeUpdateEvent.ProtoReflect.Descriptor instead.
func (*WorkTimeUpdateEvent) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{8}
}

func (x *WorkTimeUpdateEvent) GetWorkTimes() map[string]*WorkTimeStatus {
	if x != nil {
		return x.WorkTimes
	}
	return nil
}

type SessionPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionPing) Reset() {
	*x = SessionPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionPing) ProtoMessage() {}

func (x *SessionPing) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionPing.ProtoReflect.Descriptor instead.
func (*SessionPing) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{9}
}

type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*SessionRequest_StartSession
	//	*SessionRequest_AssignUser
	//	*SessionRequest_UnassignUser
	//	*SessionRequest_Ping
	Kind isSessionRequest_Kind `protobuf_oneof:"kind"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{10}
}

func (m *SessionRequest) GetKind() isSessionRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SessionRequest) GetStartSession() *StartSessionRequest {
	if x, ok := x.GetKind().(*SessionRequest_StartSession); ok {
		return x.StartSession
	}
	return nil
}

func (x *SessionRequest) GetAssignUser() *AssignUserToShift {
	if x, ok := x.GetKind().(*SessionRequest_AssignUser); ok {
		return x.AssignUser
	}
	return nil
}

func (x *SessionRequest) GetUnassignUser() *UnassignUserFromShift {
	if x, ok := x.GetKind().(*SessionRequest_UnassignUser); ok {
		return x.UnassignUser
	}
	return nil
}

func (x *SessionRequest) GetPing() *SessionPing {
	if x, ok := x.GetKind().(*SessionRequest_Ping); ok {
		return x.Ping
	}
	return nil
}

type isSessionRequest_Kind interface {
	isSessionRequest_Kind()
}

type SessionRequest_StartSession struct {
	StartSession *StartSessionRequest `protobuf:"bytes,1,opt,name=start_session,json=startSession,proto3,oneof"`
}

type SessionRequest_AssignUser struct {
	AssignUser *AssignUserToShift `protobuf:"bytes,2,opt,name=assign_user,json=assignUser,proto3,oneof"`
}

type SessionRequest_UnassignUser struct {
	UnassignUser *UnassignUserFromShift `protobuf:"bytes,3,opt,name=unassign_user,json=unassignUser,proto3,oneof"`
}

type SessionRequest_Ping struct {
	Ping *SessionPing `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

func (*SessionRequest_StartSession) isSessionRequest_Kind() {}

func (*SessionRequest_AssignUser) isSessionRequest_Kind() {}

func (*SessionRequest_UnassignUser) isSessionRequest_Kind() {}

func (*SessionRequest_Ping) isSessionRequest_Kind() {}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*SessionResponse_StartSession
	//	*SessionResponse_ShiftUpdate
	//	*SessionResponse_WorkTimeUpdate
	//	*SessionResponse_UserJoined
	//	*SessionResponse_UserLeft
	//	*SessionResponse_Message
	//	*SessionResponse_Ping
	Kind isSessionResponse_Kind `protobuf_oneof:"kind"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{11}
}

func (m *SessionResponse) GetKind() isSessionResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SessionResponse) GetStartSession() *StartSessionResponse {
	if x, ok := x.GetKind().(*SessionResponse_StartSession); ok {
		return x.StartSession
	}
	return nil
}

func (x *SessionResponse) GetShiftUpdate() *ShiftUpdateEvent {
	if x, ok := x.GetKind().(*SessionResponse_ShiftUpdate); ok {
		return x.ShiftUpdate
	}
	return nil
}

func (x *SessionResponse) GetWorkTimeUpdate() *WorkTimeUpdateEvent {
	if x, ok := x.GetKind().(*SessionResponse_WorkTimeUpdate); ok {
		return x.WorkTimeUpdate
	}
	return nil
}

func (x *SessionResponse) GetUserJoined() *UserJoinedSessionEvent {
	if x, ok := x.GetKind().(*SessionResponse_UserJoined); ok {
		return x.UserJoined
	}
	return nil
}

func (x *SessionResponse) GetUserLeft() *UserLeftSessionEvent {
	if x, ok := x.GetKind().(*SessionResponse_UserLeft); ok {
		return x.UserLeft
	}
	return nil
}

func (x *SessionResponse) GetMessage() *UserChatMessageEvent {
	if x, ok := x.GetKind().(*SessionResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *SessionResponse) GetPing() *SessionPing {
	if x, ok := x.GetKind().(*SessionResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

type isSessionResponse_Kind interface {
	isSessionResponse_Kind()
}

type SessionResponse_StartSession struct {
	StartSession *StartSessionResponse `protobuf:"bytes,1,opt,name=start_session,json=startSession,proto3,oneof"`
}

type SessionResponse_ShiftUpdate struct {
	ShiftUpdate *ShiftUpdateEvent `protobuf:"bytes,2,opt,name=shift_update,json=shiftUpdate,proto3,oneof"`
}

type SessionResponse_WorkTimeUpdate struct {
	WorkTimeUpdate *WorkTimeUpdateEvent `protobuf:"bytes,3,opt,name=work_time_update,json=workTimeUpdate,proto3,oneof"`
}

type SessionResponse_UserJoined struct {
	UserJoined *UserJoinedSessionEvent `protobuf:"bytes,4,opt,name=user_joined,json=userJoined,proto3,oneof"`
}

type SessionResponse_UserLeft struct {
	UserLeft *UserLeftSessionEvent `protobuf:"bytes,5,opt,name=user_left,json=userLeft,proto3,oneof"`
}

type SessionResponse_Message struct {
	Message *UserChatMessageEvent `protobuf:"bytes,6,opt,name=message,proto3,oneof"`
}

type SessionResponse_Ping struct {
	Ping *SessionPing `protobuf:"bytes,7,opt,name=ping,proto3,oneof"`
}

func (*SessionResponse_StartSession) isSessionResponse_Kind() {}

func (*SessionResponse_ShiftUpdate) isSessionResponse_Kind() {}

func (*SessionResponse_WorkTimeUpdate) isSessionResponse_Kind() {}

func (*SessionResponse_UserJoined) isSessionResponse_Kind() {}

func (*SessionResponse_UserLeft) isSessionResponse_Kind() {}

func (*SessionResponse_Message) isSessionResponse_Kind() {}

func (*SessionResponse_Ping) isSessionResponse_Kind() {}

type UserJoinedSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserJoinedSessionEvent) Reset() {
	*x = UserJoinedSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJoinedSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJoinedSessionEvent) ProtoMessage() {}

func (x *UserJoinedSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJoinedSessionEvent.ProtoReflect.Descriptor instead.
func (*UserJoinedSessionEvent) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{12}
}

func (x *UserJoinedSessionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserLeftSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserLeftSessionEvent) Reset() {
	*x = UserLeftSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLeftSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLeftSessionEvent) ProtoMessage() {}

func (x *UserLeftSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLeftSessionEvent.ProtoReflect.Descriptor instead.
func (*UserLeftSessionEvent) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{13}
}

func (x *UserLeftSessionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserChatMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUserId string `protobuf:"bytes,1,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UserChatMessageEvent) Reset() {
	*x = UserChatMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessageEvent) ProtoMessage() {}

func (x *UserChatMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessageEvent.ProtoReflect.Descriptor instead.
func (*UserChatMessageEvent) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{14}
}

func (x *UserChatMessageEvent) GetSenderUserId() string {
	if x != nil {
		return x.SenderUserId
	}
	return ""
}

func (x *UserChatMessageEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApproveRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApproveRosterRequest) Reset() {
	*x = ApproveRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRosterRequest) ProtoMessage() {}

func (x *ApproveRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRosterRequest.ProtoReflect.Descriptor instead.
func (*ApproveRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{15}
}

func (x *ApproveRosterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApproveRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveRosterResponse) Reset() {
	*x = ApproveRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRosterResponse) ProtoMessage() {}

func (x *ApproveRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRosterResponse.ProtoReflect.Descriptor instead.
func (*ApproveRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{16}
}

type DeleteRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRosterRequest) Reset() {
	*x = DeleteRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRosterRequest) ProtoMessage() {}

func (x *DeleteRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRosterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRosterResponse) Reset() {
	*x = DeleteRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRosterResponse) ProtoMessage() {}

func (x *DeleteRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRosterResponse.ProtoReflect.Descriptor instead.
func (*DeleteRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{18}
}

type GetByDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *GetByDate) Reset() {
	*x = GetByDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByDate) ProtoMessage() {}

func (x *GetByDate) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByDate.ProtoReflect.Descriptor instead.
func (*GetByDate) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{19}
}

func (x *GetByDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetByDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type GetRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Search:
	//
	//	*GetRosterRequest_Id
	//	*GetRosterRequest_Date
	Search   isGetRosterRequest_Search `protobuf_oneof:"search"`
	ReadMask *fieldmaskpb.FieldMask    `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetRosterRequest) Reset() {
	*x = GetRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosterRequest) ProtoMessage() {}

func (x *GetRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosterRequest.ProtoReflect.Descriptor instead.
func (*GetRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{20}
}

func (m *GetRosterRequest) GetSearch() isGetRosterRequest_Search {
	if m != nil {
		return m.Search
	}
	return nil
}

func (x *GetRosterRequest) GetId() string {
	if x, ok := x.GetSearch().(*GetRosterRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetRosterRequest) GetDate() *GetByDate {
	if x, ok := x.GetSearch().(*GetRosterRequest_Date); ok {
		return x.Date
	}
	return nil
}

func (x *GetRosterRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type isGetRosterRequest_Search interface {
	isGetRosterRequest_Search()
}

type GetRosterRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetRosterRequest_Date struct {
	Date *GetByDate `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

func (*GetRosterRequest_Id) isGetRosterRequest_Search() {}

func (*GetRosterRequest_Date) isGetRosterRequest_Search() {}

type GetRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta   *RosterMeta     `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Shifts []*PlannedShift `protobuf:"bytes,2,rep,name=shifts,proto3" json:"shifts,omitempty"`
}

func (x *GetRosterResponse) Reset() {
	*x = GetRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosterResponse) ProtoMessage() {}

func (x *GetRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosterResponse.ProtoReflect.Descriptor instead.
func (*GetRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{21}
}

func (x *GetRosterResponse) GetMeta() *RosterMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetRosterResponse) GetShifts() []*PlannedShift {
	if x != nil {
		return x.Shifts
	}
	return nil
}

type GetWorkingStaffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	ReadMaks *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_maks,json=readMaks,proto3" json:"read_maks,omitempty"`
}

func (x *GetWorkingStaffRequest) Reset() {
	*x = GetWorkingStaffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkingStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkingStaffRequest) ProtoMessage() {}

func (x *GetWorkingStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkingStaffRequest.ProtoReflect.Descriptor instead.
func (*GetWorkingStaffRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{22}
}

func (x *GetWorkingStaffRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetWorkingStaffRequest) GetReadMaks() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMaks
	}
	return nil
}

type GetWorkingStaffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds       []string        `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	CurrentShifts []*PlannedShift `protobuf:"bytes,2,rep,name=current_shifts,json=currentShifts,proto3" json:"current_shifts,omitempty"`
}

func (x *GetWorkingStaffResponse) Reset() {
	*x = GetWorkingStaffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkingStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkingStaffResponse) ProtoMessage() {}

func (x *GetWorkingStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkingStaffResponse.ProtoReflect.Descriptor instead.
func (*GetWorkingStaffResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{23}
}

func (x *GetWorkingStaffResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetWorkingStaffResponse) GetCurrentShifts() []*PlannedShift {
	if x != nil {
		return x.CurrentShifts
	}
	return nil
}

var File_tkd_roster_v1_roster_proto protoreflect.FileDescriptor

var file_tkd_roster_v1_roster_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74,
	0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x03, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x47, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0xa7, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x10, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x22,
	0xc4, 0x01, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0e, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x6e, 0x67, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x68, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0d, 0x75, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0xfc, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x31,
	0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2f, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x77, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x06, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x6b, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x32, 0xce, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0xbb, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d,
	0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x54, 0x52, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x6b, 0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0f, 0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tkd_roster_v1_roster_proto_rawDescOnce sync.Once
	file_tkd_roster_v1_roster_proto_rawDescData = file_tkd_roster_v1_roster_proto_rawDesc
)

func file_tkd_roster_v1_roster_proto_rawDescGZIP() []byte {
	file_tkd_roster_v1_roster_proto_rawDescOnce.Do(func() {
		file_tkd_roster_v1_roster_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_roster_v1_roster_proto_rawDescData)
	})
	return file_tkd_roster_v1_roster_proto_rawDescData
}

var file_tkd_roster_v1_roster_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_tkd_roster_v1_roster_proto_goTypes = []interface{}{
	(*PlannedShift)(nil),            // 0: tkd.roster.v1.PlannedShift
	(*RosterMeta)(nil),              // 1: tkd.roster.v1.RosterMeta
	(*WorkTimeStatus)(nil),          // 2: tkd.roster.v1.WorkTimeStatus
	(*StartSessionRequest)(nil),     // 3: tkd.roster.v1.StartSessionRequest
	(*StartSessionResponse)(nil),    // 4: tkd.roster.v1.StartSessionResponse
	(*AssignUserToShift)(nil),       // 5: tkd.roster.v1.AssignUserToShift
	(*UnassignUserFromShift)(nil),   // 6: tkd.roster.v1.UnassignUserFromShift
	(*ShiftUpdateEvent)(nil),        // 7: tkd.roster.v1.ShiftUpdateEvent
	(*WorkTimeUpdateEvent)(nil),     // 8: tkd.roster.v1.WorkTimeUpdateEvent
	(*SessionPing)(nil),             // 9: tkd.roster.v1.SessionPing
	(*SessionRequest)(nil),          // 10: tkd.roster.v1.SessionRequest
	(*SessionResponse)(nil),         // 11: tkd.roster.v1.SessionResponse
	(*UserJoinedSessionEvent)(nil),  // 12: tkd.roster.v1.UserJoinedSessionEvent
	(*UserLeftSessionEvent)(nil),    // 13: tkd.roster.v1.UserLeftSessionEvent
	(*UserChatMessageEvent)(nil),    // 14: tkd.roster.v1.UserChatMessageEvent
	(*ApproveRosterRequest)(nil),    // 15: tkd.roster.v1.ApproveRosterRequest
	(*ApproveRosterResponse)(nil),   // 16: tkd.roster.v1.ApproveRosterResponse
	(*DeleteRosterRequest)(nil),     // 17: tkd.roster.v1.DeleteRosterRequest
	(*DeleteRosterResponse)(nil),    // 18: tkd.roster.v1.DeleteRosterResponse
	(*GetByDate)(nil),               // 19: tkd.roster.v1.GetByDate
	(*GetRosterRequest)(nil),        // 20: tkd.roster.v1.GetRosterRequest
	(*GetRosterResponse)(nil),       // 21: tkd.roster.v1.GetRosterResponse
	(*GetWorkingStaffRequest)(nil),  // 22: tkd.roster.v1.GetWorkingStaffRequest
	(*GetWorkingStaffResponse)(nil), // 23: tkd.roster.v1.GetWorkingStaffResponse
	nil,                             // 24: tkd.roster.v1.WorkTimeUpdateEvent.WorkTimesEntry
	(*timestamppb.Timestamp)(nil),   // 25: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 26: google.protobuf.Duration
	(*WorkShift)(nil),               // 27: tkd.roster.v1.WorkShift
	(*fieldmaskpb.FieldMask)(nil),   // 28: google.protobuf.FieldMask
}
var file_tkd_roster_v1_roster_proto_depIdxs = []int32{
	25, // 0: tkd.roster.v1.PlannedShift.from:type_name -> google.protobuf.Timestamp
	25, // 1: tkd.roster.v1.PlannedShift.to:type_name -> google.protobuf.Timestamp
	26, // 2: tkd.roster.v1.PlannedShift.time_worth:type_name -> google.protobuf.Duration
	27, // 3: tkd.roster.v1.PlannedShift.shift:type_name -> tkd.roster.v1.WorkShift
	28, // 4: tkd.roster.v1.PlannedShift.read_mask:type_name -> google.protobuf.FieldMask
	25, // 5: tkd.roster.v1.RosterMeta.approved_at:type_name -> google.protobuf.Timestamp
	25, // 6: tkd.roster.v1.RosterMeta.created_at:type_name -> google.protobuf.Timestamp
	25, // 7: tkd.roster.v1.RosterMeta.updated_at:type_name -> google.protobuf.Timestamp
	26, // 8: tkd.roster.v1.WorkTimeStatus.time_per_week:type_name -> google.protobuf.Duration
	26, // 9: tkd.roster.v1.WorkTimeStatus.expected_work_time:type_name -> google.protobuf.Duration
	26, // 10: tkd.roster.v1.WorkTimeStatus.planned_work_time:type_name -> google.protobuf.Duration
	1,  // 11: tkd.roster.v1.StartSessionResponse.meta:type_name -> tkd.roster.v1.RosterMeta
	0,  // 12: tkd.roster.v1.StartSessionResponse.planned_shifts:type_name -> tkd.roster.v1.PlannedShift
	25, // 13: tkd.roster.v1.AssignUserToShift.from:type_name -> google.protobuf.Timestamp
	25, // 14: tkd.roster.v1.AssignUserToShift.to:type_name -> google.protobuf.Timestamp
	25, // 15: tkd.roster.v1.UnassignUserFromShift.from:type_name -> google.protobuf.Timestamp
	25, // 16: tkd.roster.v1.UnassignUserFromShift.to:type_name -> google.protobuf.Timestamp
	0,  // 17: tkd.roster.v1.ShiftUpdateEvent.shift:type_name -> tkd.roster.v1.PlannedShift
	24, // 18: tkd.roster.v1.WorkTimeUpdateEvent.work_times:type_name -> tkd.roster.v1.WorkTimeUpdateEvent.WorkTimesEntry
	3,  // 19: tkd.roster.v1.SessionRequest.start_session:type_name -> tkd.roster.v1.StartSessionRequest
	5,  // 20: tkd.roster.v1.SessionRequest.assign_user:type_name -> tkd.roster.v1.AssignUserToShift
	6,  // 21: tkd.roster.v1.SessionRequest.unassign_user:type_name -> tkd.roster.v1.UnassignUserFromShift
	9,  // 22: tkd.roster.v1.SessionRequest.ping:type_name -> tkd.roster.v1.SessionPing
	4,  // 23: tkd.roster.v1.SessionResponse.start_session:type_name -> tkd.roster.v1.StartSessionResponse
	7,  // 24: tkd.roster.v1.SessionResponse.shift_update:type_name -> tkd.roster.v1.ShiftUpdateEvent
	8,  // 25: tkd.roster.v1.SessionResponse.work_time_update:type_name -> tkd.roster.v1.WorkTimeUpdateEvent
	12, // 26: tkd.roster.v1.SessionResponse.user_joined:type_name -> tkd.roster.v1.UserJoinedSessionEvent
	13, // 27: tkd.roster.v1.SessionResponse.user_left:type_name -> tkd.roster.v1.UserLeftSessionEvent
	14, // 28: tkd.roster.v1.SessionResponse.message:type_name -> tkd.roster.v1.UserChatMessageEvent
	9,  // 29: tkd.roster.v1.SessionResponse.ping:type_name -> tkd.roster.v1.SessionPing
	19, // 30: tkd.roster.v1.GetRosterRequest.date:type_name -> tkd.roster.v1.GetByDate
	28, // 31: tkd.roster.v1.GetRosterRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 32: tkd.roster.v1.GetRosterResponse.meta:type_name -> tkd.roster.v1.RosterMeta
	0,  // 33: tkd.roster.v1.GetRosterResponse.shifts:type_name -> tkd.roster.v1.PlannedShift
	25, // 34: tkd.roster.v1.GetWorkingStaffRequest.time:type_name -> google.protobuf.Timestamp
	28, // 35: tkd.roster.v1.GetWorkingStaffRequest.read_maks:type_name -> google.protobuf.FieldMask
	0,  // 36: tkd.roster.v1.GetWorkingStaffResponse.current_shifts:type_name -> tkd.roster.v1.PlannedShift
	2,  // 37: tkd.roster.v1.WorkTimeUpdateEvent.WorkTimesEntry.value:type_name -> tkd.roster.v1.WorkTimeStatus
	10, // 38: tkd.roster.v1.RosterService.Session:input_type -> tkd.roster.v1.SessionRequest
	15, // 39: tkd.roster.v1.RosterService.ApproveRoster:input_type -> tkd.roster.v1.ApproveRosterRequest
	17, // 40: tkd.roster.v1.RosterService.DeleteRoster:input_type -> tkd.roster.v1.DeleteRosterRequest
	20, // 41: tkd.roster.v1.RosterService.GetRoster:input_type -> tkd.roster.v1.GetRosterRequest
	22, // 42: tkd.roster.v1.RosterService.GetWorkingStaff:input_type -> tkd.roster.v1.GetWorkingStaffRequest
	11, // 43: tkd.roster.v1.RosterService.Session:output_type -> tkd.roster.v1.SessionResponse
	16, // 44: tkd.roster.v1.RosterService.ApproveRoster:output_type -> tkd.roster.v1.ApproveRosterResponse
	18, // 45: tkd.roster.v1.RosterService.DeleteRoster:output_type -> tkd.roster.v1.DeleteRosterResponse
	21, // 46: tkd.roster.v1.RosterService.GetRoster:output_type -> tkd.roster.v1.GetRosterResponse
	23, // 47: tkd.roster.v1.RosterService.GetWorkingStaff:output_type -> tkd.roster.v1.GetWorkingStaffResponse
	43, // [43:48] is the sub-list for method output_type
	38, // [38:43] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_tkd_roster_v1_roster_proto_init() }
func file_tkd_roster_v1_roster_proto_init() {
	if File_tkd_roster_v1_roster_proto != nil {
		return
	}
	file_tkd_roster_v1_workshift_proto_init()
	file_tkd_roster_v1_worktime_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tkd_roster_v1_roster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlannedShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserToShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignUserFromShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJoinedSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLeftSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkingStaffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkingStaffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tkd_roster_v1_roster_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SessionRequest_StartSession)(nil),
		(*SessionRequest_AssignUser)(nil),
		(*SessionRequest_UnassignUser)(nil),
		(*SessionRequest_Ping)(nil),
	}
	file_tkd_roster_v1_roster_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SessionResponse_StartSession)(nil),
		(*SessionResponse_ShiftUpdate)(nil),
		(*SessionResponse_WorkTimeUpdate)(nil),
		(*SessionResponse_UserJoined)(nil),
		(*SessionResponse_UserLeft)(nil),
		(*SessionResponse_Message)(nil),
		(*SessionResponse_Ping)(nil),
	}
	file_tkd_roster_v1_roster_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetRosterRequest_Id)(nil),
		(*GetRosterRequest_Date)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_roster_v1_roster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_roster_v1_roster_proto_goTypes,
		DependencyIndexes: file_tkd_roster_v1_roster_proto_depIdxs,
		MessageInfos:      file_tkd_roster_v1_roster_proto_msgTypes,
	}.Build()
	File_tkd_roster_v1_roster_proto = out.File
	file_tkd_roster_v1_roster_proto_rawDesc = nil
	file_tkd_roster_v1_roster_proto_goTypes = nil
	file_tkd_roster_v1_roster_proto_depIdxs = nil
}
