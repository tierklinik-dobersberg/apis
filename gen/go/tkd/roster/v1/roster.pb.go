// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tkd/roster/v1/roster.proto

package rosterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequiredShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// From holds the time at which the shift begins.
	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// To holds the time at which the shift ends.
	To *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// WorkShiftID is the ID of the work-shift definition.
	WorkShiftId string `protobuf:"bytes,3,opt,name=work_shift_id,json=workShiftId,proto3" json:"work_shift_id,omitempty"`
	// EligibleUserIds is set to a list of user ids that are eligible for this
	// work-shift.
	EligibleUserIds []string `protobuf:"bytes,4,rep,name=eligible_user_ids,json=eligibleUserIds,proto3" json:"eligible_user_ids,omitempty"`
	// OnHoliday is set to true if the shift is on a public holiday.
	OnHoliday bool `protobuf:"varint,5,opt,name=on_holiday,json=onHoliday,proto3" json:"on_holiday,omitempty"`
	// onWeekend is set to true if the shift is on a week-end day (Saturday or Sunday).
	OnWeekend bool `protobuf:"varint,6,opt,name=on_weekend,json=onWeekend,proto3" json:"on_weekend,omitempty"`
	// ViolationsPerUserId is a map indexed with user ids that holds a list of
	// violations and resoning of why a user is not part of RequiredShift.eligible_user_ids
	// even if the user would be eligible by WorkShift.eligible_roles.
	ViolationsPerUserId map[string]*ConstraintViolationList `protobuf:"bytes,7,rep,name=violations_per_user_id,json=violationsPerUserId,proto3" json:"violations_per_user_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequiredShift) Reset() {
	*x = RequiredShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredShift) ProtoMessage() {}

func (x *RequiredShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredShift.ProtoReflect.Descriptor instead.
func (*RequiredShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{0}
}

func (x *RequiredShift) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RequiredShift) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RequiredShift) GetWorkShiftId() string {
	if x != nil {
		return x.WorkShiftId
	}
	return ""
}

func (x *RequiredShift) GetEligibleUserIds() []string {
	if x != nil {
		return x.EligibleUserIds
	}
	return nil
}

func (x *RequiredShift) GetOnHoliday() bool {
	if x != nil {
		return x.OnHoliday
	}
	return false
}

func (x *RequiredShift) GetOnWeekend() bool {
	if x != nil {
		return x.OnWeekend
	}
	return false
}

func (x *RequiredShift) GetViolationsPerUserId() map[string]*ConstraintViolationList {
	if x != nil {
		return x.ViolationsPerUserId
	}
	return nil
}

// PlannedShift is a planned work-shift in a roster.
type PlannedShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// From holds the time at which the shift begins.
	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// To holds the time at which the shift ends.
	To *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// AsssignedUserIds is a list of user IDs that are assigned to work
	// during the shift.
	AssignedUserIds []string `protobuf:"bytes,3,rep,name=assigned_user_ids,json=assignedUserIds,proto3" json:"assigned_user_ids,omitempty"`
	// WorkShiftId is the ID of the work-shift definition.
	WorkShiftId string `protobuf:"bytes,4,opt,name=work_shift_id,json=workShiftId,proto3" json:"work_shift_id,omitempty"`
}

func (x *PlannedShift) Reset() {
	*x = PlannedShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlannedShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedShift) ProtoMessage() {}

func (x *PlannedShift) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedShift.ProtoReflect.Descriptor instead.
func (*PlannedShift) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{1}
}

func (x *PlannedShift) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PlannedShift) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *PlannedShift) GetAssignedUserIds() []string {
	if x != nil {
		return x.AssignedUserIds
	}
	return nil
}

func (x *PlannedShift) GetWorkShiftId() string {
	if x != nil {
		return x.WorkShiftId
	}
	return ""
}

// Roster is a planned roster for a given time period.
type Roster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier for the roster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// From holds the date of the first day in the roster.
	// It should follow the format YYYY-MM-DD as in 2006-01-02.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// To holds the date of the lalst day in the roster.
	// It should follow the format YYYY-MM-DD as in 2006-01-02.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Shifts holds all planned work-shifts for the roster.
	// Implementations should sort the shifts by increasing
	// from time.
	Shifts []*PlannedShift `protobuf:"bytes,4,rep,name=shifts,proto3" json:"shifts,omitempty"`
	// Approved is set to true when the roster has been approved by
	// management.
	Approved bool `protobuf:"varint,5,opt,name=approved,proto3" json:"approved,omitempty"`
	// ApprovedAt is set to the timestamp at which the roster has been
	// approved by management.
	ApprovedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	// ApproverUserId is set to the ID of the management user that approved
	// the roster.
	ApproverUserId string `protobuf:"bytes,7,opt,name=approver_user_id,json=approverUserId,proto3" json:"approver_user_id,omitempty"`
	// LastModifiedBy is set to the ID of the user that last changed the roster.
	LastModifiedBy string `protobuf:"bytes,8,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// CreatedAt is set to the timestamp at which the roster has been initially
	// created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt is set to the timestamp at which the roster has been updated
	// last.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// A list of shift tags used to limit which work-shifts should be part of the
	// roster. If left empty/unspecified, all shifts are eligible for the roster.
	ShiftTags []string `protobuf:"bytes,11,rep,name=shift_tags,json=shiftTags,proto3" json:"shift_tags,omitempty"`
}

func (x *Roster) Reset() {
	*x = Roster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roster) ProtoMessage() {}

func (x *Roster) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roster.ProtoReflect.Descriptor instead.
func (*Roster) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{2}
}

func (x *Roster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Roster) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Roster) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Roster) GetShifts() []*PlannedShift {
	if x != nil {
		return x.Shifts
	}
	return nil
}

func (x *Roster) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *Roster) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *Roster) GetApproverUserId() string {
	if x != nil {
		return x.ApproverUserId
	}
	return ""
}

func (x *Roster) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *Roster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Roster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Roster) GetShiftTags() []string {
	if x != nil {
		return x.ShiftTags
	}
	return nil
}

type SaveRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique ID of the roster. If the roster is created for the first
	// time this field may be empty. Subsequent SaveRosterRequests should populate
	// the ID returned in the response of the first SaveRosterRequest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// From holds the date of the first day in the roster.
	// It should follow the format YYYY-MM-DD as in 2006-01-02.
	// Note that chaning the from-time after the roster has been
	// initialy created is not allowed.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// To holds the date of the lalst day in the roster.
	// It should follow the format YYYY-MM-DD as in 2006-01-02.
	// Note that chaning the to-time after the roster has been
	// initialy created is not allowed.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Shifts is a list of planned roster shifts.
	Shifts []*PlannedShift `protobuf:"bytes,4,rep,name=shifts,proto3" json:"shifts,omitempty"`
	// ReadMask may be used to limit the response of the SaveRosterRequest.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// See Roster.shift_tags.
	// This field must not be changed once saved.
	ShiftTags []string `protobuf:"bytes,7,rep,name=shift_tags,json=shiftTags,proto3" json:"shift_tags,omitempty"`
}

func (x *SaveRosterRequest) Reset() {
	*x = SaveRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRosterRequest) ProtoMessage() {}

func (x *SaveRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRosterRequest.ProtoReflect.Descriptor instead.
func (*SaveRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{3}
}

func (x *SaveRosterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SaveRosterRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SaveRosterRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SaveRosterRequest) GetShifts() []*PlannedShift {
	if x != nil {
		return x.Shifts
	}
	return nil
}

func (x *SaveRosterRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *SaveRosterRequest) GetShiftTags() []string {
	if x != nil {
		return x.ShiftTags
	}
	return nil
}

type WorkTimeAnalysisWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year         int32                `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Week         int32                `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
	WorkingDays  int32                `protobuf:"varint,3,opt,name=working_days,json=workingDays,proto3" json:"working_days,omitempty"`
	ExpectedWork *durationpb.Duration `protobuf:"bytes,4,opt,name=expected_work,json=expectedWork,proto3" json:"expected_work,omitempty"`
	Planned      *durationpb.Duration `protobuf:"bytes,5,opt,name=planned,proto3" json:"planned,omitempty"`
}

func (x *WorkTimeAnalysisWeek) Reset() {
	*x = WorkTimeAnalysisWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeAnalysisWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeAnalysisWeek) ProtoMessage() {}

func (x *WorkTimeAnalysisWeek) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeAnalysisWeek.ProtoReflect.Descriptor instead.
func (*WorkTimeAnalysisWeek) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{4}
}

func (x *WorkTimeAnalysisWeek) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *WorkTimeAnalysisWeek) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *WorkTimeAnalysisWeek) GetWorkingDays() int32 {
	if x != nil {
		return x.WorkingDays
	}
	return 0
}

func (x *WorkTimeAnalysisWeek) GetExpectedWork() *durationpb.Duration {
	if x != nil {
		return x.ExpectedWork
	}
	return nil
}

func (x *WorkTimeAnalysisWeek) GetPlanned() *durationpb.Duration {
	if x != nil {
		return x.Planned
	}
	return nil
}

type WorkTimeAnalysisStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkTimeId       string                  `protobuf:"bytes,1,opt,name=work_time_id,json=workTimeId,proto3" json:"work_time_id,omitempty"`
	Weeks            []*WorkTimeAnalysisWeek `protobuf:"bytes,2,rep,name=weeks,proto3" json:"weeks,omitempty"`
	ExpectedWorkTime *durationpb.Duration    `protobuf:"bytes,3,opt,name=expected_work_time,json=expectedWorkTime,proto3" json:"expected_work_time,omitempty"`
	WorkTimePerWeek  *durationpb.Duration    `protobuf:"bytes,4,opt,name=work_time_per_week,json=workTimePerWeek,proto3" json:"work_time_per_week,omitempty"`
	From             string                  `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"` // YYYY-MM-DD
	To               string                  `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`     // YYYY-MM-DD
	Planned          *durationpb.Duration    `protobuf:"bytes,7,opt,name=planned,proto3" json:"planned,omitempty"`
}

func (x *WorkTimeAnalysisStep) Reset() {
	*x = WorkTimeAnalysisStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeAnalysisStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeAnalysisStep) ProtoMessage() {}

func (x *WorkTimeAnalysisStep) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeAnalysisStep.ProtoReflect.Descriptor instead.
func (*WorkTimeAnalysisStep) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{5}
}

func (x *WorkTimeAnalysisStep) GetWorkTimeId() string {
	if x != nil {
		return x.WorkTimeId
	}
	return ""
}

func (x *WorkTimeAnalysisStep) GetWeeks() []*WorkTimeAnalysisWeek {
	if x != nil {
		return x.Weeks
	}
	return nil
}

func (x *WorkTimeAnalysisStep) GetExpectedWorkTime() *durationpb.Duration {
	if x != nil {
		return x.ExpectedWorkTime
	}
	return nil
}

func (x *WorkTimeAnalysisStep) GetWorkTimePerWeek() *durationpb.Duration {
	if x != nil {
		return x.WorkTimePerWeek
	}
	return nil
}

func (x *WorkTimeAnalysisStep) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *WorkTimeAnalysisStep) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *WorkTimeAnalysisStep) GetPlanned() *durationpb.Duration {
	if x != nil {
		return x.Planned
	}
	return nil
}

type WorkTimeAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserId is the ID of the user this WorkTimeAnalysis belongs to.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// PlannedTime is the actual working time that is planned for the
	// user.
	PlannedTime *durationpb.Duration `protobuf:"bytes,2,opt,name=planned_time,json=plannedTime,proto3" json:"planned_time,omitempty"`
	// ExpectedTime holds the work-time that the user is expected to
	// deliver.
	ExpectedTime *durationpb.Duration    `protobuf:"bytes,3,opt,name=expected_time,json=expectedTime,proto3" json:"expected_time,omitempty"`
	Steps        []*WorkTimeAnalysisStep `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *WorkTimeAnalysis) Reset() {
	*x = WorkTimeAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeAnalysis) ProtoMessage() {}

func (x *WorkTimeAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeAnalysis.ProtoReflect.Descriptor instead.
func (*WorkTimeAnalysis) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{6}
}

func (x *WorkTimeAnalysis) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WorkTimeAnalysis) GetPlannedTime() *durationpb.Duration {
	if x != nil {
		return x.PlannedTime
	}
	return nil
}

func (x *WorkTimeAnalysis) GetExpectedTime() *durationpb.Duration {
	if x != nil {
		return x.ExpectedTime
	}
	return nil
}

func (x *WorkTimeAnalysis) GetSteps() []*WorkTimeAnalysisStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type SaveRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roster is the final saved roster.
	// Use read_mask in SaveRosterRequest if you don't need
	// to retrieve the full roster after saving a change.
	Roster *Roster `protobuf:"bytes,1,opt,name=roster,proto3" json:"roster,omitempty"`
	// WorkTimeAnalysis holds work-time statistics for each user
	// that has a WorkTime set.
	WorkTimeAnalysis []*WorkTimeAnalysis `protobuf:"bytes,2,rep,name=work_time_analysis,json=workTimeAnalysis,proto3" json:"work_time_analysis,omitempty"`
}

func (x *SaveRosterResponse) Reset() {
	*x = SaveRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRosterResponse) ProtoMessage() {}

func (x *SaveRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRosterResponse.ProtoReflect.Descriptor instead.
func (*SaveRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{7}
}

func (x *SaveRosterResponse) GetRoster() *Roster {
	if x != nil {
		return x.Roster
	}
	return nil
}

func (x *SaveRosterResponse) GetWorkTimeAnalysis() []*WorkTimeAnalysis {
	if x != nil {
		return x.WorkTimeAnalysis
	}
	return nil
}

type UsersToAnalyze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserIds is a list of users to analyze.
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// AllUsers may be set to true if all users that have a work-time specified
	// should be included in analysis.
	AllUsers bool `protobuf:"varint,2,opt,name=all_users,json=allUsers,proto3" json:"all_users,omitempty"`
}

func (x *UsersToAnalyze) Reset() {
	*x = UsersToAnalyze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersToAnalyze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersToAnalyze) ProtoMessage() {}

func (x *UsersToAnalyze) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersToAnalyze.ProtoReflect.Descriptor instead.
func (*UsersToAnalyze) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{8}
}

func (x *UsersToAnalyze) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *UsersToAnalyze) GetAllUsers() bool {
	if x != nil {
		return x.AllUsers
	}
	return false
}

type AnalyzeWorkTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Users specifies which users should be analyzed. If unset (i.e. a nil message) than
	// only the user that performs the request will be analyzed.
	// Note that the role roster_manager is required when this field is set.
	Users *UsersToAnalyze `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
	// From holds the date (format YYYY-MM-DD; ie. 2006-01-02) of the first day to include in analysis.
	// Not that if a work-shift begins the day before but spans into the date specified here it will
	// NOT be included in analysis.
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// To holds teh date (format YYYY-MM-DD; ie. 2006-01-02) of the last day to include in analysis.
	// Note that if a work-shift begins at the specified date but spans to the next date it will still
	// be included as a whole in the analysis.
	To string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *AnalyzeWorkTimeRequest) Reset() {
	*x = AnalyzeWorkTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeWorkTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeWorkTimeRequest) ProtoMessage() {}

func (x *AnalyzeWorkTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeWorkTimeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeWorkTimeRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{9}
}

func (x *AnalyzeWorkTimeRequest) GetUsers() *UsersToAnalyze {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AnalyzeWorkTimeRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AnalyzeWorkTimeRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type AnalyzeWorkTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WorkTimeAnalysis `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *AnalyzeWorkTimeResponse) Reset() {
	*x = AnalyzeWorkTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeWorkTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeWorkTimeResponse) ProtoMessage() {}

func (x *AnalyzeWorkTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeWorkTimeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeWorkTimeResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{10}
}

func (x *AnalyzeWorkTimeResponse) GetResults() []*WorkTimeAnalysis {
	if x != nil {
		return x.Results
	}
	return nil
}

type ApproveRosterWorkTimeSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TimeOff  *durationpb.Duration `protobuf:"bytes,2,opt,name=time_off,json=timeOff,proto3" json:"time_off,omitempty"`
	Vacation *durationpb.Duration `protobuf:"bytes,3,opt,name=vacation,proto3" json:"vacation,omitempty"`
}

func (x *ApproveRosterWorkTimeSplit) Reset() {
	*x = ApproveRosterWorkTimeSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRosterWorkTimeSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRosterWorkTimeSplit) ProtoMessage() {}

func (x *ApproveRosterWorkTimeSplit) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRosterWorkTimeSplit.ProtoReflect.Descriptor instead.
func (*ApproveRosterWorkTimeSplit) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{11}
}

func (x *ApproveRosterWorkTimeSplit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApproveRosterWorkTimeSplit) GetTimeOff() *durationpb.Duration {
	if x != nil {
		return x.TimeOff
	}
	return nil
}

func (x *ApproveRosterWorkTimeSplit) GetVacation() *durationpb.Duration {
	if x != nil {
		return x.Vacation
	}
	return nil
}

type ApproveRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkTimeSplit map[string]*ApproveRosterWorkTimeSplit `protobuf:"bytes,2,rep,name=work_time_split,json=workTimeSplit,proto3" json:"work_time_split,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApproveRosterRequest) Reset() {
	*x = ApproveRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRosterRequest) ProtoMessage() {}

func (x *ApproveRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRosterRequest.ProtoReflect.Descriptor instead.
func (*ApproveRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveRosterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApproveRosterRequest) GetWorkTimeSplit() map[string]*ApproveRosterWorkTimeSplit {
	if x != nil {
		return x.WorkTimeSplit
	}
	return nil
}

type ApproveRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveRosterResponse) Reset() {
	*x = ApproveRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRosterResponse) ProtoMessage() {}

func (x *ApproveRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRosterResponse.ProtoReflect.Descriptor instead.
func (*ApproveRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{13}
}

type DeleteRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRosterRequest) Reset() {
	*x = DeleteRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRosterRequest) ProtoMessage() {}

func (x *DeleteRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRosterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRosterResponse) Reset() {
	*x = DeleteRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRosterResponse) ProtoMessage() {}

func (x *DeleteRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRosterResponse.ProtoReflect.Descriptor instead.
func (*DeleteRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{15}
}

type GetRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Search:
	//
	//	*GetRosterRequest_Id
	//	*GetRosterRequest_Date
	Search   isGetRosterRequest_Search `protobuf_oneof:"search"`
	ReadMask *fieldmaskpb.FieldMask    `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetRosterRequest) Reset() {
	*x = GetRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosterRequest) ProtoMessage() {}

func (x *GetRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosterRequest.ProtoReflect.Descriptor instead.
func (*GetRosterRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{16}
}

func (m *GetRosterRequest) GetSearch() isGetRosterRequest_Search {
	if m != nil {
		return m.Search
	}
	return nil
}

func (x *GetRosterRequest) GetId() string {
	if x, ok := x.GetSearch().(*GetRosterRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetRosterRequest) GetDate() *timestamppb.Timestamp {
	if x, ok := x.GetSearch().(*GetRosterRequest_Date); ok {
		return x.Date
	}
	return nil
}

func (x *GetRosterRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type isGetRosterRequest_Search interface {
	isGetRosterRequest_Search()
}

type GetRosterRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetRosterRequest_Date struct {
	Date *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

func (*GetRosterRequest_Id) isGetRosterRequest_Search() {}

func (*GetRosterRequest_Date) isGetRosterRequest_Search() {}

type GetRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roster           []*Roster           `protobuf:"bytes,1,rep,name=roster,proto3" json:"roster,omitempty"`
	WorkTimeAnalysis []*WorkTimeAnalysis `protobuf:"bytes,2,rep,name=work_time_analysis,json=workTimeAnalysis,proto3" json:"work_time_analysis,omitempty"`
}

func (x *GetRosterResponse) Reset() {
	*x = GetRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosterResponse) ProtoMessage() {}

func (x *GetRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosterResponse.ProtoReflect.Descriptor instead.
func (*GetRosterResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{17}
}

func (x *GetRosterResponse) GetRoster() []*Roster {
	if x != nil {
		return x.Roster
	}
	return nil
}

func (x *GetRosterResponse) GetWorkTimeAnalysis() []*WorkTimeAnalysis {
	if x != nil {
		return x.WorkTimeAnalysis
	}
	return nil
}

type GetWorkingStaffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	ReadMaks          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_maks,json=readMaks,proto3" json:"read_maks,omitempty"`
	FilterShiftsByTag []string               `protobuf:"bytes,3,rep,name=filter_shifts_by_tag,json=filterShiftsByTag,proto3" json:"filter_shifts_by_tag,omitempty"`
}

func (x *GetWorkingStaffRequest) Reset() {
	*x = GetWorkingStaffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkingStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkingStaffRequest) ProtoMessage() {}

func (x *GetWorkingStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkingStaffRequest.ProtoReflect.Descriptor instead.
func (*GetWorkingStaffRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{18}
}

func (x *GetWorkingStaffRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetWorkingStaffRequest) GetReadMaks() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMaks
	}
	return nil
}

func (x *GetWorkingStaffRequest) GetFilterShiftsByTag() []string {
	if x != nil {
		return x.FilterShiftsByTag
	}
	return nil
}

type GetWorkingStaffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds       []string        `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	CurrentShifts []*PlannedShift `protobuf:"bytes,2,rep,name=current_shifts,json=currentShifts,proto3" json:"current_shifts,omitempty"`
	RosterId      []string        `protobuf:"bytes,3,rep,name=roster_id,json=rosterId,proto3" json:"roster_id,omitempty"`
}

func (x *GetWorkingStaffResponse) Reset() {
	*x = GetWorkingStaffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkingStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkingStaffResponse) ProtoMessage() {}

func (x *GetWorkingStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkingStaffResponse.ProtoReflect.Descriptor instead.
func (*GetWorkingStaffResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{19}
}

func (x *GetWorkingStaffResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetWorkingStaffResponse) GetCurrentShifts() []*PlannedShift {
	if x != nil {
		return x.CurrentShifts
	}
	return nil
}

func (x *GetWorkingStaffResponse) GetRosterId() []string {
	if x != nil {
		return x.RosterId
	}
	return nil
}

type GetRequiredShiftsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// From holds the date (format YYYY-MM-DD; ie. 2006-01-02) of the first day to include.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// To holds teh date (format YYYY-MM-DD; ie. 2006-01-02) of the last day to include.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Limit shifts to a set of tags.
	ShiftTags []string `protobuf:"bytes,3,rep,name=shift_tags,json=shiftTags,proto3" json:"shift_tags,omitempty"`
	// ReadMask may be use to limit which fields should be included in the response.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetRequiredShiftsRequest) Reset() {
	*x = GetRequiredShiftsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequiredShiftsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequiredShiftsRequest) ProtoMessage() {}

func (x *GetRequiredShiftsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequiredShiftsRequest.ProtoReflect.Descriptor instead.
func (*GetRequiredShiftsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{20}
}

func (x *GetRequiredShiftsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetRequiredShiftsRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetRequiredShiftsRequest) GetShiftTags() []string {
	if x != nil {
		return x.ShiftTags
	}
	return nil
}

func (x *GetRequiredShiftsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type GetRequiredShiftsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequiredShifts holds a list of shifts that must be configured for a valid roster.
	RequiredShifts []*RequiredShift `protobuf:"bytes,1,rep,name=required_shifts,json=requiredShifts,proto3" json:"required_shifts,omitempty"`
	// WorkShiftDefinitions (if requested by GetRequiredShiftsRequest.read_mask; default: yes)
	// is set to a list of WorkShift definitions that are referenced by GetRequiredShiftsResponse.required_shifts.work_shift_id;
	WorkShiftDefinitions []*WorkShift `protobuf:"bytes,2,rep,name=work_shift_definitions,json=workShiftDefinitions,proto3" json:"work_shift_definitions,omitempty"`
}

func (x *GetRequiredShiftsResponse) Reset() {
	*x = GetRequiredShiftsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tkd_roster_v1_roster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequiredShiftsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequiredShiftsResponse) ProtoMessage() {}

func (x *GetRequiredShiftsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_roster_v1_roster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequiredShiftsResponse.ProtoReflect.Descriptor instead.
func (*GetRequiredShiftsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_roster_v1_roster_proto_rawDescGZIP(), []int{21}
}

func (x *GetRequiredShiftsResponse) GetRequiredShifts() []*RequiredShift {
	if x != nil {
		return x.RequiredShifts
	}
	return nil
}

func (x *GetRequiredShiftsResponse) GetWorkShiftDefinitions() []*WorkShift {
	if x != nil {
		return x.WorkShiftDefinitions
	}
	return nil
}

var File_tkd_roster_v1_roster_proto protoreflect.FileDescriptor

var file_tkd_roster_v1_roster_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74,
	0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64,
	0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x16, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x6e, 0x0a, 0x18, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xde, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0xfa, 0xf7, 0x18,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x33, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x22, 0xb3, 0x03, 0x0a, 0x06, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x06, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7, 0x18, 0x39, 0xc8, 0x01, 0x01, 0x72, 0x34, 0x32,
	0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d,
	0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x5c, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31,
	0x5d, 0x29, 0x24, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7, 0x18, 0x39, 0xc8, 0x01, 0x01, 0x72, 0x34,
	0x32, 0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x5c, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d,
	0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30,
	0x31, 0x5d, 0x29, 0x24, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x47, 0x0a,
	0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xef, 0x01,
	0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7, 0x18,
	0x39, 0xc8, 0x01, 0x01, 0x72, 0x34, 0x32, 0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c, 0x2d,
	0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x5c,
	0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x4d, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7,
	0x18, 0x39, 0xc8, 0x01, 0x01, 0x72, 0x34, 0x32, 0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c,
	0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29,
	0x5c, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x54, 0x0a, 0x17, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x35, 0x0a, 0x08,
	0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x61, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x1a, 0x6b, 0x0a, 0x12,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x06, 0xfa, 0xf7, 0x18, 0x02, 0x08, 0x01, 0x22, 0x91,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x94, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7, 0x18, 0x39,
	0xc8, 0x01, 0x01, 0x72, 0x34, 0x32, 0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c, 0x2d, 0x28,
	0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x5c, 0x2d,
	0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x4d, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0xf7, 0x18,
	0x39, 0xc8, 0x01, 0x01, 0x72, 0x34, 0x32, 0x32, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x5c, 0x2d,
	0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x5c,
	0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xc2, 0x06, 0x0a, 0x0d,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a,
	0x0a, 0x53, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0xb2, 0x7e, 0x21, 0x08, 0x01, 0x12, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0xb2, 0x7e, 0x21, 0x08, 0x01, 0x12, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x80,
	0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xb2, 0x7e, 0x21,
	0x08, 0x01, 0x12, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x25, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xb2, 0x7e, 0x21, 0x08,
	0x01, 0x12, 0x0d, 0x69, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x42, 0xbb, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62,
	0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x52, 0x58,
	0xaa, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0d, 0x54, 0x6b, 0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x19, 0x54, 0x6b, 0x64, 0x5c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54,
	0x6b, 0x64, 0x3a, 0x3a, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tkd_roster_v1_roster_proto_rawDescOnce sync.Once
	file_tkd_roster_v1_roster_proto_rawDescData = file_tkd_roster_v1_roster_proto_rawDesc
)

func file_tkd_roster_v1_roster_proto_rawDescGZIP() []byte {
	file_tkd_roster_v1_roster_proto_rawDescOnce.Do(func() {
		file_tkd_roster_v1_roster_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_roster_v1_roster_proto_rawDescData)
	})
	return file_tkd_roster_v1_roster_proto_rawDescData
}

var file_tkd_roster_v1_roster_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tkd_roster_v1_roster_proto_goTypes = []interface{}{
	(*RequiredShift)(nil),              // 0: tkd.roster.v1.RequiredShift
	(*PlannedShift)(nil),               // 1: tkd.roster.v1.PlannedShift
	(*Roster)(nil),                     // 2: tkd.roster.v1.Roster
	(*SaveRosterRequest)(nil),          // 3: tkd.roster.v1.SaveRosterRequest
	(*WorkTimeAnalysisWeek)(nil),       // 4: tkd.roster.v1.WorkTimeAnalysisWeek
	(*WorkTimeAnalysisStep)(nil),       // 5: tkd.roster.v1.WorkTimeAnalysisStep
	(*WorkTimeAnalysis)(nil),           // 6: tkd.roster.v1.WorkTimeAnalysis
	(*SaveRosterResponse)(nil),         // 7: tkd.roster.v1.SaveRosterResponse
	(*UsersToAnalyze)(nil),             // 8: tkd.roster.v1.UsersToAnalyze
	(*AnalyzeWorkTimeRequest)(nil),     // 9: tkd.roster.v1.AnalyzeWorkTimeRequest
	(*AnalyzeWorkTimeResponse)(nil),    // 10: tkd.roster.v1.AnalyzeWorkTimeResponse
	(*ApproveRosterWorkTimeSplit)(nil), // 11: tkd.roster.v1.ApproveRosterWorkTimeSplit
	(*ApproveRosterRequest)(nil),       // 12: tkd.roster.v1.ApproveRosterRequest
	(*ApproveRosterResponse)(nil),      // 13: tkd.roster.v1.ApproveRosterResponse
	(*DeleteRosterRequest)(nil),        // 14: tkd.roster.v1.DeleteRosterRequest
	(*DeleteRosterResponse)(nil),       // 15: tkd.roster.v1.DeleteRosterResponse
	(*GetRosterRequest)(nil),           // 16: tkd.roster.v1.GetRosterRequest
	(*GetRosterResponse)(nil),          // 17: tkd.roster.v1.GetRosterResponse
	(*GetWorkingStaffRequest)(nil),     // 18: tkd.roster.v1.GetWorkingStaffRequest
	(*GetWorkingStaffResponse)(nil),    // 19: tkd.roster.v1.GetWorkingStaffResponse
	(*GetRequiredShiftsRequest)(nil),   // 20: tkd.roster.v1.GetRequiredShiftsRequest
	(*GetRequiredShiftsResponse)(nil),  // 21: tkd.roster.v1.GetRequiredShiftsResponse
	nil,                                // 22: tkd.roster.v1.RequiredShift.ViolationsPerUserIdEntry
	nil,                                // 23: tkd.roster.v1.ApproveRosterRequest.WorkTimeSplitEntry
	(*timestamppb.Timestamp)(nil),      // 24: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),      // 25: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),        // 26: google.protobuf.Duration
	(*WorkShift)(nil),                  // 27: tkd.roster.v1.WorkShift
	(*ConstraintViolationList)(nil),    // 28: tkd.roster.v1.ConstraintViolationList
}
var file_tkd_roster_v1_roster_proto_depIdxs = []int32{
	24, // 0: tkd.roster.v1.RequiredShift.from:type_name -> google.protobuf.Timestamp
	24, // 1: tkd.roster.v1.RequiredShift.to:type_name -> google.protobuf.Timestamp
	22, // 2: tkd.roster.v1.RequiredShift.violations_per_user_id:type_name -> tkd.roster.v1.RequiredShift.ViolationsPerUserIdEntry
	24, // 3: tkd.roster.v1.PlannedShift.from:type_name -> google.protobuf.Timestamp
	24, // 4: tkd.roster.v1.PlannedShift.to:type_name -> google.protobuf.Timestamp
	1,  // 5: tkd.roster.v1.Roster.shifts:type_name -> tkd.roster.v1.PlannedShift
	24, // 6: tkd.roster.v1.Roster.approved_at:type_name -> google.protobuf.Timestamp
	24, // 7: tkd.roster.v1.Roster.created_at:type_name -> google.protobuf.Timestamp
	24, // 8: tkd.roster.v1.Roster.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 9: tkd.roster.v1.SaveRosterRequest.shifts:type_name -> tkd.roster.v1.PlannedShift
	25, // 10: tkd.roster.v1.SaveRosterRequest.read_mask:type_name -> google.protobuf.FieldMask
	26, // 11: tkd.roster.v1.WorkTimeAnalysisWeek.expected_work:type_name -> google.protobuf.Duration
	26, // 12: tkd.roster.v1.WorkTimeAnalysisWeek.planned:type_name -> google.protobuf.Duration
	4,  // 13: tkd.roster.v1.WorkTimeAnalysisStep.weeks:type_name -> tkd.roster.v1.WorkTimeAnalysisWeek
	26, // 14: tkd.roster.v1.WorkTimeAnalysisStep.expected_work_time:type_name -> google.protobuf.Duration
	26, // 15: tkd.roster.v1.WorkTimeAnalysisStep.work_time_per_week:type_name -> google.protobuf.Duration
	26, // 16: tkd.roster.v1.WorkTimeAnalysisStep.planned:type_name -> google.protobuf.Duration
	26, // 17: tkd.roster.v1.WorkTimeAnalysis.planned_time:type_name -> google.protobuf.Duration
	26, // 18: tkd.roster.v1.WorkTimeAnalysis.expected_time:type_name -> google.protobuf.Duration
	5,  // 19: tkd.roster.v1.WorkTimeAnalysis.steps:type_name -> tkd.roster.v1.WorkTimeAnalysisStep
	2,  // 20: tkd.roster.v1.SaveRosterResponse.roster:type_name -> tkd.roster.v1.Roster
	6,  // 21: tkd.roster.v1.SaveRosterResponse.work_time_analysis:type_name -> tkd.roster.v1.WorkTimeAnalysis
	8,  // 22: tkd.roster.v1.AnalyzeWorkTimeRequest.users:type_name -> tkd.roster.v1.UsersToAnalyze
	6,  // 23: tkd.roster.v1.AnalyzeWorkTimeResponse.results:type_name -> tkd.roster.v1.WorkTimeAnalysis
	26, // 24: tkd.roster.v1.ApproveRosterWorkTimeSplit.time_off:type_name -> google.protobuf.Duration
	26, // 25: tkd.roster.v1.ApproveRosterWorkTimeSplit.vacation:type_name -> google.protobuf.Duration
	23, // 26: tkd.roster.v1.ApproveRosterRequest.work_time_split:type_name -> tkd.roster.v1.ApproveRosterRequest.WorkTimeSplitEntry
	24, // 27: tkd.roster.v1.GetRosterRequest.date:type_name -> google.protobuf.Timestamp
	25, // 28: tkd.roster.v1.GetRosterRequest.read_mask:type_name -> google.protobuf.FieldMask
	2,  // 29: tkd.roster.v1.GetRosterResponse.roster:type_name -> tkd.roster.v1.Roster
	6,  // 30: tkd.roster.v1.GetRosterResponse.work_time_analysis:type_name -> tkd.roster.v1.WorkTimeAnalysis
	24, // 31: tkd.roster.v1.GetWorkingStaffRequest.time:type_name -> google.protobuf.Timestamp
	25, // 32: tkd.roster.v1.GetWorkingStaffRequest.read_maks:type_name -> google.protobuf.FieldMask
	1,  // 33: tkd.roster.v1.GetWorkingStaffResponse.current_shifts:type_name -> tkd.roster.v1.PlannedShift
	25, // 34: tkd.roster.v1.GetRequiredShiftsRequest.read_mask:type_name -> google.protobuf.FieldMask
	0,  // 35: tkd.roster.v1.GetRequiredShiftsResponse.required_shifts:type_name -> tkd.roster.v1.RequiredShift
	27, // 36: tkd.roster.v1.GetRequiredShiftsResponse.work_shift_definitions:type_name -> tkd.roster.v1.WorkShift
	28, // 37: tkd.roster.v1.RequiredShift.ViolationsPerUserIdEntry.value:type_name -> tkd.roster.v1.ConstraintViolationList
	11, // 38: tkd.roster.v1.ApproveRosterRequest.WorkTimeSplitEntry.value:type_name -> tkd.roster.v1.ApproveRosterWorkTimeSplit
	3,  // 39: tkd.roster.v1.RosterService.SaveRoster:input_type -> tkd.roster.v1.SaveRosterRequest
	14, // 40: tkd.roster.v1.RosterService.DeleteRoster:input_type -> tkd.roster.v1.DeleteRosterRequest
	9,  // 41: tkd.roster.v1.RosterService.AnalyzeWorkTime:input_type -> tkd.roster.v1.AnalyzeWorkTimeRequest
	12, // 42: tkd.roster.v1.RosterService.ApproveRoster:input_type -> tkd.roster.v1.ApproveRosterRequest
	16, // 43: tkd.roster.v1.RosterService.GetRoster:input_type -> tkd.roster.v1.GetRosterRequest
	18, // 44: tkd.roster.v1.RosterService.GetWorkingStaff:input_type -> tkd.roster.v1.GetWorkingStaffRequest
	20, // 45: tkd.roster.v1.RosterService.GetRequiredShifts:input_type -> tkd.roster.v1.GetRequiredShiftsRequest
	7,  // 46: tkd.roster.v1.RosterService.SaveRoster:output_type -> tkd.roster.v1.SaveRosterResponse
	15, // 47: tkd.roster.v1.RosterService.DeleteRoster:output_type -> tkd.roster.v1.DeleteRosterResponse
	10, // 48: tkd.roster.v1.RosterService.AnalyzeWorkTime:output_type -> tkd.roster.v1.AnalyzeWorkTimeResponse
	13, // 49: tkd.roster.v1.RosterService.ApproveRoster:output_type -> tkd.roster.v1.ApproveRosterResponse
	17, // 50: tkd.roster.v1.RosterService.GetRoster:output_type -> tkd.roster.v1.GetRosterResponse
	19, // 51: tkd.roster.v1.RosterService.GetWorkingStaff:output_type -> tkd.roster.v1.GetWorkingStaffResponse
	21, // 52: tkd.roster.v1.RosterService.GetRequiredShifts:output_type -> tkd.roster.v1.GetRequiredShiftsResponse
	46, // [46:53] is the sub-list for method output_type
	39, // [39:46] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_tkd_roster_v1_roster_proto_init() }
func file_tkd_roster_v1_roster_proto_init() {
	if File_tkd_roster_v1_roster_proto != nil {
		return
	}
	file_tkd_roster_v1_workshift_proto_init()
	file_tkd_roster_v1_worktime_proto_init()
	file_tkd_roster_v1_constraint_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tkd_roster_v1_roster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlannedShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeAnalysisWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeAnalysisStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersToAnalyze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeWorkTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeWorkTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRosterWorkTimeSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkingStaffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkingStaffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequiredShiftsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tkd_roster_v1_roster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequiredShiftsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tkd_roster_v1_roster_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*GetRosterRequest_Id)(nil),
		(*GetRosterRequest_Date)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_roster_v1_roster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_roster_v1_roster_proto_goTypes,
		DependencyIndexes: file_tkd_roster_v1_roster_proto_depIdxs,
		MessageInfos:      file_tkd_roster_v1_roster_proto_msgTypes,
	}.Build()
	File_tkd_roster_v1_roster_proto = out.File
	file_tkd_roster_v1_roster_proto_rawDesc = nil
	file_tkd_roster_v1_roster_proto_goTypes = nil
	file_tkd_roster_v1_roster_proto_depIdxs = nil
}
