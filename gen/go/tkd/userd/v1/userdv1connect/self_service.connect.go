// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/userd/v1/self_service.proto

package userdv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/userd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SelfServiceServiceName is the fully-qualified name of the SelfServiceService service.
	SelfServiceServiceName = "tkd.userd.v1.SelfServiceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SelfServiceServiceChangePasswordProcedure is the fully-qualified name of the SelfServiceService's
	// ChangePassword RPC.
	SelfServiceServiceChangePasswordProcedure = "/tkd.userd.v1.SelfServiceService/ChangePassword"
	// SelfServiceServiceValidateEmailProcedure is the fully-qualified name of the SelfServiceService's
	// ValidateEmail RPC.
	SelfServiceServiceValidateEmailProcedure = "/tkd.userd.v1.SelfServiceService/ValidateEmail"
	// SelfServiceServiceUpdateProfileProcedure is the fully-qualified name of the SelfServiceService's
	// UpdateProfile RPC.
	SelfServiceServiceUpdateProfileProcedure = "/tkd.userd.v1.SelfServiceService/UpdateProfile"
)

// SelfServiceServiceClient is a client for the tkd.userd.v1.SelfServiceService service.
type SelfServiceServiceClient interface {
	ChangePassword(context.Context, *connect_go.Request[v1.ChangePasswordRequest]) (*connect_go.Response[v1.ChangePasswordResponse], error)
	ValidateEmail(context.Context, *connect_go.Request[v1.ValidateEmailRequest]) (*connect_go.Response[v1.ValidateEmailResponse], error)
	UpdateProfile(context.Context, *connect_go.Request[v1.UpdateProfileRequest]) (*connect_go.Response[v1.UpdateProfileResponse], error)
}

// NewSelfServiceServiceClient constructs a client for the tkd.userd.v1.SelfServiceService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSelfServiceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SelfServiceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &selfServiceServiceClient{
		changePassword: connect_go.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+SelfServiceServiceChangePasswordProcedure,
			opts...,
		),
		validateEmail: connect_go.NewClient[v1.ValidateEmailRequest, v1.ValidateEmailResponse](
			httpClient,
			baseURL+SelfServiceServiceValidateEmailProcedure,
			opts...,
		),
		updateProfile: connect_go.NewClient[v1.UpdateProfileRequest, v1.UpdateProfileResponse](
			httpClient,
			baseURL+SelfServiceServiceUpdateProfileProcedure,
			opts...,
		),
	}
}

// selfServiceServiceClient implements SelfServiceServiceClient.
type selfServiceServiceClient struct {
	changePassword *connect_go.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	validateEmail  *connect_go.Client[v1.ValidateEmailRequest, v1.ValidateEmailResponse]
	updateProfile  *connect_go.Client[v1.UpdateProfileRequest, v1.UpdateProfileResponse]
}

// ChangePassword calls tkd.userd.v1.SelfServiceService.ChangePassword.
func (c *selfServiceServiceClient) ChangePassword(ctx context.Context, req *connect_go.Request[v1.ChangePasswordRequest]) (*connect_go.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// ValidateEmail calls tkd.userd.v1.SelfServiceService.ValidateEmail.
func (c *selfServiceServiceClient) ValidateEmail(ctx context.Context, req *connect_go.Request[v1.ValidateEmailRequest]) (*connect_go.Response[v1.ValidateEmailResponse], error) {
	return c.validateEmail.CallUnary(ctx, req)
}

// UpdateProfile calls tkd.userd.v1.SelfServiceService.UpdateProfile.
func (c *selfServiceServiceClient) UpdateProfile(ctx context.Context, req *connect_go.Request[v1.UpdateProfileRequest]) (*connect_go.Response[v1.UpdateProfileResponse], error) {
	return c.updateProfile.CallUnary(ctx, req)
}

// SelfServiceServiceHandler is an implementation of the tkd.userd.v1.SelfServiceService service.
type SelfServiceServiceHandler interface {
	ChangePassword(context.Context, *connect_go.Request[v1.ChangePasswordRequest]) (*connect_go.Response[v1.ChangePasswordResponse], error)
	ValidateEmail(context.Context, *connect_go.Request[v1.ValidateEmailRequest]) (*connect_go.Response[v1.ValidateEmailResponse], error)
	UpdateProfile(context.Context, *connect_go.Request[v1.UpdateProfileRequest]) (*connect_go.Response[v1.UpdateProfileResponse], error)
}

// NewSelfServiceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSelfServiceServiceHandler(svc SelfServiceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SelfServiceServiceChangePasswordProcedure, connect_go.NewUnaryHandler(
		SelfServiceServiceChangePasswordProcedure,
		svc.ChangePassword,
		opts...,
	))
	mux.Handle(SelfServiceServiceValidateEmailProcedure, connect_go.NewUnaryHandler(
		SelfServiceServiceValidateEmailProcedure,
		svc.ValidateEmail,
		opts...,
	))
	mux.Handle(SelfServiceServiceUpdateProfileProcedure, connect_go.NewUnaryHandler(
		SelfServiceServiceUpdateProfileProcedure,
		svc.UpdateProfile,
		opts...,
	))
	return "/tkd.userd.v1.SelfServiceService/", mux
}

// UnimplementedSelfServiceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSelfServiceServiceHandler struct{}

func (UnimplementedSelfServiceServiceHandler) ChangePassword(context.Context, *connect_go.Request[v1.ChangePasswordRequest]) (*connect_go.Response[v1.ChangePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.userd.v1.SelfServiceService.ChangePassword is not implemented"))
}

func (UnimplementedSelfServiceServiceHandler) ValidateEmail(context.Context, *connect_go.Request[v1.ValidateEmailRequest]) (*connect_go.Response[v1.ValidateEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.userd.v1.SelfServiceService.ValidateEmail is not implemented"))
}

func (UnimplementedSelfServiceServiceHandler) UpdateProfile(context.Context, *connect_go.Request[v1.UpdateProfileRequest]) (*connect_go.Response[v1.UpdateProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.userd.v1.SelfServiceService.UpdateProfile is not implemented"))
}
