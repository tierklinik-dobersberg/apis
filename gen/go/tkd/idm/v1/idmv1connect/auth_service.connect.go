// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/idm/v1/auth_service.proto

package idmv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/idm/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "tkd.idm.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/tkd.idm.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/tkd.idm.v1.AuthService/Logout"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/tkd.idm.v1.AuthService/RefreshToken"
	// AuthServiceIntrospectProcedure is the fully-qualified name of the AuthService's Introspect RPC.
	AuthServiceIntrospectProcedure = "/tkd.idm.v1.AuthService/Introspect"
	// AuthServiceGenerateRegistrationTokenProcedure is the fully-qualified name of the AuthService's
	// GenerateRegistrationToken RPC.
	AuthServiceGenerateRegistrationTokenProcedure = "/tkd.idm.v1.AuthService/GenerateRegistrationToken"
	// AuthServiceValidateRegistrationTokenProcedure is the fully-qualified name of the AuthService's
	// ValidateRegistrationToken RPC.
	AuthServiceValidateRegistrationTokenProcedure = "/tkd.idm.v1.AuthService/ValidateRegistrationToken"
	// AuthServiceRegisterUserProcedure is the fully-qualified name of the AuthService's RegisterUser
	// RPC.
	AuthServiceRegisterUserProcedure = "/tkd.idm.v1.AuthService/RegisterUser"
)

// AuthServiceClient is a client for the tkd.idm.v1.AuthService service.
type AuthServiceClient interface {
	// Login requests authentication. The authentication type (flow) is
	// determined by the initial request and may require sub-sequent calls
	// to full-fill the requirements of the choosen authentication flow.
	//
	// Upon success, a LoginResponse with a AccessTokenResponse is returned to
	// the caller containing a short lived access token (typically about ~24h).
	// In addition, a "Set-Cookie" header is appended to the response that contains
	// a HttpOnly, Secure (if not in dev-mode) cookie with a long-lived refresh token
	// (~ about a month).
	//
	// In case the access token expires the client is expected to call the RefreshToken
	// endpoint to retrieve a new access token.
	//
	// Refresh tokens cannot be re-newed like this but require a full re-authentication
	// using the Login method.
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	// Logout invalidates the current access token that was used to call the
	// method. If a refresh token is appended in the logout request, it will be invalidated
	// as well.
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	RefreshToken(context.Context, *connect_go.Request[v1.RefreshTokenRequest]) (*connect_go.Response[v1.RefreshTokenResponse], error)
	Introspect(context.Context, *connect_go.Request[v1.IntrospectRequest]) (*connect_go.Response[v1.IntrospectResponse], error)
	GenerateRegistrationToken(context.Context, *connect_go.Request[v1.GenerateRegistrationTokenRequest]) (*connect_go.Response[v1.GenerateRegistrationTokenResponse], error)
	// Unauthenticated on purpose
	ValidateRegistrationToken(context.Context, *connect_go.Request[v1.ValidateRegistrationTokenRequest]) (*connect_go.Response[v1.ValidateRegistrationTokenResponse], error)
	// Unauthenticated on purpose
	RegisterUser(context.Context, *connect_go.Request[v1.RegisterUserRequest]) (*connect_go.Response[v1.RegisterUserResponse], error)
}

// NewAuthServiceClient constructs a client for the tkd.idm.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			opts...,
		),
		logout: connect_go.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			opts...,
		),
		refreshToken: connect_go.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			opts...,
		),
		introspect: connect_go.NewClient[v1.IntrospectRequest, v1.IntrospectResponse](
			httpClient,
			baseURL+AuthServiceIntrospectProcedure,
			opts...,
		),
		generateRegistrationToken: connect_go.NewClient[v1.GenerateRegistrationTokenRequest, v1.GenerateRegistrationTokenResponse](
			httpClient,
			baseURL+AuthServiceGenerateRegistrationTokenProcedure,
			opts...,
		),
		validateRegistrationToken: connect_go.NewClient[v1.ValidateRegistrationTokenRequest, v1.ValidateRegistrationTokenResponse](
			httpClient,
			baseURL+AuthServiceValidateRegistrationTokenProcedure,
			opts...,
		),
		registerUser: connect_go.NewClient[v1.RegisterUserRequest, v1.RegisterUserResponse](
			httpClient,
			baseURL+AuthServiceRegisterUserProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login                     *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	logout                    *connect_go.Client[v1.LogoutRequest, v1.LogoutResponse]
	refreshToken              *connect_go.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	introspect                *connect_go.Client[v1.IntrospectRequest, v1.IntrospectResponse]
	generateRegistrationToken *connect_go.Client[v1.GenerateRegistrationTokenRequest, v1.GenerateRegistrationTokenResponse]
	validateRegistrationToken *connect_go.Client[v1.ValidateRegistrationTokenRequest, v1.ValidateRegistrationTokenResponse]
	registerUser              *connect_go.Client[v1.RegisterUserRequest, v1.RegisterUserResponse]
}

// Login calls tkd.idm.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls tkd.idm.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls tkd.idm.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect_go.Request[v1.RefreshTokenRequest]) (*connect_go.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Introspect calls tkd.idm.v1.AuthService.Introspect.
func (c *authServiceClient) Introspect(ctx context.Context, req *connect_go.Request[v1.IntrospectRequest]) (*connect_go.Response[v1.IntrospectResponse], error) {
	return c.introspect.CallUnary(ctx, req)
}

// GenerateRegistrationToken calls tkd.idm.v1.AuthService.GenerateRegistrationToken.
func (c *authServiceClient) GenerateRegistrationToken(ctx context.Context, req *connect_go.Request[v1.GenerateRegistrationTokenRequest]) (*connect_go.Response[v1.GenerateRegistrationTokenResponse], error) {
	return c.generateRegistrationToken.CallUnary(ctx, req)
}

// ValidateRegistrationToken calls tkd.idm.v1.AuthService.ValidateRegistrationToken.
func (c *authServiceClient) ValidateRegistrationToken(ctx context.Context, req *connect_go.Request[v1.ValidateRegistrationTokenRequest]) (*connect_go.Response[v1.ValidateRegistrationTokenResponse], error) {
	return c.validateRegistrationToken.CallUnary(ctx, req)
}

// RegisterUser calls tkd.idm.v1.AuthService.RegisterUser.
func (c *authServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[v1.RegisterUserRequest]) (*connect_go.Response[v1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the tkd.idm.v1.AuthService service.
type AuthServiceHandler interface {
	// Login requests authentication. The authentication type (flow) is
	// determined by the initial request and may require sub-sequent calls
	// to full-fill the requirements of the choosen authentication flow.
	//
	// Upon success, a LoginResponse with a AccessTokenResponse is returned to
	// the caller containing a short lived access token (typically about ~24h).
	// In addition, a "Set-Cookie" header is appended to the response that contains
	// a HttpOnly, Secure (if not in dev-mode) cookie with a long-lived refresh token
	// (~ about a month).
	//
	// In case the access token expires the client is expected to call the RefreshToken
	// endpoint to retrieve a new access token.
	//
	// Refresh tokens cannot be re-newed like this but require a full re-authentication
	// using the Login method.
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	// Logout invalidates the current access token that was used to call the
	// method. If a refresh token is appended in the logout request, it will be invalidated
	// as well.
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	RefreshToken(context.Context, *connect_go.Request[v1.RefreshTokenRequest]) (*connect_go.Response[v1.RefreshTokenResponse], error)
	Introspect(context.Context, *connect_go.Request[v1.IntrospectRequest]) (*connect_go.Response[v1.IntrospectResponse], error)
	GenerateRegistrationToken(context.Context, *connect_go.Request[v1.GenerateRegistrationTokenRequest]) (*connect_go.Response[v1.GenerateRegistrationTokenResponse], error)
	// Unauthenticated on purpose
	ValidateRegistrationToken(context.Context, *connect_go.Request[v1.ValidateRegistrationTokenRequest]) (*connect_go.Response[v1.ValidateRegistrationTokenResponse], error)
	// Unauthenticated on purpose
	RegisterUser(context.Context, *connect_go.Request[v1.RegisterUserRequest]) (*connect_go.Response[v1.RegisterUserResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authServiceLoginHandler := connect_go.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		opts...,
	)
	authServiceLogoutHandler := connect_go.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		opts...,
	)
	authServiceRefreshTokenHandler := connect_go.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	authServiceIntrospectHandler := connect_go.NewUnaryHandler(
		AuthServiceIntrospectProcedure,
		svc.Introspect,
		opts...,
	)
	authServiceGenerateRegistrationTokenHandler := connect_go.NewUnaryHandler(
		AuthServiceGenerateRegistrationTokenProcedure,
		svc.GenerateRegistrationToken,
		opts...,
	)
	authServiceValidateRegistrationTokenHandler := connect_go.NewUnaryHandler(
		AuthServiceValidateRegistrationTokenProcedure,
		svc.ValidateRegistrationToken,
		opts...,
	)
	authServiceRegisterUserHandler := connect_go.NewUnaryHandler(
		AuthServiceRegisterUserProcedure,
		svc.RegisterUser,
		opts...,
	)
	return "/tkd.idm.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceIntrospectProcedure:
			authServiceIntrospectHandler.ServeHTTP(w, r)
		case AuthServiceGenerateRegistrationTokenProcedure:
			authServiceGenerateRegistrationTokenHandler.ServeHTTP(w, r)
		case AuthServiceValidateRegistrationTokenProcedure:
			authServiceValidateRegistrationTokenHandler.ServeHTTP(w, r)
		case AuthServiceRegisterUserProcedure:
			authServiceRegisterUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect_go.Request[v1.RefreshTokenRequest]) (*connect_go.Response[v1.RefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) Introspect(context.Context, *connect_go.Request[v1.IntrospectRequest]) (*connect_go.Response[v1.IntrospectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.Introspect is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateRegistrationToken(context.Context, *connect_go.Request[v1.GenerateRegistrationTokenRequest]) (*connect_go.Response[v1.GenerateRegistrationTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.GenerateRegistrationToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateRegistrationToken(context.Context, *connect_go.Request[v1.ValidateRegistrationTokenRequest]) (*connect_go.Response[v1.ValidateRegistrationTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.ValidateRegistrationToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterUser(context.Context, *connect_go.Request[v1.RegisterUserRequest]) (*connect_go.Response[v1.RegisterUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.AuthService.RegisterUser is not implemented"))
}
