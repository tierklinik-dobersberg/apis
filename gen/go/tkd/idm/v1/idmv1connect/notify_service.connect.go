// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/idm/v1/notify_service.proto

package idmv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/idm/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotifyServiceName is the fully-qualified name of the NotifyService service.
	NotifyServiceName = "tkd.idm.v1.NotifyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotifyServiceSendNotificationProcedure is the fully-qualified name of the NotifyService's
	// SendNotification RPC.
	NotifyServiceSendNotificationProcedure = "/tkd.idm.v1.NotifyService/SendNotification"
)

// NotifyServiceClient is a client for the tkd.idm.v1.NotifyService service.
type NotifyServiceClient interface {
	SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[v1.SendNotificationResponse], error)
}

// NewNotifyServiceClient constructs a client for the tkd.idm.v1.NotifyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotifyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotifyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notifyServiceClient{
		sendNotification: connect_go.NewClient[v1.SendNotificationRequest, v1.SendNotificationResponse](
			httpClient,
			baseURL+NotifyServiceSendNotificationProcedure,
			opts...,
		),
	}
}

// notifyServiceClient implements NotifyServiceClient.
type notifyServiceClient struct {
	sendNotification *connect_go.Client[v1.SendNotificationRequest, v1.SendNotificationResponse]
}

// SendNotification calls tkd.idm.v1.NotifyService.SendNotification.
func (c *notifyServiceClient) SendNotification(ctx context.Context, req *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[v1.SendNotificationResponse], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// NotifyServiceHandler is an implementation of the tkd.idm.v1.NotifyService service.
type NotifyServiceHandler interface {
	SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[v1.SendNotificationResponse], error)
}

// NewNotifyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotifyServiceHandler(svc NotifyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	notifyServiceSendNotificationHandler := connect_go.NewUnaryHandler(
		NotifyServiceSendNotificationProcedure,
		svc.SendNotification,
		opts...,
	)
	return "/tkd.idm.v1.NotifyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotifyServiceSendNotificationProcedure:
			notifyServiceSendNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotifyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotifyServiceHandler struct{}

func (UnimplementedNotifyServiceHandler) SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[v1.SendNotificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.idm.v1.NotifyService.SendNotification is not implemented"))
}
