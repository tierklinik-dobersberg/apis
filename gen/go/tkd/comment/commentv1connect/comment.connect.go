// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/comment/comment.proto

package commentv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	comment "github.com/tierklinik-dobersberg/apis/gen/go/tkd/comment"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CommentServiceName is the fully-qualified name of the CommentService service.
	CommentServiceName = "tkd.comment.v1.CommentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommentServiceCreateScopeProcedure is the fully-qualified name of the CommentService's
	// CreateScope RPC.
	CommentServiceCreateScopeProcedure = "/tkd.comment.v1.CommentService/CreateScope"
	// CommentServiceListScopeProcedure is the fully-qualified name of the CommentService's ListScope
	// RPC.
	CommentServiceListScopeProcedure = "/tkd.comment.v1.CommentService/ListScope"
	// CommentServiceDeleteScopeProcedure is the fully-qualified name of the CommentService's
	// DeleteScope RPC.
	CommentServiceDeleteScopeProcedure = "/tkd.comment.v1.CommentService/DeleteScope"
	// CommentServiceCreateCommentProcedure is the fully-qualified name of the CommentService's
	// CreateComment RPC.
	CommentServiceCreateCommentProcedure = "/tkd.comment.v1.CommentService/CreateComment"
	// CommentServiceGetCommentProcedure is the fully-qualified name of the CommentService's GetComment
	// RPC.
	CommentServiceGetCommentProcedure = "/tkd.comment.v1.CommentService/GetComment"
	// CommentServiceListCommentsProcedure is the fully-qualified name of the CommentService's
	// ListComments RPC.
	CommentServiceListCommentsProcedure = "/tkd.comment.v1.CommentService/ListComments"
)

// CommentServiceClient is a client for the tkd.comment.v1.CommentService service.
type CommentServiceClient interface {
	CreateScope(context.Context, *connect_go.Request[comment.CreateScopeRequest]) (*connect_go.Response[comment.CreateScopeResponse], error)
	ListScope(context.Context, *connect_go.Request[comment.ListScopeRequest]) (*connect_go.Response[comment.ListScopeResponse], error)
	DeleteScope(context.Context, *connect_go.Request[comment.DeleteScopeRequest]) (*connect_go.Response[comment.DeleteScopeResponse], error)
	CreateComment(context.Context, *connect_go.Request[comment.CreateCommentRequest]) (*connect_go.Response[comment.CreateCommentResponse], error)
	GetComment(context.Context, *connect_go.Request[comment.GetCommentRequest]) (*connect_go.Response[comment.GetCommentResponse], error)
	ListComments(context.Context, *connect_go.Request[comment.ListCommentsRequest]) (*connect_go.Response[comment.ListCommentsResponse], error)
}

// NewCommentServiceClient constructs a client for the tkd.comment.v1.CommentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CommentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commentServiceClient{
		createScope: connect_go.NewClient[comment.CreateScopeRequest, comment.CreateScopeResponse](
			httpClient,
			baseURL+CommentServiceCreateScopeProcedure,
			opts...,
		),
		listScope: connect_go.NewClient[comment.ListScopeRequest, comment.ListScopeResponse](
			httpClient,
			baseURL+CommentServiceListScopeProcedure,
			opts...,
		),
		deleteScope: connect_go.NewClient[comment.DeleteScopeRequest, comment.DeleteScopeResponse](
			httpClient,
			baseURL+CommentServiceDeleteScopeProcedure,
			opts...,
		),
		createComment: connect_go.NewClient[comment.CreateCommentRequest, comment.CreateCommentResponse](
			httpClient,
			baseURL+CommentServiceCreateCommentProcedure,
			opts...,
		),
		getComment: connect_go.NewClient[comment.GetCommentRequest, comment.GetCommentResponse](
			httpClient,
			baseURL+CommentServiceGetCommentProcedure,
			opts...,
		),
		listComments: connect_go.NewClient[comment.ListCommentsRequest, comment.ListCommentsResponse](
			httpClient,
			baseURL+CommentServiceListCommentsProcedure,
			opts...,
		),
	}
}

// commentServiceClient implements CommentServiceClient.
type commentServiceClient struct {
	createScope   *connect_go.Client[comment.CreateScopeRequest, comment.CreateScopeResponse]
	listScope     *connect_go.Client[comment.ListScopeRequest, comment.ListScopeResponse]
	deleteScope   *connect_go.Client[comment.DeleteScopeRequest, comment.DeleteScopeResponse]
	createComment *connect_go.Client[comment.CreateCommentRequest, comment.CreateCommentResponse]
	getComment    *connect_go.Client[comment.GetCommentRequest, comment.GetCommentResponse]
	listComments  *connect_go.Client[comment.ListCommentsRequest, comment.ListCommentsResponse]
}

// CreateScope calls tkd.comment.v1.CommentService.CreateScope.
func (c *commentServiceClient) CreateScope(ctx context.Context, req *connect_go.Request[comment.CreateScopeRequest]) (*connect_go.Response[comment.CreateScopeResponse], error) {
	return c.createScope.CallUnary(ctx, req)
}

// ListScope calls tkd.comment.v1.CommentService.ListScope.
func (c *commentServiceClient) ListScope(ctx context.Context, req *connect_go.Request[comment.ListScopeRequest]) (*connect_go.Response[comment.ListScopeResponse], error) {
	return c.listScope.CallUnary(ctx, req)
}

// DeleteScope calls tkd.comment.v1.CommentService.DeleteScope.
func (c *commentServiceClient) DeleteScope(ctx context.Context, req *connect_go.Request[comment.DeleteScopeRequest]) (*connect_go.Response[comment.DeleteScopeResponse], error) {
	return c.deleteScope.CallUnary(ctx, req)
}

// CreateComment calls tkd.comment.v1.CommentService.CreateComment.
func (c *commentServiceClient) CreateComment(ctx context.Context, req *connect_go.Request[comment.CreateCommentRequest]) (*connect_go.Response[comment.CreateCommentResponse], error) {
	return c.createComment.CallUnary(ctx, req)
}

// GetComment calls tkd.comment.v1.CommentService.GetComment.
func (c *commentServiceClient) GetComment(ctx context.Context, req *connect_go.Request[comment.GetCommentRequest]) (*connect_go.Response[comment.GetCommentResponse], error) {
	return c.getComment.CallUnary(ctx, req)
}

// ListComments calls tkd.comment.v1.CommentService.ListComments.
func (c *commentServiceClient) ListComments(ctx context.Context, req *connect_go.Request[comment.ListCommentsRequest]) (*connect_go.Response[comment.ListCommentsResponse], error) {
	return c.listComments.CallUnary(ctx, req)
}

// CommentServiceHandler is an implementation of the tkd.comment.v1.CommentService service.
type CommentServiceHandler interface {
	CreateScope(context.Context, *connect_go.Request[comment.CreateScopeRequest]) (*connect_go.Response[comment.CreateScopeResponse], error)
	ListScope(context.Context, *connect_go.Request[comment.ListScopeRequest]) (*connect_go.Response[comment.ListScopeResponse], error)
	DeleteScope(context.Context, *connect_go.Request[comment.DeleteScopeRequest]) (*connect_go.Response[comment.DeleteScopeResponse], error)
	CreateComment(context.Context, *connect_go.Request[comment.CreateCommentRequest]) (*connect_go.Response[comment.CreateCommentResponse], error)
	GetComment(context.Context, *connect_go.Request[comment.GetCommentRequest]) (*connect_go.Response[comment.GetCommentResponse], error)
	ListComments(context.Context, *connect_go.Request[comment.ListCommentsRequest]) (*connect_go.Response[comment.ListCommentsResponse], error)
}

// NewCommentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommentServiceHandler(svc CommentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	commentServiceCreateScopeHandler := connect_go.NewUnaryHandler(
		CommentServiceCreateScopeProcedure,
		svc.CreateScope,
		opts...,
	)
	commentServiceListScopeHandler := connect_go.NewUnaryHandler(
		CommentServiceListScopeProcedure,
		svc.ListScope,
		opts...,
	)
	commentServiceDeleteScopeHandler := connect_go.NewUnaryHandler(
		CommentServiceDeleteScopeProcedure,
		svc.DeleteScope,
		opts...,
	)
	commentServiceCreateCommentHandler := connect_go.NewUnaryHandler(
		CommentServiceCreateCommentProcedure,
		svc.CreateComment,
		opts...,
	)
	commentServiceGetCommentHandler := connect_go.NewUnaryHandler(
		CommentServiceGetCommentProcedure,
		svc.GetComment,
		opts...,
	)
	commentServiceListCommentsHandler := connect_go.NewUnaryHandler(
		CommentServiceListCommentsProcedure,
		svc.ListComments,
		opts...,
	)
	return "/tkd.comment.v1.CommentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommentServiceCreateScopeProcedure:
			commentServiceCreateScopeHandler.ServeHTTP(w, r)
		case CommentServiceListScopeProcedure:
			commentServiceListScopeHandler.ServeHTTP(w, r)
		case CommentServiceDeleteScopeProcedure:
			commentServiceDeleteScopeHandler.ServeHTTP(w, r)
		case CommentServiceCreateCommentProcedure:
			commentServiceCreateCommentHandler.ServeHTTP(w, r)
		case CommentServiceGetCommentProcedure:
			commentServiceGetCommentHandler.ServeHTTP(w, r)
		case CommentServiceListCommentsProcedure:
			commentServiceListCommentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommentServiceHandler struct{}

func (UnimplementedCommentServiceHandler) CreateScope(context.Context, *connect_go.Request[comment.CreateScopeRequest]) (*connect_go.Response[comment.CreateScopeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.CreateScope is not implemented"))
}

func (UnimplementedCommentServiceHandler) ListScope(context.Context, *connect_go.Request[comment.ListScopeRequest]) (*connect_go.Response[comment.ListScopeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.ListScope is not implemented"))
}

func (UnimplementedCommentServiceHandler) DeleteScope(context.Context, *connect_go.Request[comment.DeleteScopeRequest]) (*connect_go.Response[comment.DeleteScopeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.DeleteScope is not implemented"))
}

func (UnimplementedCommentServiceHandler) CreateComment(context.Context, *connect_go.Request[comment.CreateCommentRequest]) (*connect_go.Response[comment.CreateCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.CreateComment is not implemented"))
}

func (UnimplementedCommentServiceHandler) GetComment(context.Context, *connect_go.Request[comment.GetCommentRequest]) (*connect_go.Response[comment.GetCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.GetComment is not implemented"))
}

func (UnimplementedCommentServiceHandler) ListComments(context.Context, *connect_go.Request[comment.ListCommentsRequest]) (*connect_go.Response[comment.ListCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.comment.v1.CommentService.ListComments is not implemented"))
}
