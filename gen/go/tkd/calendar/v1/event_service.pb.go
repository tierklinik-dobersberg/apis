// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: tkd/calendar/v1/event_service.proto

package calendarv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalenarEventRequestKind int32

const (
	CalenarEventRequestKind_CALENDAR_EVENT_REQUEST_KIND_UNSPECIFIED       CalenarEventRequestKind = 0
	CalenarEventRequestKind_CALENDAR_EVENT_REQUEST_KIND_EVENTS            CalenarEventRequestKind = 1
	CalenarEventRequestKind_CALENDAR_EVENT_REQUEST_KIND_FREE_SLOTS        CalenarEventRequestKind = 2
	CalenarEventRequestKind_CALENDAR_EVENT_REQUEST_KIND_VIRTUAL_RESOURCES CalenarEventRequestKind = 3
)

// Enum value maps for CalenarEventRequestKind.
var (
	CalenarEventRequestKind_name = map[int32]string{
		0: "CALENDAR_EVENT_REQUEST_KIND_UNSPECIFIED",
		1: "CALENDAR_EVENT_REQUEST_KIND_EVENTS",
		2: "CALENDAR_EVENT_REQUEST_KIND_FREE_SLOTS",
		3: "CALENDAR_EVENT_REQUEST_KIND_VIRTUAL_RESOURCES",
	}
	CalenarEventRequestKind_value = map[string]int32{
		"CALENDAR_EVENT_REQUEST_KIND_UNSPECIFIED":       0,
		"CALENDAR_EVENT_REQUEST_KIND_EVENTS":            1,
		"CALENDAR_EVENT_REQUEST_KIND_FREE_SLOTS":        2,
		"CALENDAR_EVENT_REQUEST_KIND_VIRTUAL_RESOURCES": 3,
	}
)

func (x CalenarEventRequestKind) Enum() *CalenarEventRequestKind {
	p := new(CalenarEventRequestKind)
	*p = x
	return p
}

func (x CalenarEventRequestKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalenarEventRequestKind) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_calendar_v1_event_service_proto_enumTypes[0].Descriptor()
}

func (CalenarEventRequestKind) Type() protoreflect.EnumType {
	return &file_tkd_calendar_v1_event_service_proto_enumTypes[0]
}

func (x CalenarEventRequestKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalenarEventRequestKind.Descriptor instead.
func (CalenarEventRequestKind) EnumDescriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{0}
}

type ResourceCalendar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the unique name of the resource calendar
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is an optional display-name for the resource
	// calendar and defaults to the same value as name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Color is an optional color value (Hex-Format) for this resource.
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	// MaxConcurrentUse defines how many events are allowed at the same
	// time.
	// If unset, it defaults to 1
	MaxConcurrentUse uint32 `protobuf:"varint,4,opt,name=max_concurrent_use,json=maxConcurrentUse,proto3" json:"max_concurrent_use,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceCalendar) Reset() {
	*x = ResourceCalendar{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceCalendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCalendar) ProtoMessage() {}

func (x *ResourceCalendar) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCalendar.ProtoReflect.Descriptor instead.
func (*ResourceCalendar) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceCalendar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceCalendar) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResourceCalendar) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ResourceCalendar) GetMaxConcurrentUse() uint32 {
	if x != nil {
		return x.MaxConcurrentUse
	}
	return 0
}

type ListResourceCalendarsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ResourceCalendars []*ResourceCalendar    `protobuf:"bytes,1,rep,name=resource_calendars,json=resourceCalendars,proto3" json:"resource_calendars,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListResourceCalendarsResponse) Reset() {
	*x = ListResourceCalendarsResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourceCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceCalendarsResponse) ProtoMessage() {}

func (x *ListResourceCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceCalendarsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListResourceCalendarsResponse) GetResourceCalendars() []*ResourceCalendar {
	if x != nil {
		return x.ResourceCalendars
	}
	return nil
}

type ListResourceCalendarsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourceCalendarsRequest) Reset() {
	*x = ListResourceCalendarsRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourceCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceCalendarsRequest) ProtoMessage() {}

func (x *ListResourceCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceCalendarsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{2}
}

type DeleteResourceCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResourceCalendarRequest) Reset() {
	*x = DeleteResourceCalendarRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResourceCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceCalendarRequest) ProtoMessage() {}

func (x *DeleteResourceCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceCalendarRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceCalendarRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteResourceCalendarRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListCalendarsRequest is used by the ListCalendars RPC. There are now message
// fields for now.
type ListCalendarsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IncludeVirtualResourceCalendars can be set to true to also include entries
	// for virtual resources.
	IncludeVirtualResourceCalendars bool `protobuf:"varint,1,opt,name=include_virtual_resource_calendars,json=includeVirtualResourceCalendars,proto3" json:"include_virtual_resource_calendars,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ListCalendarsRequest) Reset() {
	*x = ListCalendarsRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequest) ProtoMessage() {}

func (x *ListCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListCalendarsRequest) GetIncludeVirtualResourceCalendars() bool {
	if x != nil {
		return x.IncludeVirtualResourceCalendars
	}
	return false
}

// ListCalendarsResponse is the response of the ListCalendars RPC and contains a
// list of available calendars.
type ListCalendarsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendars     []*Calendar            `protobuf:"bytes,1,rep,name=calendars,proto3" json:"calendars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarsResponse) Reset() {
	*x = ListCalendarsResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsResponse) ProtoMessage() {}

func (x *ListCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListCalendarsResponse) GetCalendars() []*Calendar {
	if x != nil {
		return x.Calendars
	}
	return nil
}

// EventSource is used to query different event sources during the ListEvents
// RPC:
type EventSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CalendarIds is a list of calendar ids that should be searched for events.
	CalendarIds []string `protobuf:"bytes,1,rep,name=calendar_ids,json=calendarIds,proto3" json:"calendar_ids,omitempty"`
	// UserIds is a list of user IDs for which calendar event should be loaded.
	// When specified, cis-cal will lookup the users calendar id from cis-idms
	// additional user fields as specified in the configuration.
	UserIds       []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventSource) Reset() {
	*x = EventSource{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSource) ProtoMessage() {}

func (x *EventSource) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSource.ProtoReflect.Descriptor instead.
func (*EventSource) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{6}
}

func (x *EventSource) GetCalendarIds() []string {
	if x != nil {
		return x.CalendarIds
	}
	return nil
}

func (x *EventSource) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// ListEventsRequest is the request message for the ListEvents RPC and supports
// querying calendar events over a list of sources.
type ListEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source describes where cis-cal should look for calendar events. At least
	// on of the oneof members must be set.
	//
	// Types that are valid to be assigned to Source:
	//
	//	*ListEventsRequest_Sources
	//	*ListEventsRequest_AllCalendars
	//	*ListEventsRequest_AllUsers
	Source isListEventsRequest_Source `protobuf_oneof:"source"`
	// SearchTime allows to specify a search time for calendar events. At least
	// one of the oneof member fields must be set.
	//
	// Types that are valid to be assigned to SearchTime:
	//
	//	*ListEventsRequest_TimeRange
	//	*ListEventsRequest_Date
	SearchTime isListEventsRequest_SearchTime `protobuf_oneof:"search_time"`
	// ReadMask can be used to limit the number of fields returned in the
	// response.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// RequestKinds might be set to a list of calendar event request kinds that
	// should be returned.
	// If unset or the UNSPECIFIED value is used, it defaults to CALENDAR_EVENT_REQUEST_KIND_EVENTS
	// and only regular events will be returned.
	RequestKinds []CalenarEventRequestKind `protobuf:"varint,7,rep,packed,name=request_kinds,json=requestKinds,proto3,enum=tkd.calendar.v1.CalenarEventRequestKind" json:"request_kinds,omitempty"`
	// SearchText might be set to only include events that match the search text in one of the following
	// fields:
	//   - summary
	//   - description
	//   - location (not-yet)
	//
	// Note, if set, request_kinds must be set to CALENDAR_EVENT_REQUEST_KIND_EVENTS  or CALENDAR_EVENT_REQUEST_KIND_VIRTUAL otherwise no results
	// will be returned. That means, CALENDAR_EVENT_REQUEST_KINDS_FREE_SLOTS is ignored and will not yield any results.
	SearchText string `protobuf:"bytes,8,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	// CustomerId might be set to only list events that have a CustomerAnnotation set for the customer ID.
	CustomerId    string `protobuf:"bytes,9,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListEventsRequest) GetSource() isListEventsRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListEventsRequest) GetSources() *EventSource {
	if x != nil {
		if x, ok := x.Source.(*ListEventsRequest_Sources); ok {
			return x.Sources
		}
	}
	return nil
}

func (x *ListEventsRequest) GetAllCalendars() bool {
	if x != nil {
		if x, ok := x.Source.(*ListEventsRequest_AllCalendars); ok {
			return x.AllCalendars
		}
	}
	return false
}

func (x *ListEventsRequest) GetAllUsers() bool {
	if x != nil {
		if x, ok := x.Source.(*ListEventsRequest_AllUsers); ok {
			return x.AllUsers
		}
	}
	return false
}

func (x *ListEventsRequest) GetSearchTime() isListEventsRequest_SearchTime {
	if x != nil {
		return x.SearchTime
	}
	return nil
}

func (x *ListEventsRequest) GetTimeRange() *v1.TimeRange {
	if x != nil {
		if x, ok := x.SearchTime.(*ListEventsRequest_TimeRange); ok {
			return x.TimeRange
		}
	}
	return nil
}

func (x *ListEventsRequest) GetDate() string {
	if x != nil {
		if x, ok := x.SearchTime.(*ListEventsRequest_Date); ok {
			return x.Date
		}
	}
	return ""
}

func (x *ListEventsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListEventsRequest) GetRequestKinds() []CalenarEventRequestKind {
	if x != nil {
		return x.RequestKinds
	}
	return nil
}

func (x *ListEventsRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListEventsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type isListEventsRequest_Source interface {
	isListEventsRequest_Source()
}

type ListEventsRequest_Sources struct {
	// Sources can be used to specify a dedicated list of user and/or
	// calendar ids.
	Sources *EventSource `protobuf:"bytes,1,opt,name=sources,proto3,oneof"`
}

type ListEventsRequest_AllCalendars struct {
	// AllCalendars might be set to true to query all available calendars.
	// To get a list of available calendars, user the ListCalendars RPC.
	AllCalendars bool `protobuf:"varint,2,opt,name=all_calendars,json=allCalendars,proto3,oneof"`
}

type ListEventsRequest_AllUsers struct {
	// AllUsers might be set to true to query events from all user
	// calendars.
	AllUsers bool `protobuf:"varint,3,opt,name=all_users,json=allUsers,proto3,oneof"`
}

func (*ListEventsRequest_Sources) isListEventsRequest_Source() {}

func (*ListEventsRequest_AllCalendars) isListEventsRequest_Source() {}

func (*ListEventsRequest_AllUsers) isListEventsRequest_Source() {}

type isListEventsRequest_SearchTime interface {
	isListEventsRequest_SearchTime()
}

type ListEventsRequest_TimeRange struct {
	// TimeRange might be set to a start and end time. Only events that
	// start/end within the specified time range (inclusive) will be
	// returned.
	TimeRange *v1.TimeRange `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3,oneof"`
}

type ListEventsRequest_Date struct {
	// Date might be set to a date in the format of YYYY-MM-DD  or
	// YYYY/MM/DD. Only events that start OR end at the specified date will
	// be returned.
	Date string `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

func (*ListEventsRequest_TimeRange) isListEventsRequest_SearchTime() {}

func (*ListEventsRequest_Date) isListEventsRequest_SearchTime() {}

// CalendarEventList holds a list of events along the calendar definition. Use
// ReadMask from ListEventsRequest if not all fields are required in the
// response.
type CalendarEventList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Calendar holds the calendar definition.
	Calendar *Calendar `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	// Events holds a list of calendar events that matched the search query for
	// this calendar.
	Events        []*CalendarEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalendarEventList) Reset() {
	*x = CalendarEventList{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventList) ProtoMessage() {}

func (x *CalendarEventList) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventList.ProtoReflect.Descriptor instead.
func (*CalendarEventList) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{8}
}

func (x *CalendarEventList) GetCalendar() *Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *CalendarEventList) GetEvents() []*CalendarEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// ListEventsResponse is the response of the ListEvents RPC and contains a list
// of CalendarEventList messages that contains the calendar definition as well
// as the list of events that matched the search query.
type ListEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Results is a list of CalendarEventList containing events that matched the
	// search query.
	Results       []*CalendarEventList `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListEventsResponse) GetResults() []*CalendarEventList {
	if x != nil {
		return x.Results
	}
	return nil
}

// CreateEventRequest is used to create a new calendar event in the specified
// calendar.
type CreateEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CalendarId is the ID of the calendar where the new event should be
	// created.
	CalendarId string `protobuf:"bytes,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	// Name is the name or summary of the calendar event. This field is
	// required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description may hold an optional description of the calendar event.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Start holds the start-time of the calendar event (inclusive).
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// End holds the end-time of the calendar-event (inclusive).
	End *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	// ExtraData might be set to an abritrary protobuf message that should be
	// attached to the calendar event.
	ExtraData *anypb.Any `protobuf:"bytes,6,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// Resources is a list of resource names that are required for this calendar
	// event.
	Resources     []string `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateEventRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEventRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CreateEventRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CreateEventRequest) GetExtraData() *anypb.Any {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *CreateEventRequest) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

// CreateEventResponse is the response message of the CreateEvent RPC and
// contains the created event.
type CreateEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event holds the newly created calendar event.
	Event         *CalendarEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{11}
}

func (x *CreateEventResponse) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// UpdateEventRequest is the request message for the UpdateEvent RPC and might
// be used to partitially update a calendar event.
type UpdateEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CalendarId is the id of the calendar that contains the event.
	CalendarId string `protobuf:"bytes,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	// EventId is the unique (per-calendar) id of the event to update.
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Name can be set to the new name/summary of the event.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description can be set to a new description of the event.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Start can be set to the new start time of the event.
	Start *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	// End can be set to the new end-time of the event.
	End *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	// ExtraData can be set to replace the extra-data associated with the event.
	ExtraData *anypb.Any `protobuf:"bytes,7,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// Resources is a list of resource names that are required for this
	// calendar event.
	Resources []string `protobuf:"bytes,8,rep,name=resources,proto3" json:"resources,omitempty"`
	// UpdateMask specifies which fields of the original event should be
	// updated. If left empty, all fields will be replaced with the values from
	// the UpdateEventRequest message potentially clearing out fields if unset.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,20,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventRequest) Reset() {
	*x = UpdateEventRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRequest) ProtoMessage() {}

func (x *UpdateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateEventRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *UpdateEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UpdateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateEventRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *UpdateEventRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *UpdateEventRequest) GetExtraData() *anypb.Any {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *UpdateEventRequest) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *UpdateEventRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateEventResponse is the response message of the UpdateEvent RPC and
// contains the updated event definition.
type UpdateEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event holds the updated calendar event.
	Event         *CalendarEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventResponse) Reset() {
	*x = UpdateEventResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventResponse) ProtoMessage() {}

func (x *UpdateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateEventResponse) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// MoveEventRequest is the request message of the MoveEvent RPC and allows to
// move a calendar event from one calendar to another one. Note that the ID of
// the event might change after a successfull move!
type MoveEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source describes the source of the event.
	//
	// Types that are valid to be assigned to Source:
	//
	//	*MoveEventRequest_SourceCalendarId
	//	*MoveEventRequest_SourceUserId
	Source isMoveEventRequest_Source `protobuf_oneof:"source"`
	// EventId is the unique (per-calendar) id of the event to move to a new
	// calendar.
	EventId string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Target describes the target calendar where the event should be moved to.
	//
	// Types that are valid to be assigned to Target:
	//
	//	*MoveEventRequest_TargetCalendarId
	//	*MoveEventRequest_TargetUserId
	Target        isMoveEventRequest_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveEventRequest) Reset() {
	*x = MoveEventRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveEventRequest) ProtoMessage() {}

func (x *MoveEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveEventRequest.ProtoReflect.Descriptor instead.
func (*MoveEventRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{14}
}

func (x *MoveEventRequest) GetSource() isMoveEventRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MoveEventRequest) GetSourceCalendarId() string {
	if x != nil {
		if x, ok := x.Source.(*MoveEventRequest_SourceCalendarId); ok {
			return x.SourceCalendarId
		}
	}
	return ""
}

func (x *MoveEventRequest) GetSourceUserId() string {
	if x != nil {
		if x, ok := x.Source.(*MoveEventRequest_SourceUserId); ok {
			return x.SourceUserId
		}
	}
	return ""
}

func (x *MoveEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *MoveEventRequest) GetTarget() isMoveEventRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MoveEventRequest) GetTargetCalendarId() string {
	if x != nil {
		if x, ok := x.Target.(*MoveEventRequest_TargetCalendarId); ok {
			return x.TargetCalendarId
		}
	}
	return ""
}

func (x *MoveEventRequest) GetTargetUserId() string {
	if x != nil {
		if x, ok := x.Target.(*MoveEventRequest_TargetUserId); ok {
			return x.TargetUserId
		}
	}
	return ""
}

type isMoveEventRequest_Source interface {
	isMoveEventRequest_Source()
}

type MoveEventRequest_SourceCalendarId struct {
	// SourceCalendarId is the origin calendar that contains the event to be
	// moved.
	SourceCalendarId string `protobuf:"bytes,1,opt,name=source_calendar_id,json=sourceCalendarId,proto3,oneof"`
}

type MoveEventRequest_SourceUserId struct {
	// SourceUserId is the id of the user which owns the event. cis-cal will
	// lookup the associated calendar id from cis-idm's additional user
	// fields.
	SourceUserId string `protobuf:"bytes,2,opt,name=source_user_id,json=sourceUserId,proto3,oneof"`
}

func (*MoveEventRequest_SourceCalendarId) isMoveEventRequest_Source() {}

func (*MoveEventRequest_SourceUserId) isMoveEventRequest_Source() {}

type isMoveEventRequest_Target interface {
	isMoveEventRequest_Target()
}

type MoveEventRequest_TargetCalendarId struct {
	// TargetCalendarId is the target calendar that should contain the
	// event.
	TargetCalendarId string `protobuf:"bytes,4,opt,name=target_calendar_id,json=targetCalendarId,proto3,oneof"`
}

type MoveEventRequest_TargetUserId struct {
	// TargetUserId is the id of the user to which the event should be
	// moved. cis-cal will lookup the associated calendar id from cis-idm's
	// additional user fields.
	TargetUserId string `protobuf:"bytes,5,opt,name=target_user_id,json=targetUserId,proto3,oneof"`
}

func (*MoveEventRequest_TargetCalendarId) isMoveEventRequest_Target() {}

func (*MoveEventRequest_TargetUserId) isMoveEventRequest_Target() {}

// MoveEventResponse is the response message of the MoveEvent RPC and contains
// the moved event definition. Note that after a successful move, the ID of the
// event might have changed!
type MoveEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event holds the moved event definition.
	Event         *CalendarEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveEventResponse) Reset() {
	*x = MoveEventResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveEventResponse) ProtoMessage() {}

func (x *MoveEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveEventResponse.ProtoReflect.Descriptor instead.
func (*MoveEventResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{15}
}

func (x *MoveEventResponse) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// DeleteEventRequest is the request message for the DeleteEvent RPC and allows
// to remove a calendar event.
type DeleteEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CalendarId is the ID of the origin calendar that contains the event.
	CalendarId string `protobuf:"bytes,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	// EventId is the ID of the event that should be removed from the calendar
	// specified by calendar_id.
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEventRequest) Reset() {
	*x = DeleteEventRequest{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventRequest) ProtoMessage() {}

func (x *DeleteEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventRequest) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteEventRequest) GetCalendarId() string {
	if x != nil {
		return x.CalendarId
	}
	return ""
}

func (x *DeleteEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

// DeleteEventResponse is the response message of the DeleteEvent RPC. This
// message does not contain any fields for now.
type DeleteEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEventResponse) Reset() {
	*x = DeleteEventResponse{}
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventResponse) ProtoMessage() {}

func (x *DeleteEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_calendar_v1_event_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventResponse.ProtoReflect.Descriptor instead.
func (*DeleteEventResponse) Descriptor() ([]byte, []int) {
	return file_tkd_calendar_v1_event_service_proto_rawDescGZIP(), []int{17}
}

var File_tkd_calendar_v1_event_service_proto protoreflect.FileDescriptor

const file_tkd_calendar_v1_event_service_proto_rawDesc = "" +
	"\n" +
	"#tkd/calendar/v1/event_service.proto\x12\x0ftkd.calendar.v1\x1a\x1btkd/calendar/v1/event.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\x1a google/protobuf/field_mask.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1etkd/common/v1/descriptor.proto\x1a\x1etkd/common/v1/time_range.proto\x1a\x1bbuf/validate/validate.proto\"\x96\x01\n" +
	"\x10ResourceCalendar\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12\x14\n" +
	"\x05color\x18\x03 \x01(\tR\x05color\x12,\n" +
	"\x12max_concurrent_use\x18\x04 \x01(\rR\x10maxConcurrentUse\"q\n" +
	"\x1dListResourceCalendarsResponse\x12P\n" +
	"\x12resource_calendars\x18\x01 \x03(\v2!.tkd.calendar.v1.ResourceCalendarR\x11resourceCalendars\"\x1e\n" +
	"\x1cListResourceCalendarsRequest\"<\n" +
	"\x1dDeleteResourceCalendarRequest\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\"c\n" +
	"\x14ListCalendarsRequest\x12K\n" +
	"\"include_virtual_resource_calendars\x18\x01 \x01(\bR\x1fincludeVirtualResourceCalendars\"P\n" +
	"\x15ListCalendarsResponse\x127\n" +
	"\tcalendars\x18\x01 \x03(\v2\x19.tkd.calendar.v1.CalendarR\tcalendars\"K\n" +
	"\vEventSource\x12!\n" +
	"\fcalendar_ids\x18\x01 \x03(\tR\vcalendarIds\x12\x19\n" +
	"\buser_ids\x18\x02 \x03(\tR\auserIds\"\xd7\x03\n" +
	"\x11ListEventsRequest\x128\n" +
	"\asources\x18\x01 \x01(\v2\x1c.tkd.calendar.v1.EventSourceH\x00R\asources\x12%\n" +
	"\rall_calendars\x18\x02 \x01(\bH\x00R\fallCalendars\x12\x1d\n" +
	"\tall_users\x18\x03 \x01(\bH\x00R\ballUsers\x129\n" +
	"\n" +
	"time_range\x18\x04 \x01(\v2\x18.tkd.common.v1.TimeRangeH\x01R\ttimeRange\x12\x14\n" +
	"\x04date\x18\x05 \x01(\tH\x01R\x04date\x127\n" +
	"\tread_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12M\n" +
	"\rrequest_kinds\x18\a \x03(\x0e2(.tkd.calendar.v1.CalenarEventRequestKindR\frequestKinds\x12\x1f\n" +
	"\vsearch_text\x18\b \x01(\tR\n" +
	"searchText\x12\x1f\n" +
	"\vcustomer_id\x18\t \x01(\tR\n" +
	"customerIdB\x10\n" +
	"\x06source\x12\x06\xfa\xf7\x18\x02\b\x01B\x15\n" +
	"\vsearch_time\x12\x06\xfa\xf7\x18\x02\b\x01\"\x82\x01\n" +
	"\x11CalendarEventList\x125\n" +
	"\bcalendar\x18\x01 \x01(\v2\x19.tkd.calendar.v1.CalendarR\bcalendar\x126\n" +
	"\x06events\x18\x02 \x03(\v2\x1e.tkd.calendar.v1.CalendarEventR\x06events\"R\n" +
	"\x12ListEventsResponse\x12<\n" +
	"\aresults\x18\x01 \x03(\v2\".tkd.calendar.v1.CalendarEventListR\aresults\"\xc2\x02\n" +
	"\x12CreateEventRequest\x12(\n" +
	"\vcalendar_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"calendarId\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x129\n" +
	"\x05start\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x05start\x125\n" +
	"\x03end\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\a\xfa\xf7\x18\x03\xc8\x01\x01R\x03end\x123\n" +
	"\n" +
	"extra_data\x18\x06 \x01(\v2\x14.google.protobuf.AnyR\textraData\x12\x1c\n" +
	"\tresources\x18\a \x03(\tR\tresources\"K\n" +
	"\x13CreateEventResponse\x124\n" +
	"\x05event\x18\x01 \x01(\v2\x1e.tkd.calendar.v1.CalendarEventR\x05event\"\x88\x03\n" +
	"\x12UpdateEventRequest\x12(\n" +
	"\vcalendar_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"calendarId\x12\"\n" +
	"\bevent_id\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aeventId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x120\n" +
	"\x05start\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x03end\x123\n" +
	"\n" +
	"extra_data\x18\a \x01(\v2\x14.google.protobuf.AnyR\textraData\x12\x1c\n" +
	"\tresources\x18\b \x03(\tR\tresources\x12;\n" +
	"\vupdate_mask\x18\x14 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"K\n" +
	"\x13UpdateEventResponse\x124\n" +
	"\x05event\x18\x01 \x01(\v2\x1e.tkd.calendar.v1.CalendarEventR\x05event\"\x8a\x02\n" +
	"\x10MoveEventRequest\x12.\n" +
	"\x12source_calendar_id\x18\x01 \x01(\tH\x00R\x10sourceCalendarId\x12&\n" +
	"\x0esource_user_id\x18\x02 \x01(\tH\x00R\fsourceUserId\x12\"\n" +
	"\bevent_id\x18\x03 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aeventId\x12.\n" +
	"\x12target_calendar_id\x18\x04 \x01(\tH\x01R\x10targetCalendarId\x12&\n" +
	"\x0etarget_user_id\x18\x05 \x01(\tH\x01R\ftargetUserIdB\x10\n" +
	"\x06source\x12\x06\xfa\xf7\x18\x02\b\x01B\x10\n" +
	"\x06target\x12\x06\xfa\xf7\x18\x02\b\x01\"I\n" +
	"\x11MoveEventResponse\x124\n" +
	"\x05event\x18\x01 \x01(\v2\x1e.tkd.calendar.v1.CalendarEventR\x05event\"b\n" +
	"\x12DeleteEventRequest\x12(\n" +
	"\vcalendar_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"calendarId\x12\"\n" +
	"\bevent_id\x18\x02 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\aeventId\"\x15\n" +
	"\x13DeleteEventResponse*\xcd\x01\n" +
	"\x17CalenarEventRequestKind\x12+\n" +
	"'CALENDAR_EVENT_REQUEST_KIND_UNSPECIFIED\x10\x00\x12&\n" +
	"\"CALENDAR_EVENT_REQUEST_KIND_EVENTS\x10\x01\x12*\n" +
	"&CALENDAR_EVENT_REQUEST_KIND_FREE_SLOTS\x10\x02\x121\n" +
	"-CALENDAR_EVENT_REQUEST_KIND_VIRTUAL_RESOURCES\x10\x032\xb6\a\n" +
	"\x0fCalendarService\x12e\n" +
	"\rListCalendars\x12%.tkd.calendar.v1.ListCalendarsRequest\x1a&.tkd.calendar.v1.ListCalendarsResponse\"\x05\xb2~\x02\b\x01\x12\\\n" +
	"\n" +
	"ListEvents\x12\".tkd.calendar.v1.ListEventsRequest\x1a#.tkd.calendar.v1.ListEventsResponse\"\x05\xb2~\x02\b\x01\x12_\n" +
	"\vCreateEvent\x12#.tkd.calendar.v1.CreateEventRequest\x1a$.tkd.calendar.v1.CreateEventResponse\"\x05\xb2~\x02\b\x01\x12_\n" +
	"\vUpdateEvent\x12#.tkd.calendar.v1.UpdateEventRequest\x1a$.tkd.calendar.v1.UpdateEventResponse\"\x05\xb2~\x02\b\x01\x12Y\n" +
	"\tMoveEvent\x12!.tkd.calendar.v1.MoveEventRequest\x1a\".tkd.calendar.v1.MoveEventResponse\"\x05\xb2~\x02\b\x01\x12_\n" +
	"\vDeleteEvent\x12#.tkd.calendar.v1.DeleteEventRequest\x1a$.tkd.calendar.v1.DeleteEventResponse\"\x05\xb2~\x02\b\x01\x12d\n" +
	"\x15StoreResourceCalendar\x12!.tkd.calendar.v1.ResourceCalendar\x1a!.tkd.calendar.v1.ResourceCalendar\"\x05\xb2~\x02\b\x02\x12}\n" +
	"\x15ListResourceCalendars\x12-.tkd.calendar.v1.ListResourceCalendarsRequest\x1a..tkd.calendar.v1.ListResourceCalendarsResponse\"\x05\xb2~\x02\b\x01\x12g\n" +
	"\x16DeleteResourceCalendar\x12..tkd.calendar.v1.DeleteResourceCalendarRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x02\x1a\x12\xba~\x0f\n" +
	"\ridm_superuserB\xcf\x01\n" +
	"\x13com.tkd.calendar.v1B\x11EventServiceProtoP\x01ZGgithub.com/tierklinik-dobersberg/apis/gen/go/tkd/calendar/v1;calendarv1\xa2\x02\x03TCX\xaa\x02\x0fTkd.Calendar.V1\xca\x02\x0fTkd\\Calendar\\V1\xe2\x02\x1bTkd\\Calendar\\V1\\GPBMetadata\xea\x02\x11Tkd::Calendar::V1b\x06proto3"

var (
	file_tkd_calendar_v1_event_service_proto_rawDescOnce sync.Once
	file_tkd_calendar_v1_event_service_proto_rawDescData []byte
)

func file_tkd_calendar_v1_event_service_proto_rawDescGZIP() []byte {
	file_tkd_calendar_v1_event_service_proto_rawDescOnce.Do(func() {
		file_tkd_calendar_v1_event_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_calendar_v1_event_service_proto_rawDesc), len(file_tkd_calendar_v1_event_service_proto_rawDesc)))
	})
	return file_tkd_calendar_v1_event_service_proto_rawDescData
}

var file_tkd_calendar_v1_event_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tkd_calendar_v1_event_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_tkd_calendar_v1_event_service_proto_goTypes = []any{
	(CalenarEventRequestKind)(0),          // 0: tkd.calendar.v1.CalenarEventRequestKind
	(*ResourceCalendar)(nil),              // 1: tkd.calendar.v1.ResourceCalendar
	(*ListResourceCalendarsResponse)(nil), // 2: tkd.calendar.v1.ListResourceCalendarsResponse
	(*ListResourceCalendarsRequest)(nil),  // 3: tkd.calendar.v1.ListResourceCalendarsRequest
	(*DeleteResourceCalendarRequest)(nil), // 4: tkd.calendar.v1.DeleteResourceCalendarRequest
	(*ListCalendarsRequest)(nil),          // 5: tkd.calendar.v1.ListCalendarsRequest
	(*ListCalendarsResponse)(nil),         // 6: tkd.calendar.v1.ListCalendarsResponse
	(*EventSource)(nil),                   // 7: tkd.calendar.v1.EventSource
	(*ListEventsRequest)(nil),             // 8: tkd.calendar.v1.ListEventsRequest
	(*CalendarEventList)(nil),             // 9: tkd.calendar.v1.CalendarEventList
	(*ListEventsResponse)(nil),            // 10: tkd.calendar.v1.ListEventsResponse
	(*CreateEventRequest)(nil),            // 11: tkd.calendar.v1.CreateEventRequest
	(*CreateEventResponse)(nil),           // 12: tkd.calendar.v1.CreateEventResponse
	(*UpdateEventRequest)(nil),            // 13: tkd.calendar.v1.UpdateEventRequest
	(*UpdateEventResponse)(nil),           // 14: tkd.calendar.v1.UpdateEventResponse
	(*MoveEventRequest)(nil),              // 15: tkd.calendar.v1.MoveEventRequest
	(*MoveEventResponse)(nil),             // 16: tkd.calendar.v1.MoveEventResponse
	(*DeleteEventRequest)(nil),            // 17: tkd.calendar.v1.DeleteEventRequest
	(*DeleteEventResponse)(nil),           // 18: tkd.calendar.v1.DeleteEventResponse
	(*Calendar)(nil),                      // 19: tkd.calendar.v1.Calendar
	(*v1.TimeRange)(nil),                  // 20: tkd.common.v1.TimeRange
	(*fieldmaskpb.FieldMask)(nil),         // 21: google.protobuf.FieldMask
	(*CalendarEvent)(nil),                 // 22: tkd.calendar.v1.CalendarEvent
	(*timestamppb.Timestamp)(nil),         // 23: google.protobuf.Timestamp
	(*anypb.Any)(nil),                     // 24: google.protobuf.Any
	(*emptypb.Empty)(nil),                 // 25: google.protobuf.Empty
}
var file_tkd_calendar_v1_event_service_proto_depIdxs = []int32{
	1,  // 0: tkd.calendar.v1.ListResourceCalendarsResponse.resource_calendars:type_name -> tkd.calendar.v1.ResourceCalendar
	19, // 1: tkd.calendar.v1.ListCalendarsResponse.calendars:type_name -> tkd.calendar.v1.Calendar
	7,  // 2: tkd.calendar.v1.ListEventsRequest.sources:type_name -> tkd.calendar.v1.EventSource
	20, // 3: tkd.calendar.v1.ListEventsRequest.time_range:type_name -> tkd.common.v1.TimeRange
	21, // 4: tkd.calendar.v1.ListEventsRequest.read_mask:type_name -> google.protobuf.FieldMask
	0,  // 5: tkd.calendar.v1.ListEventsRequest.request_kinds:type_name -> tkd.calendar.v1.CalenarEventRequestKind
	19, // 6: tkd.calendar.v1.CalendarEventList.calendar:type_name -> tkd.calendar.v1.Calendar
	22, // 7: tkd.calendar.v1.CalendarEventList.events:type_name -> tkd.calendar.v1.CalendarEvent
	9,  // 8: tkd.calendar.v1.ListEventsResponse.results:type_name -> tkd.calendar.v1.CalendarEventList
	23, // 9: tkd.calendar.v1.CreateEventRequest.start:type_name -> google.protobuf.Timestamp
	23, // 10: tkd.calendar.v1.CreateEventRequest.end:type_name -> google.protobuf.Timestamp
	24, // 11: tkd.calendar.v1.CreateEventRequest.extra_data:type_name -> google.protobuf.Any
	22, // 12: tkd.calendar.v1.CreateEventResponse.event:type_name -> tkd.calendar.v1.CalendarEvent
	23, // 13: tkd.calendar.v1.UpdateEventRequest.start:type_name -> google.protobuf.Timestamp
	23, // 14: tkd.calendar.v1.UpdateEventRequest.end:type_name -> google.protobuf.Timestamp
	24, // 15: tkd.calendar.v1.UpdateEventRequest.extra_data:type_name -> google.protobuf.Any
	21, // 16: tkd.calendar.v1.UpdateEventRequest.update_mask:type_name -> google.protobuf.FieldMask
	22, // 17: tkd.calendar.v1.UpdateEventResponse.event:type_name -> tkd.calendar.v1.CalendarEvent
	22, // 18: tkd.calendar.v1.MoveEventResponse.event:type_name -> tkd.calendar.v1.CalendarEvent
	5,  // 19: tkd.calendar.v1.CalendarService.ListCalendars:input_type -> tkd.calendar.v1.ListCalendarsRequest
	8,  // 20: tkd.calendar.v1.CalendarService.ListEvents:input_type -> tkd.calendar.v1.ListEventsRequest
	11, // 21: tkd.calendar.v1.CalendarService.CreateEvent:input_type -> tkd.calendar.v1.CreateEventRequest
	13, // 22: tkd.calendar.v1.CalendarService.UpdateEvent:input_type -> tkd.calendar.v1.UpdateEventRequest
	15, // 23: tkd.calendar.v1.CalendarService.MoveEvent:input_type -> tkd.calendar.v1.MoveEventRequest
	17, // 24: tkd.calendar.v1.CalendarService.DeleteEvent:input_type -> tkd.calendar.v1.DeleteEventRequest
	1,  // 25: tkd.calendar.v1.CalendarService.StoreResourceCalendar:input_type -> tkd.calendar.v1.ResourceCalendar
	3,  // 26: tkd.calendar.v1.CalendarService.ListResourceCalendars:input_type -> tkd.calendar.v1.ListResourceCalendarsRequest
	4,  // 27: tkd.calendar.v1.CalendarService.DeleteResourceCalendar:input_type -> tkd.calendar.v1.DeleteResourceCalendarRequest
	6,  // 28: tkd.calendar.v1.CalendarService.ListCalendars:output_type -> tkd.calendar.v1.ListCalendarsResponse
	10, // 29: tkd.calendar.v1.CalendarService.ListEvents:output_type -> tkd.calendar.v1.ListEventsResponse
	12, // 30: tkd.calendar.v1.CalendarService.CreateEvent:output_type -> tkd.calendar.v1.CreateEventResponse
	14, // 31: tkd.calendar.v1.CalendarService.UpdateEvent:output_type -> tkd.calendar.v1.UpdateEventResponse
	16, // 32: tkd.calendar.v1.CalendarService.MoveEvent:output_type -> tkd.calendar.v1.MoveEventResponse
	18, // 33: tkd.calendar.v1.CalendarService.DeleteEvent:output_type -> tkd.calendar.v1.DeleteEventResponse
	1,  // 34: tkd.calendar.v1.CalendarService.StoreResourceCalendar:output_type -> tkd.calendar.v1.ResourceCalendar
	2,  // 35: tkd.calendar.v1.CalendarService.ListResourceCalendars:output_type -> tkd.calendar.v1.ListResourceCalendarsResponse
	25, // 36: tkd.calendar.v1.CalendarService.DeleteResourceCalendar:output_type -> google.protobuf.Empty
	28, // [28:37] is the sub-list for method output_type
	19, // [19:28] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_tkd_calendar_v1_event_service_proto_init() }
func file_tkd_calendar_v1_event_service_proto_init() {
	if File_tkd_calendar_v1_event_service_proto != nil {
		return
	}
	file_tkd_calendar_v1_event_proto_init()
	file_tkd_calendar_v1_event_service_proto_msgTypes[7].OneofWrappers = []any{
		(*ListEventsRequest_Sources)(nil),
		(*ListEventsRequest_AllCalendars)(nil),
		(*ListEventsRequest_AllUsers)(nil),
		(*ListEventsRequest_TimeRange)(nil),
		(*ListEventsRequest_Date)(nil),
	}
	file_tkd_calendar_v1_event_service_proto_msgTypes[14].OneofWrappers = []any{
		(*MoveEventRequest_SourceCalendarId)(nil),
		(*MoveEventRequest_SourceUserId)(nil),
		(*MoveEventRequest_TargetCalendarId)(nil),
		(*MoveEventRequest_TargetUserId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_calendar_v1_event_service_proto_rawDesc), len(file_tkd_calendar_v1_event_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_calendar_v1_event_service_proto_goTypes,
		DependencyIndexes: file_tkd_calendar_v1_event_service_proto_depIdxs,
		EnumInfos:         file_tkd_calendar_v1_event_service_proto_enumTypes,
		MessageInfos:      file_tkd_calendar_v1_event_service_proto_msgTypes,
	}.Build()
	File_tkd_calendar_v1_event_service_proto = out.File
	file_tkd_calendar_v1_event_service_proto_goTypes = nil
	file_tkd_calendar_v1_event_service_proto_depIdxs = nil
}
