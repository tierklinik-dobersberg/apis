// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/calendar/v1/holiday_service.proto

package calendarv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/calendar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HolidayServiceName is the fully-qualified name of the HolidayService service.
	HolidayServiceName = "tkd.calendar.v1.HolidayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HolidayServiceGetHolidayProcedure is the fully-qualified name of the HolidayService's GetHoliday
	// RPC.
	HolidayServiceGetHolidayProcedure = "/tkd.calendar.v1.HolidayService/GetHoliday"
)

// HolidayServiceClient is a client for the tkd.calendar.v1.HolidayService service.
type HolidayServiceClient interface {
	GetHoliday(context.Context, *connect_go.Request[v1.GetHolidayRequest]) (*connect_go.Response[v1.GetHolidayResponse], error)
}

// NewHolidayServiceClient constructs a client for the tkd.calendar.v1.HolidayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHolidayServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HolidayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &holidayServiceClient{
		getHoliday: connect_go.NewClient[v1.GetHolidayRequest, v1.GetHolidayResponse](
			httpClient,
			baseURL+HolidayServiceGetHolidayProcedure,
			opts...,
		),
	}
}

// holidayServiceClient implements HolidayServiceClient.
type holidayServiceClient struct {
	getHoliday *connect_go.Client[v1.GetHolidayRequest, v1.GetHolidayResponse]
}

// GetHoliday calls tkd.calendar.v1.HolidayService.GetHoliday.
func (c *holidayServiceClient) GetHoliday(ctx context.Context, req *connect_go.Request[v1.GetHolidayRequest]) (*connect_go.Response[v1.GetHolidayResponse], error) {
	return c.getHoliday.CallUnary(ctx, req)
}

// HolidayServiceHandler is an implementation of the tkd.calendar.v1.HolidayService service.
type HolidayServiceHandler interface {
	GetHoliday(context.Context, *connect_go.Request[v1.GetHolidayRequest]) (*connect_go.Response[v1.GetHolidayResponse], error)
}

// NewHolidayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHolidayServiceHandler(svc HolidayServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	holidayServiceGetHolidayHandler := connect_go.NewUnaryHandler(
		HolidayServiceGetHolidayProcedure,
		svc.GetHoliday,
		opts...,
	)
	return "/tkd.calendar.v1.HolidayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HolidayServiceGetHolidayProcedure:
			holidayServiceGetHolidayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHolidayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHolidayServiceHandler struct{}

func (UnimplementedHolidayServiceHandler) GetHoliday(context.Context, *connect_go.Request[v1.GetHolidayRequest]) (*connect_go.Response[v1.GetHolidayResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.HolidayService.GetHoliday is not implemented"))
}
