// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/calendar/v1/event_service.proto

package calendarv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/calendar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CalendarServiceName is the fully-qualified name of the CalendarService service.
	CalendarServiceName = "tkd.calendar.v1.CalendarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalendarServiceListCalendarsProcedure is the fully-qualified name of the CalendarService's
	// ListCalendars RPC.
	CalendarServiceListCalendarsProcedure = "/tkd.calendar.v1.CalendarService/ListCalendars"
	// CalendarServiceListEventsProcedure is the fully-qualified name of the CalendarService's
	// ListEvents RPC.
	CalendarServiceListEventsProcedure = "/tkd.calendar.v1.CalendarService/ListEvents"
	// CalendarServiceCreateEventProcedure is the fully-qualified name of the CalendarService's
	// CreateEvent RPC.
	CalendarServiceCreateEventProcedure = "/tkd.calendar.v1.CalendarService/CreateEvent"
	// CalendarServiceUpdateEventProcedure is the fully-qualified name of the CalendarService's
	// UpdateEvent RPC.
	CalendarServiceUpdateEventProcedure = "/tkd.calendar.v1.CalendarService/UpdateEvent"
	// CalendarServiceMoveEventProcedure is the fully-qualified name of the CalendarService's MoveEvent
	// RPC.
	CalendarServiceMoveEventProcedure = "/tkd.calendar.v1.CalendarService/MoveEvent"
	// CalendarServiceDeleteEventProcedure is the fully-qualified name of the CalendarService's
	// DeleteEvent RPC.
	CalendarServiceDeleteEventProcedure = "/tkd.calendar.v1.CalendarService/DeleteEvent"
)

// CalendarServiceClient is a client for the tkd.calendar.v1.CalendarService service.
type CalendarServiceClient interface {
	// ListCalendars returns a list of available calendars.
	ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error)
	// ListEvents can search and return a list of calendar events for one or
	// more calendar ids.
	ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error)
	// CreateEvent creates a new calendar event at a specified calendar id.
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	// UpdateEvent allows to partitially update a calendar event. If the event
	// should be moved to a different calendar, use the MoveEvent RPC.
	UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error)
	// MoveEvent allows to move an calendar event from one calendar to another
	// one. The actual implementation might depend on the backend so callers
	// should be prepared to receive a different event id after a successful
	// move (i.e. the event might have to be deleted from the old calendar and
	// re-created in the new one which might generate a new unique event id).
	MoveEvent(context.Context, *connect_go.Request[v1.MoveEventRequest]) (*connect_go.Response[v1.MoveEventResponse], error)
	// DeleteEvent deletes an event from a calendar.
	DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error)
}

// NewCalendarServiceClient constructs a client for the tkd.calendar.v1.CalendarService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalendarServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CalendarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calendarServiceClient{
		listCalendars: connect_go.NewClient[v1.ListCalendarsRequest, v1.ListCalendarsResponse](
			httpClient,
			baseURL+CalendarServiceListCalendarsProcedure,
			opts...,
		),
		listEvents: connect_go.NewClient[v1.ListEventsRequest, v1.ListEventsResponse](
			httpClient,
			baseURL+CalendarServiceListEventsProcedure,
			opts...,
		),
		createEvent: connect_go.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+CalendarServiceCreateEventProcedure,
			opts...,
		),
		updateEvent: connect_go.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+CalendarServiceUpdateEventProcedure,
			opts...,
		),
		moveEvent: connect_go.NewClient[v1.MoveEventRequest, v1.MoveEventResponse](
			httpClient,
			baseURL+CalendarServiceMoveEventProcedure,
			opts...,
		),
		deleteEvent: connect_go.NewClient[v1.DeleteEventRequest, v1.DeleteEventResponse](
			httpClient,
			baseURL+CalendarServiceDeleteEventProcedure,
			opts...,
		),
	}
}

// calendarServiceClient implements CalendarServiceClient.
type calendarServiceClient struct {
	listCalendars *connect_go.Client[v1.ListCalendarsRequest, v1.ListCalendarsResponse]
	listEvents    *connect_go.Client[v1.ListEventsRequest, v1.ListEventsResponse]
	createEvent   *connect_go.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	updateEvent   *connect_go.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	moveEvent     *connect_go.Client[v1.MoveEventRequest, v1.MoveEventResponse]
	deleteEvent   *connect_go.Client[v1.DeleteEventRequest, v1.DeleteEventResponse]
}

// ListCalendars calls tkd.calendar.v1.CalendarService.ListCalendars.
func (c *calendarServiceClient) ListCalendars(ctx context.Context, req *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error) {
	return c.listCalendars.CallUnary(ctx, req)
}

// ListEvents calls tkd.calendar.v1.CalendarService.ListEvents.
func (c *calendarServiceClient) ListEvents(ctx context.Context, req *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// CreateEvent calls tkd.calendar.v1.CalendarService.CreateEvent.
func (c *calendarServiceClient) CreateEvent(ctx context.Context, req *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// UpdateEvent calls tkd.calendar.v1.CalendarService.UpdateEvent.
func (c *calendarServiceClient) UpdateEvent(ctx context.Context, req *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// MoveEvent calls tkd.calendar.v1.CalendarService.MoveEvent.
func (c *calendarServiceClient) MoveEvent(ctx context.Context, req *connect_go.Request[v1.MoveEventRequest]) (*connect_go.Response[v1.MoveEventResponse], error) {
	return c.moveEvent.CallUnary(ctx, req)
}

// DeleteEvent calls tkd.calendar.v1.CalendarService.DeleteEvent.
func (c *calendarServiceClient) DeleteEvent(ctx context.Context, req *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error) {
	return c.deleteEvent.CallUnary(ctx, req)
}

// CalendarServiceHandler is an implementation of the tkd.calendar.v1.CalendarService service.
type CalendarServiceHandler interface {
	// ListCalendars returns a list of available calendars.
	ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error)
	// ListEvents can search and return a list of calendar events for one or
	// more calendar ids.
	ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error)
	// CreateEvent creates a new calendar event at a specified calendar id.
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	// UpdateEvent allows to partitially update a calendar event. If the event
	// should be moved to a different calendar, use the MoveEvent RPC.
	UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error)
	// MoveEvent allows to move an calendar event from one calendar to another
	// one. The actual implementation might depend on the backend so callers
	// should be prepared to receive a different event id after a successful
	// move (i.e. the event might have to be deleted from the old calendar and
	// re-created in the new one which might generate a new unique event id).
	MoveEvent(context.Context, *connect_go.Request[v1.MoveEventRequest]) (*connect_go.Response[v1.MoveEventResponse], error)
	// DeleteEvent deletes an event from a calendar.
	DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error)
}

// NewCalendarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalendarServiceHandler(svc CalendarServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	calendarServiceListCalendarsHandler := connect_go.NewUnaryHandler(
		CalendarServiceListCalendarsProcedure,
		svc.ListCalendars,
		opts...,
	)
	calendarServiceListEventsHandler := connect_go.NewUnaryHandler(
		CalendarServiceListEventsProcedure,
		svc.ListEvents,
		opts...,
	)
	calendarServiceCreateEventHandler := connect_go.NewUnaryHandler(
		CalendarServiceCreateEventProcedure,
		svc.CreateEvent,
		opts...,
	)
	calendarServiceUpdateEventHandler := connect_go.NewUnaryHandler(
		CalendarServiceUpdateEventProcedure,
		svc.UpdateEvent,
		opts...,
	)
	calendarServiceMoveEventHandler := connect_go.NewUnaryHandler(
		CalendarServiceMoveEventProcedure,
		svc.MoveEvent,
		opts...,
	)
	calendarServiceDeleteEventHandler := connect_go.NewUnaryHandler(
		CalendarServiceDeleteEventProcedure,
		svc.DeleteEvent,
		opts...,
	)
	return "/tkd.calendar.v1.CalendarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalendarServiceListCalendarsProcedure:
			calendarServiceListCalendarsHandler.ServeHTTP(w, r)
		case CalendarServiceListEventsProcedure:
			calendarServiceListEventsHandler.ServeHTTP(w, r)
		case CalendarServiceCreateEventProcedure:
			calendarServiceCreateEventHandler.ServeHTTP(w, r)
		case CalendarServiceUpdateEventProcedure:
			calendarServiceUpdateEventHandler.ServeHTTP(w, r)
		case CalendarServiceMoveEventProcedure:
			calendarServiceMoveEventHandler.ServeHTTP(w, r)
		case CalendarServiceDeleteEventProcedure:
			calendarServiceDeleteEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalendarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalendarServiceHandler struct{}

func (UnimplementedCalendarServiceHandler) ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.ListCalendars is not implemented"))
}

func (UnimplementedCalendarServiceHandler) ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.ListEvents is not implemented"))
}

func (UnimplementedCalendarServiceHandler) CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.CreateEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.UpdateEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) MoveEvent(context.Context, *connect_go.Request[v1.MoveEventRequest]) (*connect_go.Response[v1.MoveEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.MoveEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.calendar.v1.CalendarService.DeleteEvent is not implemented"))
}
