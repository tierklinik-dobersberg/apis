// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/booking/v1/species.proto

package bookingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/booking/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SpeciesServiceName is the fully-qualified name of the SpeciesService service.
	SpeciesServiceName = "tkd.booking.v1.SpeciesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SpeciesServiceCreateSpeciesProcedure is the fully-qualified name of the SpeciesService's
	// CreateSpecies RPC.
	SpeciesServiceCreateSpeciesProcedure = "/tkd.booking.v1.SpeciesService/CreateSpecies"
	// SpeciesServiceListSpeciesProcedure is the fully-qualified name of the SpeciesService's
	// ListSpecies RPC.
	SpeciesServiceListSpeciesProcedure = "/tkd.booking.v1.SpeciesService/ListSpecies"
	// SpeciesServiceUpdateSpeciesProcedure is the fully-qualified name of the SpeciesService's
	// UpdateSpecies RPC.
	SpeciesServiceUpdateSpeciesProcedure = "/tkd.booking.v1.SpeciesService/UpdateSpecies"
	// SpeciesServiceDeleteSpeciesProcedure is the fully-qualified name of the SpeciesService's
	// DeleteSpecies RPC.
	SpeciesServiceDeleteSpeciesProcedure = "/tkd.booking.v1.SpeciesService/DeleteSpecies"
)

// SpeciesServiceClient is a client for the tkd.booking.v1.SpeciesService service.
type SpeciesServiceClient interface {
	CreateSpecies(context.Context, *connect_go.Request[v1.Species]) (*connect_go.Response[v1.Species], error)
	ListSpecies(context.Context, *connect_go.Request[v1.ListSpeciesRequest]) (*connect_go.Response[v1.ListSpeciesResponse], error)
	UpdateSpecies(context.Context, *connect_go.Request[v1.UpdateSpeciesRequest]) (*connect_go.Response[v1.Species], error)
	DeleteSpecies(context.Context, *connect_go.Request[v1.DeleteSpeciesRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewSpeciesServiceClient constructs a client for the tkd.booking.v1.SpeciesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSpeciesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SpeciesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &speciesServiceClient{
		createSpecies: connect_go.NewClient[v1.Species, v1.Species](
			httpClient,
			baseURL+SpeciesServiceCreateSpeciesProcedure,
			opts...,
		),
		listSpecies: connect_go.NewClient[v1.ListSpeciesRequest, v1.ListSpeciesResponse](
			httpClient,
			baseURL+SpeciesServiceListSpeciesProcedure,
			opts...,
		),
		updateSpecies: connect_go.NewClient[v1.UpdateSpeciesRequest, v1.Species](
			httpClient,
			baseURL+SpeciesServiceUpdateSpeciesProcedure,
			opts...,
		),
		deleteSpecies: connect_go.NewClient[v1.DeleteSpeciesRequest, emptypb.Empty](
			httpClient,
			baseURL+SpeciesServiceDeleteSpeciesProcedure,
			opts...,
		),
	}
}

// speciesServiceClient implements SpeciesServiceClient.
type speciesServiceClient struct {
	createSpecies *connect_go.Client[v1.Species, v1.Species]
	listSpecies   *connect_go.Client[v1.ListSpeciesRequest, v1.ListSpeciesResponse]
	updateSpecies *connect_go.Client[v1.UpdateSpeciesRequest, v1.Species]
	deleteSpecies *connect_go.Client[v1.DeleteSpeciesRequest, emptypb.Empty]
}

// CreateSpecies calls tkd.booking.v1.SpeciesService.CreateSpecies.
func (c *speciesServiceClient) CreateSpecies(ctx context.Context, req *connect_go.Request[v1.Species]) (*connect_go.Response[v1.Species], error) {
	return c.createSpecies.CallUnary(ctx, req)
}

// ListSpecies calls tkd.booking.v1.SpeciesService.ListSpecies.
func (c *speciesServiceClient) ListSpecies(ctx context.Context, req *connect_go.Request[v1.ListSpeciesRequest]) (*connect_go.Response[v1.ListSpeciesResponse], error) {
	return c.listSpecies.CallUnary(ctx, req)
}

// UpdateSpecies calls tkd.booking.v1.SpeciesService.UpdateSpecies.
func (c *speciesServiceClient) UpdateSpecies(ctx context.Context, req *connect_go.Request[v1.UpdateSpeciesRequest]) (*connect_go.Response[v1.Species], error) {
	return c.updateSpecies.CallUnary(ctx, req)
}

// DeleteSpecies calls tkd.booking.v1.SpeciesService.DeleteSpecies.
func (c *speciesServiceClient) DeleteSpecies(ctx context.Context, req *connect_go.Request[v1.DeleteSpeciesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteSpecies.CallUnary(ctx, req)
}

// SpeciesServiceHandler is an implementation of the tkd.booking.v1.SpeciesService service.
type SpeciesServiceHandler interface {
	CreateSpecies(context.Context, *connect_go.Request[v1.Species]) (*connect_go.Response[v1.Species], error)
	ListSpecies(context.Context, *connect_go.Request[v1.ListSpeciesRequest]) (*connect_go.Response[v1.ListSpeciesResponse], error)
	UpdateSpecies(context.Context, *connect_go.Request[v1.UpdateSpeciesRequest]) (*connect_go.Response[v1.Species], error)
	DeleteSpecies(context.Context, *connect_go.Request[v1.DeleteSpeciesRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewSpeciesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSpeciesServiceHandler(svc SpeciesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	speciesServiceCreateSpeciesHandler := connect_go.NewUnaryHandler(
		SpeciesServiceCreateSpeciesProcedure,
		svc.CreateSpecies,
		opts...,
	)
	speciesServiceListSpeciesHandler := connect_go.NewUnaryHandler(
		SpeciesServiceListSpeciesProcedure,
		svc.ListSpecies,
		opts...,
	)
	speciesServiceUpdateSpeciesHandler := connect_go.NewUnaryHandler(
		SpeciesServiceUpdateSpeciesProcedure,
		svc.UpdateSpecies,
		opts...,
	)
	speciesServiceDeleteSpeciesHandler := connect_go.NewUnaryHandler(
		SpeciesServiceDeleteSpeciesProcedure,
		svc.DeleteSpecies,
		opts...,
	)
	return "/tkd.booking.v1.SpeciesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SpeciesServiceCreateSpeciesProcedure:
			speciesServiceCreateSpeciesHandler.ServeHTTP(w, r)
		case SpeciesServiceListSpeciesProcedure:
			speciesServiceListSpeciesHandler.ServeHTTP(w, r)
		case SpeciesServiceUpdateSpeciesProcedure:
			speciesServiceUpdateSpeciesHandler.ServeHTTP(w, r)
		case SpeciesServiceDeleteSpeciesProcedure:
			speciesServiceDeleteSpeciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSpeciesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSpeciesServiceHandler struct{}

func (UnimplementedSpeciesServiceHandler) CreateSpecies(context.Context, *connect_go.Request[v1.Species]) (*connect_go.Response[v1.Species], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.SpeciesService.CreateSpecies is not implemented"))
}

func (UnimplementedSpeciesServiceHandler) ListSpecies(context.Context, *connect_go.Request[v1.ListSpeciesRequest]) (*connect_go.Response[v1.ListSpeciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.SpeciesService.ListSpecies is not implemented"))
}

func (UnimplementedSpeciesServiceHandler) UpdateSpecies(context.Context, *connect_go.Request[v1.UpdateSpeciesRequest]) (*connect_go.Response[v1.Species], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.SpeciesService.UpdateSpecies is not implemented"))
}

func (UnimplementedSpeciesServiceHandler) DeleteSpecies(context.Context, *connect_go.Request[v1.DeleteSpeciesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.SpeciesService.DeleteSpecies is not implemented"))
}
