// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/booking/v1/treatment.proto

package bookingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/booking/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TreatmentServiceName is the fully-qualified name of the TreatmentService service.
	TreatmentServiceName = "tkd.booking.v1.TreatmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TreatmentServiceListTreatmentsProcedure is the fully-qualified name of the TreatmentService's
	// ListTreatments RPC.
	TreatmentServiceListTreatmentsProcedure = "/tkd.booking.v1.TreatmentService/ListTreatments"
	// TreatmentServiceCreateTreatmentProcedure is the fully-qualified name of the TreatmentService's
	// CreateTreatment RPC.
	TreatmentServiceCreateTreatmentProcedure = "/tkd.booking.v1.TreatmentService/CreateTreatment"
	// TreatmentServiceUpdateTreatmentProcedure is the fully-qualified name of the TreatmentService's
	// UpdateTreatment RPC.
	TreatmentServiceUpdateTreatmentProcedure = "/tkd.booking.v1.TreatmentService/UpdateTreatment"
	// TreatmentServiceDeleteTreatmentProcedure is the fully-qualified name of the TreatmentService's
	// DeleteTreatment RPC.
	TreatmentServiceDeleteTreatmentProcedure = "/tkd.booking.v1.TreatmentService/DeleteTreatment"
)

// TreatmentServiceClient is a client for the tkd.booking.v1.TreatmentService service.
type TreatmentServiceClient interface {
	// ListTreatments returns a list of available treatments, optionally filtered by
	// species.
	ListTreatments(context.Context, *connect_go.Request[v1.ListTreatmentsRequest]) (*connect_go.Response[v1.ListTreatmentsResponse], error)
	// CreateTreatment creates a new treatment.
	CreateTreatment(context.Context, *connect_go.Request[v1.Treatment]) (*connect_go.Response[v1.Treatment], error)
	// UpdateTreatment updates an existing treatment.
	UpdateTreatment(context.Context, *connect_go.Request[v1.UpdateTreatmentRequest]) (*connect_go.Response[v1.Treatment], error)
	// DeleteTreatment deletes an existing treatment.
	DeleteTreatment(context.Context, *connect_go.Request[v1.DeleteTreatmentRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewTreatmentServiceClient constructs a client for the tkd.booking.v1.TreatmentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTreatmentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TreatmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &treatmentServiceClient{
		listTreatments: connect_go.NewClient[v1.ListTreatmentsRequest, v1.ListTreatmentsResponse](
			httpClient,
			baseURL+TreatmentServiceListTreatmentsProcedure,
			opts...,
		),
		createTreatment: connect_go.NewClient[v1.Treatment, v1.Treatment](
			httpClient,
			baseURL+TreatmentServiceCreateTreatmentProcedure,
			opts...,
		),
		updateTreatment: connect_go.NewClient[v1.UpdateTreatmentRequest, v1.Treatment](
			httpClient,
			baseURL+TreatmentServiceUpdateTreatmentProcedure,
			opts...,
		),
		deleteTreatment: connect_go.NewClient[v1.DeleteTreatmentRequest, emptypb.Empty](
			httpClient,
			baseURL+TreatmentServiceDeleteTreatmentProcedure,
			opts...,
		),
	}
}

// treatmentServiceClient implements TreatmentServiceClient.
type treatmentServiceClient struct {
	listTreatments  *connect_go.Client[v1.ListTreatmentsRequest, v1.ListTreatmentsResponse]
	createTreatment *connect_go.Client[v1.Treatment, v1.Treatment]
	updateTreatment *connect_go.Client[v1.UpdateTreatmentRequest, v1.Treatment]
	deleteTreatment *connect_go.Client[v1.DeleteTreatmentRequest, emptypb.Empty]
}

// ListTreatments calls tkd.booking.v1.TreatmentService.ListTreatments.
func (c *treatmentServiceClient) ListTreatments(ctx context.Context, req *connect_go.Request[v1.ListTreatmentsRequest]) (*connect_go.Response[v1.ListTreatmentsResponse], error) {
	return c.listTreatments.CallUnary(ctx, req)
}

// CreateTreatment calls tkd.booking.v1.TreatmentService.CreateTreatment.
func (c *treatmentServiceClient) CreateTreatment(ctx context.Context, req *connect_go.Request[v1.Treatment]) (*connect_go.Response[v1.Treatment], error) {
	return c.createTreatment.CallUnary(ctx, req)
}

// UpdateTreatment calls tkd.booking.v1.TreatmentService.UpdateTreatment.
func (c *treatmentServiceClient) UpdateTreatment(ctx context.Context, req *connect_go.Request[v1.UpdateTreatmentRequest]) (*connect_go.Response[v1.Treatment], error) {
	return c.updateTreatment.CallUnary(ctx, req)
}

// DeleteTreatment calls tkd.booking.v1.TreatmentService.DeleteTreatment.
func (c *treatmentServiceClient) DeleteTreatment(ctx context.Context, req *connect_go.Request[v1.DeleteTreatmentRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteTreatment.CallUnary(ctx, req)
}

// TreatmentServiceHandler is an implementation of the tkd.booking.v1.TreatmentService service.
type TreatmentServiceHandler interface {
	// ListTreatments returns a list of available treatments, optionally filtered by
	// species.
	ListTreatments(context.Context, *connect_go.Request[v1.ListTreatmentsRequest]) (*connect_go.Response[v1.ListTreatmentsResponse], error)
	// CreateTreatment creates a new treatment.
	CreateTreatment(context.Context, *connect_go.Request[v1.Treatment]) (*connect_go.Response[v1.Treatment], error)
	// UpdateTreatment updates an existing treatment.
	UpdateTreatment(context.Context, *connect_go.Request[v1.UpdateTreatmentRequest]) (*connect_go.Response[v1.Treatment], error)
	// DeleteTreatment deletes an existing treatment.
	DeleteTreatment(context.Context, *connect_go.Request[v1.DeleteTreatmentRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewTreatmentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTreatmentServiceHandler(svc TreatmentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	treatmentServiceListTreatmentsHandler := connect_go.NewUnaryHandler(
		TreatmentServiceListTreatmentsProcedure,
		svc.ListTreatments,
		opts...,
	)
	treatmentServiceCreateTreatmentHandler := connect_go.NewUnaryHandler(
		TreatmentServiceCreateTreatmentProcedure,
		svc.CreateTreatment,
		opts...,
	)
	treatmentServiceUpdateTreatmentHandler := connect_go.NewUnaryHandler(
		TreatmentServiceUpdateTreatmentProcedure,
		svc.UpdateTreatment,
		opts...,
	)
	treatmentServiceDeleteTreatmentHandler := connect_go.NewUnaryHandler(
		TreatmentServiceDeleteTreatmentProcedure,
		svc.DeleteTreatment,
		opts...,
	)
	return "/tkd.booking.v1.TreatmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TreatmentServiceListTreatmentsProcedure:
			treatmentServiceListTreatmentsHandler.ServeHTTP(w, r)
		case TreatmentServiceCreateTreatmentProcedure:
			treatmentServiceCreateTreatmentHandler.ServeHTTP(w, r)
		case TreatmentServiceUpdateTreatmentProcedure:
			treatmentServiceUpdateTreatmentHandler.ServeHTTP(w, r)
		case TreatmentServiceDeleteTreatmentProcedure:
			treatmentServiceDeleteTreatmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTreatmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTreatmentServiceHandler struct{}

func (UnimplementedTreatmentServiceHandler) ListTreatments(context.Context, *connect_go.Request[v1.ListTreatmentsRequest]) (*connect_go.Response[v1.ListTreatmentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.TreatmentService.ListTreatments is not implemented"))
}

func (UnimplementedTreatmentServiceHandler) CreateTreatment(context.Context, *connect_go.Request[v1.Treatment]) (*connect_go.Response[v1.Treatment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.TreatmentService.CreateTreatment is not implemented"))
}

func (UnimplementedTreatmentServiceHandler) UpdateTreatment(context.Context, *connect_go.Request[v1.UpdateTreatmentRequest]) (*connect_go.Response[v1.Treatment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.TreatmentService.UpdateTreatment is not implemented"))
}

func (UnimplementedTreatmentServiceHandler) DeleteTreatment(context.Context, *connect_go.Request[v1.DeleteTreatmentRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.booking.v1.TreatmentService.DeleteTreatment is not implemented"))
}
