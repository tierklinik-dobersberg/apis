// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: tkd/orthanc_bridge/v1/orthanc-bridge.proto

package orthanc_bridgev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DownloadType int32

const (
	DownloadType_DOWNLOAD_TYPE_UNSPECIFIED DownloadType = 0
	// DICOM specifies that the study/instance should be exported
	// as DICOM (.dcm) file
	DownloadType_DICOM DownloadType = 1
	// PNG specifies that the study/instance should be exported
	// as a PNG (.png) image
	DownloadType_PNG DownloadType = 2
	// JPEG specifies that the study/instance should be exported
	// as a JPEG (.jpg) image
	DownloadType_JPEG DownloadType = 3
	// AVI specifies that multi-frame instances should be exported
	// as a MJPEG video (.avi)
	DownloadType_AVI DownloadType = 4
)

// Enum value maps for DownloadType.
var (
	DownloadType_name = map[int32]string{
		0: "DOWNLOAD_TYPE_UNSPECIFIED",
		1: "DICOM",
		2: "PNG",
		3: "JPEG",
		4: "AVI",
	}
	DownloadType_value = map[string]int32{
		"DOWNLOAD_TYPE_UNSPECIFIED": 0,
		"DICOM":                     1,
		"PNG":                       2,
		"JPEG":                      3,
		"AVI":                       4,
	}
)

func (x DownloadType) Enum() *DownloadType {
	p := new(DownloadType)
	*p = x
	return p
}

func (x DownloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_enumTypes[0].Descriptor()
}

func (DownloadType) Type() protoreflect.EnumType {
	return &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_enumTypes[0]
}

func (x DownloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadType.Descriptor instead.
func (DownloadType) EnumDescriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{0}
}

type DICOMTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag                 string            `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	ValueRepresentation string            `protobuf:"bytes,2,opt,name=value_representation,json=valueRepresentation,proto3" json:"value_representation,omitempty"`
	Value               []*structpb.Value `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	Name                string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DICOMTag) Reset() {
	*x = DICOMTag{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DICOMTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DICOMTag) ProtoMessage() {}

func (x *DICOMTag) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DICOMTag.ProtoReflect.Descriptor instead.
func (*DICOMTag) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *DICOMTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DICOMTag) GetValueRepresentation() string {
	if x != nil {
		return x.ValueRepresentation
	}
	return ""
}

func (x *DICOMTag) GetValue() []*structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DICOMTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FilterTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag is either the well-known name or the numeric DICOM tag.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Value holds the tag value represented as a string.
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FilterTag) Reset() {
	*x = FilterTag{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTag) ProtoMessage() {}

func (x *FilterTag) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTag.ProtoReflect.Descriptor instead.
func (*FilterTag) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *FilterTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FilterTag) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListStudiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DateRange might be set to only return studies created
	// withing the specified date-range.
	DateRange *v1.DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// OwnerName might be set to only return studies where the
	// ResponsiblePersonName matches owner_name.
	OwnerName string `protobuf:"bytes,2,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// PatientName might be set to only return studies for the
	// given patient name
	PatientName string `protobuf:"bytes,3,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	// Modality might be set to only return studies for the given
	// DICOM modality.
	Modality string `protobuf:"bytes,4,opt,name=modality,proto3" json:"modality,omitempty"`
	// FilterTags might contain additional DICOM tag filters
	// represented by their stringified value.
	FilterTags []*FilterTag `protobuf:"bytes,5,rep,name=filter_tags,json=filterTags,proto3" json:"filter_tags,omitempty"`
	// IncludeTags might hold well-known names or their numeric DICOM tag
	// values that should be included in the response.
	IncludeTags []string `protobuf:"bytes,6,rep,name=include_tags,json=includeTags,proto3" json:"include_tags,omitempty"`
	// EnableFuzzyMatching might be set to true to enable fuzzy matching
	// using the wildcard character '*'
	EnableFuzzyMatching bool `protobuf:"varint,10,opt,name=enable_fuzzy_matching,json=enableFuzzyMatching,proto3" json:"enable_fuzzy_matching,omitempty"`
	// Pagintion can be set to enable paginated responses.
	Pagination *v1.Pagination `protobuf:"bytes,11,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListStudiesRequest) Reset() {
	*x = ListStudiesRequest{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStudiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStudiesRequest) ProtoMessage() {}

func (x *ListStudiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStudiesRequest.ProtoReflect.Descriptor instead.
func (*ListStudiesRequest) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *ListStudiesRequest) GetDateRange() *v1.DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ListStudiesRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ListStudiesRequest) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *ListStudiesRequest) GetModality() string {
	if x != nil {
		return x.Modality
	}
	return ""
}

func (x *ListStudiesRequest) GetFilterTags() []*FilterTag {
	if x != nil {
		return x.FilterTags
	}
	return nil
}

func (x *ListStudiesRequest) GetIncludeTags() []string {
	if x != nil {
		return x.IncludeTags
	}
	return nil
}

func (x *ListStudiesRequest) GetEnableFuzzyMatching() bool {
	if x != nil {
		return x.EnableFuzzyMatching
	}
	return false
}

func (x *ListStudiesRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type Thumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mime holds the mime type of Thumbnail.data
	Mime string `protobuf:"bytes,1,opt,name=mime,proto3" json:"mime,omitempty"`
	// Data holds the binary thumbnail image.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Thumbnail) Reset() {
	*x = Thumbnail{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thumbnail) ProtoMessage() {}

func (x *Thumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thumbnail.ProtoReflect.Descriptor instead.
func (*Thumbnail) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *Thumbnail) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *Thumbnail) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstanceUID holds the DICOM instance UID
	InstanceUid string `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	// Time holds the time the instance has been created.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Tags []*DICOMTag            `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Thumbail may hold a image thumbnail of the DICOM instance.
	Thumbnail *Thumbnail `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *Instance) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *Instance) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Instance) GetTags() []*DICOMTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Instance) GetThumbnail() *Thumbnail {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SeriesUid is the DICOM UID for the series
	SeriesUid string `protobuf:"bytes,1,opt,name=series_uid,json=seriesUid,proto3" json:"series_uid,omitempty"`
	// Instances holds all DICOM instances of this series.
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	// Time holds the timestamp at which the series has been created.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Tags []*DICOMTag            `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *Series) GetSeriesUid() string {
	if x != nil {
		return x.SeriesUid
	}
	return ""
}

func (x *Series) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *Series) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Series) GetTags() []*DICOMTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Study struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StudyUid is the DICOM UID of the study
	StudyUid string `protobuf:"bytes,1,opt,name=study_uid,json=studyUid,proto3" json:"study_uid,omitempty"`
	// Series holds all series within the study.
	Series []*Series `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	// Time holds the time at which the study has been created.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// PatientName is the name of the patient.
	PatientName string `protobuf:"bytes,4,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	// OwnerName is the name of the patient owner.
	OwnerName string `protobuf:"bytes,5,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// Modalities holds all modalities available within the study.
	Modalities []string    `protobuf:"bytes,6,rep,name=modalities,proto3" json:"modalities,omitempty"`
	Tags       []*DICOMTag `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Study) Reset() {
	*x = Study{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Study) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Study) ProtoMessage() {}

func (x *Study) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Study.ProtoReflect.Descriptor instead.
func (*Study) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *Study) GetStudyUid() string {
	if x != nil {
		return x.StudyUid
	}
	return ""
}

func (x *Study) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *Study) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Study) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *Study) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Study) GetModalities() []string {
	if x != nil {
		return x.Modalities
	}
	return nil
}

func (x *Study) GetTags() []*DICOMTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListStudiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Studies holds all studies that satisfied the ListStudiesRequest
	Studies []*Study `protobuf:"bytes,5,rep,name=studies,proto3" json:"studies,omitempty"`
	// TotalCount holds the total count of matched studies. Only
	// the subset requested by ListStudiesRequest.pagination is
	// returned in the studies field.
	TotalCount int64 `protobuf:"varint,10,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListStudiesResponse) Reset() {
	*x = ListStudiesResponse{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStudiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStudiesResponse) ProtoMessage() {}

func (x *ListStudiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStudiesResponse.ProtoReflect.Descriptor instead.
func (*ListStudiesResponse) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *ListStudiesResponse) GetStudies() []*Study {
	if x != nil {
		return x.Studies
	}
	return nil
}

func (x *ListStudiesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DownloadStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StudyUid holds the UID of the study that should be downloaded
	StudyUid string `protobuf:"bytes,1,opt,name=study_uid,json=studyUid,proto3" json:"study_uid,omitempty"`
	// InstanceUids might be set to limit wich DICOM instances should
	// be part of the download.
	// If unset, all instances of the given study will be downloaded.
	InstanceUids []string `protobuf:"bytes,2,rep,name=instance_uids,json=instanceUids,proto3" json:"instance_uids,omitempty"`
	// Specifies which types to download.
	Types []DownloadType `protobuf:"varint,3,rep,packed,name=types,proto3,enum=tkd.orthanc_bridge.v1.DownloadType" json:"types,omitempty"`
	// TimeToLive specifies how long the generated export should
	// be kept on the file-system.
	// Note that server implementation might decided to add a lower
	// or upper limit to the TTL.
	// Check the expire_time field in DownloadStudyResponse.
	TimeToLive *durationpb.Duration `protobuf:"bytes,4,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
}

func (x *DownloadStudyRequest) Reset() {
	*x = DownloadStudyRequest{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStudyRequest) ProtoMessage() {}

func (x *DownloadStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStudyRequest.ProtoReflect.Descriptor instead.
func (*DownloadStudyRequest) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadStudyRequest) GetStudyUid() string {
	if x != nil {
		return x.StudyUid
	}
	return ""
}

func (x *DownloadStudyRequest) GetInstanceUids() []string {
	if x != nil {
		return x.InstanceUids
	}
	return nil
}

func (x *DownloadStudyRequest) GetTypes() []DownloadType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *DownloadStudyRequest) GetTimeToLive() *durationpb.Duration {
	if x != nil {
		return x.TimeToLive
	}
	return nil
}

type DownloadStudyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DownloadLink holds the download link for the study.
	DownloadLink string `protobuf:"bytes,1,opt,name=download_link,json=downloadLink,proto3" json:"download_link,omitempty"`
	// ExpireTime holds the time at which the download link expires
	// and the generated export will be deleted from the server.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *DownloadStudyResponse) Reset() {
	*x = DownloadStudyResponse{}
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadStudyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStudyResponse) ProtoMessage() {}

func (x *DownloadStudyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStudyResponse.ProtoReflect.Descriptor instead.
func (*DownloadStudyResponse) Descriptor() ([]byte, []int) {
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadStudyResponse) GetDownloadLink() string {
	if x != nil {
		return x.DownloadLink
	}
	return ""
}

func (x *DownloadStudyResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

var File_tkd_orthanc_bridge_v1_orthanc_bridge_proto protoreflect.FileDescriptor

var file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x6b, 0x64, 0x2f, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x2d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x6b,
	0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x44, 0x49,
	0x43, 0x4f, 0x4d, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a,
	0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x41, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68,
	0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x7a,
	0x7a, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f,
	0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x49, 0x43, 0x4f, 0x4d, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x3e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63,
	0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22,
	0xcb, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74,
	0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x49, 0x43, 0x4f, 0x4d, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa2, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61,
	0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x49, 0x43, 0x4f, 0x4d, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x6e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0xf7, 0x18, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68,
	0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xfa, 0xf7, 0x18, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x79, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x2a, 0x54, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x49, 0x43, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x56, 0x49, 0x10, 0x04, 0x32, 0xef, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x74,
	0x68, 0x61, 0x6e, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61,
	0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x12, 0x71, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f,
	0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68,
	0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x05, 0xb2, 0x7e, 0x02, 0x08, 0x01, 0x42, 0xf6, 0x01, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x4f, 0x72, 0x74, 0x68, 0x61, 0x6e,
	0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b,
	0x6c, 0x69, 0x6e, 0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64,
	0x2f, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x4f, 0x58, 0xaa, 0x02, 0x14, 0x54, 0x6b, 0x64, 0x2e,
	0x4f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x14, 0x54, 0x6b, 0x64, 0x5c, 0x4f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x54, 0x6b, 0x64, 0x5c, 0x4f, 0x72,
	0x74, 0x68, 0x61, 0x6e, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x54, 0x6b, 0x64,
	0x3a, 0x3a, 0x4f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescOnce sync.Once
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescData = file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDesc
)

func file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescGZIP() []byte {
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescOnce.Do(func() {
		file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescData)
	})
	return file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDescData
}

var file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_goTypes = []any{
	(DownloadType)(0),             // 0: tkd.orthanc_bridge.v1.DownloadType
	(*DICOMTag)(nil),              // 1: tkd.orthanc_bridge.v1.DICOMTag
	(*FilterTag)(nil),             // 2: tkd.orthanc_bridge.v1.FilterTag
	(*ListStudiesRequest)(nil),    // 3: tkd.orthanc_bridge.v1.ListStudiesRequest
	(*Thumbnail)(nil),             // 4: tkd.orthanc_bridge.v1.Thumbnail
	(*Instance)(nil),              // 5: tkd.orthanc_bridge.v1.Instance
	(*Series)(nil),                // 6: tkd.orthanc_bridge.v1.Series
	(*Study)(nil),                 // 7: tkd.orthanc_bridge.v1.Study
	(*ListStudiesResponse)(nil),   // 8: tkd.orthanc_bridge.v1.ListStudiesResponse
	(*DownloadStudyRequest)(nil),  // 9: tkd.orthanc_bridge.v1.DownloadStudyRequest
	(*DownloadStudyResponse)(nil), // 10: tkd.orthanc_bridge.v1.DownloadStudyResponse
	(*structpb.Value)(nil),        // 11: google.protobuf.Value
	(*v1.DateRange)(nil),          // 12: tkd.common.v1.DateRange
	(*v1.Pagination)(nil),         // 13: tkd.common.v1.Pagination
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 15: google.protobuf.Duration
}
var file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_depIdxs = []int32{
	11, // 0: tkd.orthanc_bridge.v1.DICOMTag.value:type_name -> google.protobuf.Value
	12, // 1: tkd.orthanc_bridge.v1.ListStudiesRequest.date_range:type_name -> tkd.common.v1.DateRange
	2,  // 2: tkd.orthanc_bridge.v1.ListStudiesRequest.filter_tags:type_name -> tkd.orthanc_bridge.v1.FilterTag
	13, // 3: tkd.orthanc_bridge.v1.ListStudiesRequest.pagination:type_name -> tkd.common.v1.Pagination
	14, // 4: tkd.orthanc_bridge.v1.Instance.time:type_name -> google.protobuf.Timestamp
	1,  // 5: tkd.orthanc_bridge.v1.Instance.tags:type_name -> tkd.orthanc_bridge.v1.DICOMTag
	4,  // 6: tkd.orthanc_bridge.v1.Instance.thumbnail:type_name -> tkd.orthanc_bridge.v1.Thumbnail
	5,  // 7: tkd.orthanc_bridge.v1.Series.instances:type_name -> tkd.orthanc_bridge.v1.Instance
	14, // 8: tkd.orthanc_bridge.v1.Series.time:type_name -> google.protobuf.Timestamp
	1,  // 9: tkd.orthanc_bridge.v1.Series.tags:type_name -> tkd.orthanc_bridge.v1.DICOMTag
	6,  // 10: tkd.orthanc_bridge.v1.Study.series:type_name -> tkd.orthanc_bridge.v1.Series
	14, // 11: tkd.orthanc_bridge.v1.Study.time:type_name -> google.protobuf.Timestamp
	1,  // 12: tkd.orthanc_bridge.v1.Study.tags:type_name -> tkd.orthanc_bridge.v1.DICOMTag
	7,  // 13: tkd.orthanc_bridge.v1.ListStudiesResponse.studies:type_name -> tkd.orthanc_bridge.v1.Study
	0,  // 14: tkd.orthanc_bridge.v1.DownloadStudyRequest.types:type_name -> tkd.orthanc_bridge.v1.DownloadType
	15, // 15: tkd.orthanc_bridge.v1.DownloadStudyRequest.time_to_live:type_name -> google.protobuf.Duration
	14, // 16: tkd.orthanc_bridge.v1.DownloadStudyResponse.expire_time:type_name -> google.protobuf.Timestamp
	3,  // 17: tkd.orthanc_bridge.v1.OrthancBridge.ListStudies:input_type -> tkd.orthanc_bridge.v1.ListStudiesRequest
	9,  // 18: tkd.orthanc_bridge.v1.OrthancBridge.DownloadStudy:input_type -> tkd.orthanc_bridge.v1.DownloadStudyRequest
	8,  // 19: tkd.orthanc_bridge.v1.OrthancBridge.ListStudies:output_type -> tkd.orthanc_bridge.v1.ListStudiesResponse
	10, // 20: tkd.orthanc_bridge.v1.OrthancBridge.DownloadStudy:output_type -> tkd.orthanc_bridge.v1.DownloadStudyResponse
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_init() }
func file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_init() {
	if File_tkd_orthanc_bridge_v1_orthanc_bridge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_goTypes,
		DependencyIndexes: file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_depIdxs,
		EnumInfos:         file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_enumTypes,
		MessageInfos:      file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_msgTypes,
	}.Build()
	File_tkd_orthanc_bridge_v1_orthanc_bridge_proto = out.File
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_rawDesc = nil
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_goTypes = nil
	file_tkd_orthanc_bridge_v1_orthanc_bridge_proto_depIdxs = nil
}
