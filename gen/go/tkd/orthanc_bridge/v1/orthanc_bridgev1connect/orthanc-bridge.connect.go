// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/orthanc_bridge/v1/orthanc-bridge.proto

package orthanc_bridgev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/orthanc_bridge/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrthancBridgeName is the fully-qualified name of the OrthancBridge service.
	OrthancBridgeName = "tkd.orthanc_bridge.v1.OrthancBridge"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrthancBridgeSearchPatientsProcedure is the fully-qualified name of the OrthancBridge's
	// SearchPatients RPC.
	OrthancBridgeSearchPatientsProcedure = "/tkd.orthanc_bridge.v1.OrthancBridge/SearchPatients"
)

// OrthancBridgeClient is a client for the tkd.orthanc_bridge.v1.OrthancBridge service.
type OrthancBridgeClient interface {
	SearchPatients(context.Context, *connect_go.Request[v1.SearchPatientsRequest]) (*connect_go.Response[v1.SearchPatientsResponse], error)
}

// NewOrthancBridgeClient constructs a client for the tkd.orthanc_bridge.v1.OrthancBridge service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrthancBridgeClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrthancBridgeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orthancBridgeClient{
		searchPatients: connect_go.NewClient[v1.SearchPatientsRequest, v1.SearchPatientsResponse](
			httpClient,
			baseURL+OrthancBridgeSearchPatientsProcedure,
			opts...,
		),
	}
}

// orthancBridgeClient implements OrthancBridgeClient.
type orthancBridgeClient struct {
	searchPatients *connect_go.Client[v1.SearchPatientsRequest, v1.SearchPatientsResponse]
}

// SearchPatients calls tkd.orthanc_bridge.v1.OrthancBridge.SearchPatients.
func (c *orthancBridgeClient) SearchPatients(ctx context.Context, req *connect_go.Request[v1.SearchPatientsRequest]) (*connect_go.Response[v1.SearchPatientsResponse], error) {
	return c.searchPatients.CallUnary(ctx, req)
}

// OrthancBridgeHandler is an implementation of the tkd.orthanc_bridge.v1.OrthancBridge service.
type OrthancBridgeHandler interface {
	SearchPatients(context.Context, *connect_go.Request[v1.SearchPatientsRequest]) (*connect_go.Response[v1.SearchPatientsResponse], error)
}

// NewOrthancBridgeHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrthancBridgeHandler(svc OrthancBridgeHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	orthancBridgeSearchPatientsHandler := connect_go.NewUnaryHandler(
		OrthancBridgeSearchPatientsProcedure,
		svc.SearchPatients,
		opts...,
	)
	return "/tkd.orthanc_bridge.v1.OrthancBridge/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrthancBridgeSearchPatientsProcedure:
			orthancBridgeSearchPatientsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrthancBridgeHandler returns CodeUnimplemented from all methods.
type UnimplementedOrthancBridgeHandler struct{}

func (UnimplementedOrthancBridgeHandler) SearchPatients(context.Context, *connect_go.Request[v1.SearchPatientsRequest]) (*connect_go.Response[v1.SearchPatientsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.orthanc_bridge.v1.OrthancBridge.SearchPatients is not implemented"))
}
