// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: tkd/office_hours/v1/office_hours.proto

package office_hoursv1

import (
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HolidayCondition int32

const (
	// HOLIDAY_CONDITION_UNSPECIFIED means that the office hour
	// is not considered at public holidays.
	// This would be named EXCLUDE but since it's the default
	// is named UNSPECIFIED as per protobuf best practices.
	HolidayCondition_HOLIDAY_CONDITION_UNSPECIFIED HolidayCondition = 0
	// INCLUDE specifies that the office hour is also valid on
	// holidays. Note that OfficeHour.kind still applies.
	HolidayCondition_INCLUDE HolidayCondition = 1
	// EXCLUSIVE specifies that the office hour is only valid on
	// holidays. Not that OfficeHour.kind still applies.
	HolidayCondition_EXCLUSIVE HolidayCondition = 2
)

// Enum value maps for HolidayCondition.
var (
	HolidayCondition_name = map[int32]string{
		0: "HOLIDAY_CONDITION_UNSPECIFIED",
		1: "INCLUDE",
		2: "EXCLUSIVE",
	}
	HolidayCondition_value = map[string]int32{
		"HOLIDAY_CONDITION_UNSPECIFIED": 0,
		"INCLUDE":                       1,
		"EXCLUSIVE":                     2,
	}
)

func (x HolidayCondition) Enum() *HolidayCondition {
	p := new(HolidayCondition)
	*p = x
	return p
}

func (x HolidayCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HolidayCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_office_hours_v1_office_hours_proto_enumTypes[0].Descriptor()
}

func (HolidayCondition) Type() protoreflect.EnumType {
	return &file_tkd_office_hours_v1_office_hours_proto_enumTypes[0]
}

func (x HolidayCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HolidayCondition.Descriptor instead.
func (HolidayCondition) EnumDescriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{0}
}

type OfficeHour struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is a unique name for the office hour.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TimeRanges holds a list of day-time ranges at which the "office"
	// is considered open at the specified kind/holiday.
	TimeRanges []*v1.DayTimeRange `protobuf:"bytes,2,rep,name=time_ranges,json=timeRanges,proto3" json:"time_ranges,omitempty"`
	// Kind specifies at which date or day-of-week this office-hour
	// applies.
	//
	// Types that are valid to be assigned to Kind:
	//
	//	*OfficeHour_Date
	//	*OfficeHour_DayOfWeek
	Kind isOfficeHour_Kind `protobuf_oneof:"kind"`
	// HolidayCondition specifies how this office hour entry should
	// be treated if the date/day-of-week specified in kind is a holiday.
	// For HOLIDAY_CONDITION_UNSPECIFIED, the office hour is not considered
	// during holidays.
	// For INCLUDE, this office hour is considiered valid on holidays and non-holidays.
	// For EXCLUSIVE, this office hour is only considered valid when the date/day-of-week
	// specified in kind is a public holiday.
	HolidayCondition HolidayCondition `protobuf:"varint,11,opt,name=holiday_condition,json=holidayCondition,proto3,enum=tkd.office_hours.v1.HolidayCondition" json:"holiday_condition,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OfficeHour) Reset() {
	*x = OfficeHour{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfficeHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeHour) ProtoMessage() {}

func (x *OfficeHour) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeHour.ProtoReflect.Descriptor instead.
func (*OfficeHour) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{0}
}

func (x *OfficeHour) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OfficeHour) GetTimeRanges() []*v1.DayTimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *OfficeHour) GetKind() isOfficeHour_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *OfficeHour) GetDate() *v1.Date {
	if x != nil {
		if x, ok := x.Kind.(*OfficeHour_Date); ok {
			return x.Date
		}
	}
	return nil
}

func (x *OfficeHour) GetDayOfWeek() v1.DayOfWeek {
	if x != nil {
		if x, ok := x.Kind.(*OfficeHour_DayOfWeek); ok {
			return x.DayOfWeek
		}
	}
	return v1.DayOfWeek(0)
}

func (x *OfficeHour) GetHolidayCondition() HolidayCondition {
	if x != nil {
		return x.HolidayCondition
	}
	return HolidayCondition_HOLIDAY_CONDITION_UNSPECIFIED
}

type isOfficeHour_Kind interface {
	isOfficeHour_Kind()
}

type OfficeHour_Date struct {
	// Date is a specific date at which this office-hour applies.
	// If date.year is unspecified (0) it's interpreted as recurring
	// once every year.
	Date *v1.Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type OfficeHour_DayOfWeek struct {
	// DayOfWeek specifies a day-of-week at which this office hour
	// applies.
	DayOfWeek v1.DayOfWeek `protobuf:"varint,4,opt,name=day_of_week,json=dayOfWeek,proto3,enum=tkd.common.v1.DayOfWeek,oneof"`
}

func (*OfficeHour_Date) isOfficeHour_Kind() {}

func (*OfficeHour_DayOfWeek) isOfficeHour_Kind() {}

// ListHoursRequest is the request message for the ListHours RPC.
type ListHoursRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHoursRequest) Reset() {
	*x = ListHoursRequest{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHoursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoursRequest) ProtoMessage() {}

func (x *ListHoursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoursRequest.ProtoReflect.Descriptor instead.
func (*ListHoursRequest) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{1}
}

// ListHoursResponse is the response message for the ListHours RPC.
type ListHoursResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of office hours
	OfficeHours   []*OfficeHour `protobuf:"bytes,2,rep,name=office_hours,json=officeHours,proto3" json:"office_hours,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHoursResponse) Reset() {
	*x = ListHoursResponse{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoursResponse) ProtoMessage() {}

func (x *ListHoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoursResponse.ProtoReflect.Descriptor instead.
func (*ListHoursResponse) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{2}
}

func (x *ListHoursResponse) GetOfficeHours() []*OfficeHour {
	if x != nil {
		return x.OfficeHours
	}
	return nil
}

// IsOpenRequest is the request message for the IsOpen RPC.
type IsOpenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp specifies a specific time where the office-hour
	// state should be queried.
	// If unspecified, the current time is used.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsOpenRequest) Reset() {
	*x = IsOpenRequest{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOpenRequest) ProtoMessage() {}

func (x *IsOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOpenRequest.ProtoReflect.Descriptor instead.
func (*IsOpenRequest) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{3}
}

func (x *IsOpenRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// IsOpenResponse is the response message for the IsOpen RPC.
type IsOpenResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Open indicates wheter there is a valid office-hour for the
	// given timestamp.
	Open bool `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
	// OfficeHour is the office hour that is valid for the given
	// timestamp.
	OfficeHour    *OfficeHour `protobuf:"bytes,2,opt,name=office_hour,json=officeHour,proto3" json:"office_hour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsOpenResponse) Reset() {
	*x = IsOpenResponse{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsOpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOpenResponse) ProtoMessage() {}

func (x *IsOpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOpenResponse.ProtoReflect.Descriptor instead.
func (*IsOpenResponse) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{4}
}

func (x *IsOpenResponse) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *IsOpenResponse) GetOfficeHour() *OfficeHour {
	if x != nil {
		return x.OfficeHour
	}
	return nil
}

// DeleteOfficeHourRequest is the request message for the DeleteOfficeHour RPC.
type DeleteOfficeHourRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the office-hour to delete.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOfficeHourRequest) Reset() {
	*x = DeleteOfficeHourRequest{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOfficeHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfficeHourRequest) ProtoMessage() {}

func (x *DeleteOfficeHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfficeHourRequest.ProtoReflect.Descriptor instead.
func (*DeleteOfficeHourRequest) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteOfficeHourRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// OfficeHourRangesRequest is the request message for the OfficeHourRanges request.
type OfficeHourRangesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date to check for opening hours. If unspecified, the current date is used.
	Date          *v1.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OfficeHourRangesRequest) Reset() {
	*x = OfficeHourRangesRequest{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfficeHourRangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeHourRangesRequest) ProtoMessage() {}

func (x *OfficeHourRangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeHourRangesRequest.ProtoReflect.Descriptor instead.
func (*OfficeHourRangesRequest) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{6}
}

func (x *OfficeHourRangesRequest) GetDate() *v1.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type OfficeHourRangesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OfficeHour is the office hour that is valid for the given date.
	OfficeHour *OfficeHour `protobuf:"bytes,1,opt,name=office_hour,json=officeHour,proto3" json:"office_hour,omitempty"`
	// OpenRanges is a list of time-ranges considered "open" at the given date.
	OpenRanges    []*v1.TimeRange `protobuf:"bytes,2,rep,name=open_ranges,json=openRanges,proto3" json:"open_ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OfficeHourRangesResponse) Reset() {
	*x = OfficeHourRangesResponse{}
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfficeHourRangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeHourRangesResponse) ProtoMessage() {}

func (x *OfficeHourRangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_office_hours_v1_office_hours_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeHourRangesResponse.ProtoReflect.Descriptor instead.
func (*OfficeHourRangesResponse) Descriptor() ([]byte, []int) {
	return file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP(), []int{7}
}

func (x *OfficeHourRangesResponse) GetOfficeHour() *OfficeHour {
	if x != nil {
		return x.OfficeHour
	}
	return nil
}

func (x *OfficeHourRangesResponse) GetOpenRanges() []*v1.TimeRange {
	if x != nil {
		return x.OpenRanges
	}
	return nil
}

var File_tkd_office_hours_v1_office_hours_proto protoreflect.FileDescriptor

var file_tkd_office_hours_v1_office_hours_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x6b, 0x64, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x74,
	0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66, 0x77, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x6b, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa7, 0x02, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6b, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x52, 0x0a, 0x11, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x0b, 0x22, 0x12, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x57, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x0d, 0x49, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x66, 0x0a, 0x0e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x2d, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x17, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x18, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x39, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2a, 0x51, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d,
	0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x32, 0xed, 0x03, 0x0a, 0x11,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x25,
	0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x1a, 0x1f, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2c, 0x2e, 0x74, 0x6b,
	0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f,
	0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x22, 0x2e,
	0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x74,
	0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x6b, 0x64,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xe6, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6b, 0x64, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x6b, 0x6c, 0x69, 0x6e,
	0x69, 0x6b, 0x2d, 0x64, 0x6f, 0x62, 0x65, 0x72, 0x73, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x6b, 0x64, 0x2f, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54,
	0x4f, 0x58, 0xaa, 0x02, 0x12, 0x54, 0x6b, 0x64, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x54, 0x6b, 0x64, 0x5c, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x54,
	0x6b, 0x64, 0x5c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14,
	0x54, 0x6b, 0x64, 0x3a, 0x3a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tkd_office_hours_v1_office_hours_proto_rawDescOnce sync.Once
	file_tkd_office_hours_v1_office_hours_proto_rawDescData = file_tkd_office_hours_v1_office_hours_proto_rawDesc
)

func file_tkd_office_hours_v1_office_hours_proto_rawDescGZIP() []byte {
	file_tkd_office_hours_v1_office_hours_proto_rawDescOnce.Do(func() {
		file_tkd_office_hours_v1_office_hours_proto_rawDescData = protoimpl.X.CompressGZIP(file_tkd_office_hours_v1_office_hours_proto_rawDescData)
	})
	return file_tkd_office_hours_v1_office_hours_proto_rawDescData
}

var file_tkd_office_hours_v1_office_hours_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tkd_office_hours_v1_office_hours_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tkd_office_hours_v1_office_hours_proto_goTypes = []any{
	(HolidayCondition)(0),            // 0: tkd.office_hours.v1.HolidayCondition
	(*OfficeHour)(nil),               // 1: tkd.office_hours.v1.OfficeHour
	(*ListHoursRequest)(nil),         // 2: tkd.office_hours.v1.ListHoursRequest
	(*ListHoursResponse)(nil),        // 3: tkd.office_hours.v1.ListHoursResponse
	(*IsOpenRequest)(nil),            // 4: tkd.office_hours.v1.IsOpenRequest
	(*IsOpenResponse)(nil),           // 5: tkd.office_hours.v1.IsOpenResponse
	(*DeleteOfficeHourRequest)(nil),  // 6: tkd.office_hours.v1.DeleteOfficeHourRequest
	(*OfficeHourRangesRequest)(nil),  // 7: tkd.office_hours.v1.OfficeHourRangesRequest
	(*OfficeHourRangesResponse)(nil), // 8: tkd.office_hours.v1.OfficeHourRangesResponse
	(*v1.DayTimeRange)(nil),          // 9: tkd.common.v1.DayTimeRange
	(*v1.Date)(nil),                  // 10: tkd.common.v1.Date
	(v1.DayOfWeek)(0),                // 11: tkd.common.v1.DayOfWeek
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
	(*v1.TimeRange)(nil),             // 13: tkd.common.v1.TimeRange
	(*emptypb.Empty)(nil),            // 14: google.protobuf.Empty
}
var file_tkd_office_hours_v1_office_hours_proto_depIdxs = []int32{
	9,  // 0: tkd.office_hours.v1.OfficeHour.time_ranges:type_name -> tkd.common.v1.DayTimeRange
	10, // 1: tkd.office_hours.v1.OfficeHour.date:type_name -> tkd.common.v1.Date
	11, // 2: tkd.office_hours.v1.OfficeHour.day_of_week:type_name -> tkd.common.v1.DayOfWeek
	0,  // 3: tkd.office_hours.v1.OfficeHour.holiday_condition:type_name -> tkd.office_hours.v1.HolidayCondition
	1,  // 4: tkd.office_hours.v1.ListHoursResponse.office_hours:type_name -> tkd.office_hours.v1.OfficeHour
	12, // 5: tkd.office_hours.v1.IsOpenRequest.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: tkd.office_hours.v1.IsOpenResponse.office_hour:type_name -> tkd.office_hours.v1.OfficeHour
	10, // 7: tkd.office_hours.v1.OfficeHourRangesRequest.date:type_name -> tkd.common.v1.Date
	1,  // 8: tkd.office_hours.v1.OfficeHourRangesResponse.office_hour:type_name -> tkd.office_hours.v1.OfficeHour
	13, // 9: tkd.office_hours.v1.OfficeHourRangesResponse.open_ranges:type_name -> tkd.common.v1.TimeRange
	2,  // 10: tkd.office_hours.v1.OfficeHourService.ListHours:input_type -> tkd.office_hours.v1.ListHoursRequest
	1,  // 11: tkd.office_hours.v1.OfficeHourService.UpsertOfficeHour:input_type -> tkd.office_hours.v1.OfficeHour
	6,  // 12: tkd.office_hours.v1.OfficeHourService.DeleteOfficeHour:input_type -> tkd.office_hours.v1.DeleteOfficeHourRequest
	4,  // 13: tkd.office_hours.v1.OfficeHourService.IsOpen:input_type -> tkd.office_hours.v1.IsOpenRequest
	7,  // 14: tkd.office_hours.v1.OfficeHourService.OfficeHourRanges:input_type -> tkd.office_hours.v1.OfficeHourRangesRequest
	3,  // 15: tkd.office_hours.v1.OfficeHourService.ListHours:output_type -> tkd.office_hours.v1.ListHoursResponse
	1,  // 16: tkd.office_hours.v1.OfficeHourService.UpsertOfficeHour:output_type -> tkd.office_hours.v1.OfficeHour
	14, // 17: tkd.office_hours.v1.OfficeHourService.DeleteOfficeHour:output_type -> google.protobuf.Empty
	5,  // 18: tkd.office_hours.v1.OfficeHourService.IsOpen:output_type -> tkd.office_hours.v1.IsOpenResponse
	8,  // 19: tkd.office_hours.v1.OfficeHourService.OfficeHourRanges:output_type -> tkd.office_hours.v1.OfficeHourRangesResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tkd_office_hours_v1_office_hours_proto_init() }
func file_tkd_office_hours_v1_office_hours_proto_init() {
	if File_tkd_office_hours_v1_office_hours_proto != nil {
		return
	}
	file_tkd_office_hours_v1_office_hours_proto_msgTypes[0].OneofWrappers = []any{
		(*OfficeHour_Date)(nil),
		(*OfficeHour_DayOfWeek)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tkd_office_hours_v1_office_hours_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_office_hours_v1_office_hours_proto_goTypes,
		DependencyIndexes: file_tkd_office_hours_v1_office_hours_proto_depIdxs,
		EnumInfos:         file_tkd_office_hours_v1_office_hours_proto_enumTypes,
		MessageInfos:      file_tkd_office_hours_v1_office_hours_proto_msgTypes,
	}.Build()
	File_tkd_office_hours_v1_office_hours_proto = out.File
	file_tkd_office_hours_v1_office_hours_proto_rawDesc = nil
	file_tkd_office_hours_v1_office_hours_proto_goTypes = nil
	file_tkd_office_hours_v1_office_hours_proto_depIdxs = nil
}
