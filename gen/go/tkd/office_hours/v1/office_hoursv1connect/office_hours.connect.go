// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/office_hours/v1/office_hours.proto

package office_hoursv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/office_hours/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OfficeHourServiceName is the fully-qualified name of the OfficeHourService service.
	OfficeHourServiceName = "tkd.office_hours.v1.OfficeHourService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OfficeHourServiceListHoursProcedure is the fully-qualified name of the OfficeHourService's
	// ListHours RPC.
	OfficeHourServiceListHoursProcedure = "/tkd.office_hours.v1.OfficeHourService/ListHours"
	// OfficeHourServiceUpsertOfficeHourProcedure is the fully-qualified name of the OfficeHourService's
	// UpsertOfficeHour RPC.
	OfficeHourServiceUpsertOfficeHourProcedure = "/tkd.office_hours.v1.OfficeHourService/UpsertOfficeHour"
	// OfficeHourServiceDeleteOfficeHourProcedure is the fully-qualified name of the OfficeHourService's
	// DeleteOfficeHour RPC.
	OfficeHourServiceDeleteOfficeHourProcedure = "/tkd.office_hours.v1.OfficeHourService/DeleteOfficeHour"
	// OfficeHourServiceIsOpenProcedure is the fully-qualified name of the OfficeHourService's IsOpen
	// RPC.
	OfficeHourServiceIsOpenProcedure = "/tkd.office_hours.v1.OfficeHourService/IsOpen"
	// OfficeHourServiceOfficeHourRangesProcedure is the fully-qualified name of the OfficeHourService's
	// OfficeHourRanges RPC.
	OfficeHourServiceOfficeHourRangesProcedure = "/tkd.office_hours.v1.OfficeHourService/OfficeHourRanges"
)

// OfficeHourServiceClient is a client for the tkd.office_hours.v1.OfficeHourService service.
type OfficeHourServiceClient interface {
	ListHours(context.Context, *connect_go.Request[v1.ListHoursRequest]) (*connect_go.Response[v1.ListHoursResponse], error)
	UpsertOfficeHour(context.Context, *connect_go.Request[v1.OfficeHour]) (*connect_go.Response[v1.OfficeHour], error)
	DeleteOfficeHour(context.Context, *connect_go.Request[v1.DeleteOfficeHourRequest]) (*connect_go.Response[emptypb.Empty], error)
	IsOpen(context.Context, *connect_go.Request[v1.IsOpenRequest]) (*connect_go.Response[v1.IsOpenResponse], error)
	OfficeHourRanges(context.Context, *connect_go.Request[v1.OfficeHourRangesRequest]) (*connect_go.Response[v1.OfficeHourRangesResponse], error)
}

// NewOfficeHourServiceClient constructs a client for the tkd.office_hours.v1.OfficeHourService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOfficeHourServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OfficeHourServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &officeHourServiceClient{
		listHours: connect_go.NewClient[v1.ListHoursRequest, v1.ListHoursResponse](
			httpClient,
			baseURL+OfficeHourServiceListHoursProcedure,
			opts...,
		),
		upsertOfficeHour: connect_go.NewClient[v1.OfficeHour, v1.OfficeHour](
			httpClient,
			baseURL+OfficeHourServiceUpsertOfficeHourProcedure,
			opts...,
		),
		deleteOfficeHour: connect_go.NewClient[v1.DeleteOfficeHourRequest, emptypb.Empty](
			httpClient,
			baseURL+OfficeHourServiceDeleteOfficeHourProcedure,
			opts...,
		),
		isOpen: connect_go.NewClient[v1.IsOpenRequest, v1.IsOpenResponse](
			httpClient,
			baseURL+OfficeHourServiceIsOpenProcedure,
			opts...,
		),
		officeHourRanges: connect_go.NewClient[v1.OfficeHourRangesRequest, v1.OfficeHourRangesResponse](
			httpClient,
			baseURL+OfficeHourServiceOfficeHourRangesProcedure,
			opts...,
		),
	}
}

// officeHourServiceClient implements OfficeHourServiceClient.
type officeHourServiceClient struct {
	listHours        *connect_go.Client[v1.ListHoursRequest, v1.ListHoursResponse]
	upsertOfficeHour *connect_go.Client[v1.OfficeHour, v1.OfficeHour]
	deleteOfficeHour *connect_go.Client[v1.DeleteOfficeHourRequest, emptypb.Empty]
	isOpen           *connect_go.Client[v1.IsOpenRequest, v1.IsOpenResponse]
	officeHourRanges *connect_go.Client[v1.OfficeHourRangesRequest, v1.OfficeHourRangesResponse]
}

// ListHours calls tkd.office_hours.v1.OfficeHourService.ListHours.
func (c *officeHourServiceClient) ListHours(ctx context.Context, req *connect_go.Request[v1.ListHoursRequest]) (*connect_go.Response[v1.ListHoursResponse], error) {
	return c.listHours.CallUnary(ctx, req)
}

// UpsertOfficeHour calls tkd.office_hours.v1.OfficeHourService.UpsertOfficeHour.
func (c *officeHourServiceClient) UpsertOfficeHour(ctx context.Context, req *connect_go.Request[v1.OfficeHour]) (*connect_go.Response[v1.OfficeHour], error) {
	return c.upsertOfficeHour.CallUnary(ctx, req)
}

// DeleteOfficeHour calls tkd.office_hours.v1.OfficeHourService.DeleteOfficeHour.
func (c *officeHourServiceClient) DeleteOfficeHour(ctx context.Context, req *connect_go.Request[v1.DeleteOfficeHourRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteOfficeHour.CallUnary(ctx, req)
}

// IsOpen calls tkd.office_hours.v1.OfficeHourService.IsOpen.
func (c *officeHourServiceClient) IsOpen(ctx context.Context, req *connect_go.Request[v1.IsOpenRequest]) (*connect_go.Response[v1.IsOpenResponse], error) {
	return c.isOpen.CallUnary(ctx, req)
}

// OfficeHourRanges calls tkd.office_hours.v1.OfficeHourService.OfficeHourRanges.
func (c *officeHourServiceClient) OfficeHourRanges(ctx context.Context, req *connect_go.Request[v1.OfficeHourRangesRequest]) (*connect_go.Response[v1.OfficeHourRangesResponse], error) {
	return c.officeHourRanges.CallUnary(ctx, req)
}

// OfficeHourServiceHandler is an implementation of the tkd.office_hours.v1.OfficeHourService
// service.
type OfficeHourServiceHandler interface {
	ListHours(context.Context, *connect_go.Request[v1.ListHoursRequest]) (*connect_go.Response[v1.ListHoursResponse], error)
	UpsertOfficeHour(context.Context, *connect_go.Request[v1.OfficeHour]) (*connect_go.Response[v1.OfficeHour], error)
	DeleteOfficeHour(context.Context, *connect_go.Request[v1.DeleteOfficeHourRequest]) (*connect_go.Response[emptypb.Empty], error)
	IsOpen(context.Context, *connect_go.Request[v1.IsOpenRequest]) (*connect_go.Response[v1.IsOpenResponse], error)
	OfficeHourRanges(context.Context, *connect_go.Request[v1.OfficeHourRangesRequest]) (*connect_go.Response[v1.OfficeHourRangesResponse], error)
}

// NewOfficeHourServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOfficeHourServiceHandler(svc OfficeHourServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	officeHourServiceListHoursHandler := connect_go.NewUnaryHandler(
		OfficeHourServiceListHoursProcedure,
		svc.ListHours,
		opts...,
	)
	officeHourServiceUpsertOfficeHourHandler := connect_go.NewUnaryHandler(
		OfficeHourServiceUpsertOfficeHourProcedure,
		svc.UpsertOfficeHour,
		opts...,
	)
	officeHourServiceDeleteOfficeHourHandler := connect_go.NewUnaryHandler(
		OfficeHourServiceDeleteOfficeHourProcedure,
		svc.DeleteOfficeHour,
		opts...,
	)
	officeHourServiceIsOpenHandler := connect_go.NewUnaryHandler(
		OfficeHourServiceIsOpenProcedure,
		svc.IsOpen,
		opts...,
	)
	officeHourServiceOfficeHourRangesHandler := connect_go.NewUnaryHandler(
		OfficeHourServiceOfficeHourRangesProcedure,
		svc.OfficeHourRanges,
		opts...,
	)
	return "/tkd.office_hours.v1.OfficeHourService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OfficeHourServiceListHoursProcedure:
			officeHourServiceListHoursHandler.ServeHTTP(w, r)
		case OfficeHourServiceUpsertOfficeHourProcedure:
			officeHourServiceUpsertOfficeHourHandler.ServeHTTP(w, r)
		case OfficeHourServiceDeleteOfficeHourProcedure:
			officeHourServiceDeleteOfficeHourHandler.ServeHTTP(w, r)
		case OfficeHourServiceIsOpenProcedure:
			officeHourServiceIsOpenHandler.ServeHTTP(w, r)
		case OfficeHourServiceOfficeHourRangesProcedure:
			officeHourServiceOfficeHourRangesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOfficeHourServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOfficeHourServiceHandler struct{}

func (UnimplementedOfficeHourServiceHandler) ListHours(context.Context, *connect_go.Request[v1.ListHoursRequest]) (*connect_go.Response[v1.ListHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.office_hours.v1.OfficeHourService.ListHours is not implemented"))
}

func (UnimplementedOfficeHourServiceHandler) UpsertOfficeHour(context.Context, *connect_go.Request[v1.OfficeHour]) (*connect_go.Response[v1.OfficeHour], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.office_hours.v1.OfficeHourService.UpsertOfficeHour is not implemented"))
}

func (UnimplementedOfficeHourServiceHandler) DeleteOfficeHour(context.Context, *connect_go.Request[v1.DeleteOfficeHourRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.office_hours.v1.OfficeHourService.DeleteOfficeHour is not implemented"))
}

func (UnimplementedOfficeHourServiceHandler) IsOpen(context.Context, *connect_go.Request[v1.IsOpenRequest]) (*connect_go.Response[v1.IsOpenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.office_hours.v1.OfficeHourService.IsOpen is not implemented"))
}

func (UnimplementedOfficeHourServiceHandler) OfficeHourRanges(context.Context, *connect_go.Request[v1.OfficeHourRangesRequest]) (*connect_go.Response[v1.OfficeHourRangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.office_hours.v1.OfficeHourService.OfficeHourRanges is not implemented"))
}
