// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: tkd/customer/v1/patient.proto

package customerv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/common/v1"
	v11 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/treatment/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatientGender int32

const (
	PatientGender_PATIENT_GENDER_UNSPECIFIED      PatientGender = 0
	PatientGender_PATIENT_GENDER_MALE             PatientGender = 1
	PatientGender_PATIENT_GENDER_FEMALE           PatientGender = 2
	PatientGender_PATIENT_GENDER_MALE_CASTRATED   PatientGender = 3
	PatientGender_PATIENT_GENDER_FEMALE_CASTRATED PatientGender = 4
)

// Enum value maps for PatientGender.
var (
	PatientGender_name = map[int32]string{
		0: "PATIENT_GENDER_UNSPECIFIED",
		1: "PATIENT_GENDER_MALE",
		2: "PATIENT_GENDER_FEMALE",
		3: "PATIENT_GENDER_MALE_CASTRATED",
		4: "PATIENT_GENDER_FEMALE_CASTRATED",
	}
	PatientGender_value = map[string]int32{
		"PATIENT_GENDER_UNSPECIFIED":      0,
		"PATIENT_GENDER_MALE":             1,
		"PATIENT_GENDER_FEMALE":           2,
		"PATIENT_GENDER_MALE_CASTRATED":   3,
		"PATIENT_GENDER_FEMALE_CASTRATED": 4,
	}
)

func (x PatientGender) Enum() *PatientGender {
	p := new(PatientGender)
	*p = x
	return p
}

func (x PatientGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatientGender) Descriptor() protoreflect.EnumDescriptor {
	return file_tkd_customer_v1_patient_proto_enumTypes[0].Descriptor()
}

func (PatientGender) Type() protoreflect.EnumType {
	return &file_tkd_customer_v1_patient_proto_enumTypes[0]
}

func (x PatientGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatientGender.Descriptor instead.
func (PatientGender) EnumDescriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{0}
}

type Patient struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CustomerId holds the ID of the customer this patient belongs to.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// PatientName is the name of the patient.
	PatientName string `protobuf:"bytes,2,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	// Species describes the species of the patient.
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	// Breed describes the breed of the patient.
	Breed string `protobuf:"bytes,14,opt,name=breed,proto3" json:"breed,omitempty"`
	// Birthday holds the birthday of the patient.
	Birthday *v1.Date `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// Gender holds the gender of a patient.
	Gender PatientGender `protobuf:"varint,5,opt,name=gender,proto3,enum=tkd.customer.v1.PatientGender" json:"gender,omitempty"`
	// Comment holds an optional comment for the patient in markdown format.
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// PatientId holds the internal ID of the patient. It cannot be modified once the patient
	// has been created.
	PatientId string `protobuf:"bytes,7,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	// IsAlive is set to true if this patient is still alive.
	IsAlive bool `protobuf:"varint,8,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	// ChipNumber is the chip-number of the patient.
	ChipNumber string `protobuf:"bytes,15,opt,name=chip_number,json=chipNumber,proto3" json:"chip_number,omitempty"`
	Color      string `protobuf:"bytes,16,opt,name=color,proto3" json:"color,omitempty"`
	// ExtraData might hold additional data from the importer.
	// The keys and values are opaque to the server.
	// Users will likely need to inspect the importer field to distinguish
	// which keys/values are available.
	ExtraData *structpb.Struct `protobuf:"bytes,17,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// AdditionalUniqueId might be set if the software this patient is imported
	// from provides an addition unique ID.
	AdditionUniqueId string `protobuf:"bytes,18,opt,name=addition_unique_id,json=additionUniqueId,proto3" json:"addition_unique_id,omitempty"`
	// InternalReference holds the internal identifier of the patient
	// from the importer.
	InternalReference string `protobuf:"bytes,9,opt,name=internal_reference,json=internalReference,proto3" json:"internal_reference,omitempty"`
	// Importer holds an identifier for the importer
	// that created this patient record.
	// Records created by human users whill have importer_reference
	// and importer_patient_id set to an empty string ("").
	Importer string `protobuf:"bytes,10,opt,name=importer,proto3" json:"importer,omitempty"`
	// FirstSeen holds the time the patient has been first seen.
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// LastUpdated holds the time the patient records has been last updated.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// LastUpdatedBy holds the ID of the user that modified the patient record last.
	LastUpdatedBy string `protobuf:"bytes,13,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	// AssignedSpeciesName is the name of the species as stored
	// in tkd.treatment.v1.SpeciesService
	AssignedSpeciesName string `protobuf:"bytes,19,opt,name=assigned_species_name,json=assignedSpeciesName,proto3" json:"assigned_species_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Patient) Reset() {
	*x = Patient{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{0}
}

func (x *Patient) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Patient) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *Patient) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Patient) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *Patient) GetBirthday() *v1.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *Patient) GetGender() PatientGender {
	if x != nil {
		return x.Gender
	}
	return PatientGender_PATIENT_GENDER_UNSPECIFIED
}

func (x *Patient) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Patient) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *Patient) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *Patient) GetChipNumber() string {
	if x != nil {
		return x.ChipNumber
	}
	return ""
}

func (x *Patient) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Patient) GetExtraData() *structpb.Struct {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *Patient) GetAdditionUniqueId() string {
	if x != nil {
		return x.AdditionUniqueId
	}
	return ""
}

func (x *Patient) GetInternalReference() string {
	if x != nil {
		return x.InternalReference
	}
	return ""
}

func (x *Patient) GetImporter() string {
	if x != nil {
		return x.Importer
	}
	return ""
}

func (x *Patient) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *Patient) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Patient) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *Patient) GetAssignedSpeciesName() string {
	if x != nil {
		return x.AssignedSpeciesName
	}
	return ""
}

type QueryPatientsRequests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPatientsRequests) Reset() {
	*x = QueryPatientsRequests{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPatientsRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPatientsRequests) ProtoMessage() {}

func (x *QueryPatientsRequests) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPatientsRequests.ProtoReflect.Descriptor instead.
func (*QueryPatientsRequests) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{1}
}

func (x *QueryPatientsRequests) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type QueryPatientsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patients      []*Patient             `protobuf:"bytes,1,rep,name=patients,proto3" json:"patients,omitempty"`
	Species       []*v11.Species         `protobuf:"bytes,2,rep,name=species,proto3" json:"species,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPatientsResponse) Reset() {
	*x = QueryPatientsResponse{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPatientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPatientsResponse) ProtoMessage() {}

func (x *QueryPatientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPatientsResponse.ProtoReflect.Descriptor instead.
func (*QueryPatientsResponse) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{2}
}

func (x *QueryPatientsResponse) GetPatients() []*Patient {
	if x != nil {
		return x.Patients
	}
	return nil
}

func (x *QueryPatientsResponse) GetSpecies() []*v11.Species {
	if x != nil {
		return x.Species
	}
	return nil
}

type GetPatientsByCustomerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomerId    string                 `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPatientsByCustomerRequest) Reset() {
	*x = GetPatientsByCustomerRequest{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientsByCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientsByCustomerRequest) ProtoMessage() {}

func (x *GetPatientsByCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientsByCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetPatientsByCustomerRequest) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{3}
}

func (x *GetPatientsByCustomerRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type GetPatientsByCustomerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patients      []*Patient             `protobuf:"bytes,1,rep,name=patients,proto3" json:"patients,omitempty"`
	Species       []*v11.Species         `protobuf:"bytes,2,rep,name=species,proto3" json:"species,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPatientsByCustomerResponse) Reset() {
	*x = GetPatientsByCustomerResponse{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientsByCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientsByCustomerResponse) ProtoMessage() {}

func (x *GetPatientsByCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientsByCustomerResponse.ProtoReflect.Descriptor instead.
func (*GetPatientsByCustomerResponse) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{4}
}

func (x *GetPatientsByCustomerResponse) GetPatients() []*Patient {
	if x != nil {
		return x.Patients
	}
	return nil
}

func (x *GetPatientsByCustomerResponse) GetSpecies() []*v11.Species {
	if x != nil {
		return x.Species
	}
	return nil
}

type GetPatientRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*GetPatientRequest_AnimalId
	//	*GetPatientRequest_AdditionalUniqueId
	Kind          isGetPatientRequest_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPatientRequest) Reset() {
	*x = GetPatientRequest{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientRequest) ProtoMessage() {}

func (x *GetPatientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientRequest.ProtoReflect.Descriptor instead.
func (*GetPatientRequest) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{5}
}

func (x *GetPatientRequest) GetKind() isGetPatientRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *GetPatientRequest) GetAnimalId() string {
	if x != nil {
		if x, ok := x.Kind.(*GetPatientRequest_AnimalId); ok {
			return x.AnimalId
		}
	}
	return ""
}

func (x *GetPatientRequest) GetAdditionalUniqueId() string {
	if x != nil {
		if x, ok := x.Kind.(*GetPatientRequest_AdditionalUniqueId); ok {
			return x.AdditionalUniqueId
		}
	}
	return ""
}

type isGetPatientRequest_Kind interface {
	isGetPatientRequest_Kind()
}

type GetPatientRequest_AnimalId struct {
	AnimalId string `protobuf:"bytes,1,opt,name=animal_id,json=animalId,proto3,oneof"`
}

type GetPatientRequest_AdditionalUniqueId struct {
	AdditionalUniqueId string `protobuf:"bytes,2,opt,name=additional_unique_id,json=additionalUniqueId,proto3,oneof"`
}

func (*GetPatientRequest_AnimalId) isGetPatientRequest_Kind() {}

func (*GetPatientRequest_AdditionalUniqueId) isGetPatientRequest_Kind() {}

type Anamnesis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AnamnesisId holds the internal id of this anamnesis entry.
	// This field is only an output field.
	AnamnesisId string `protobuf:"bytes,1,opt,name=anamnesis_id,json=anamnesisId,proto3" json:"anamnesis_id,omitempty"`
	// Time holds the timestamp at which this anamnesis has been created.
	// If left empty, the server will use the current timestamp.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Text holds the text of the anamnesis.
	// Optionally formated in Markdown.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Diagnosis holds an optional diagnosis. It might also be used
	// for a short summary of the text field.
	Diagnosis     string `protobuf:"bytes,4,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	Order         int64  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Anamnesis) Reset() {
	*x = Anamnesis{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Anamnesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anamnesis) ProtoMessage() {}

func (x *Anamnesis) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anamnesis.ProtoReflect.Descriptor instead.
func (*Anamnesis) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{6}
}

func (x *Anamnesis) GetAnamnesisId() string {
	if x != nil {
		return x.AnamnesisId
	}
	return ""
}

func (x *Anamnesis) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Anamnesis) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Anamnesis) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *Anamnesis) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type PatientImportReference struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Importer          string                 `protobuf:"bytes,1,opt,name=importer,proto3" json:"importer,omitempty"`
	InternalReference string                 `protobuf:"bytes,2,opt,name=internal_reference,json=internalReference,proto3" json:"internal_reference,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PatientImportReference) Reset() {
	*x = PatientImportReference{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatientImportReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientImportReference) ProtoMessage() {}

func (x *PatientImportReference) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientImportReference.ProtoReflect.Descriptor instead.
func (*PatientImportReference) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{7}
}

func (x *PatientImportReference) GetImporter() string {
	if x != nil {
		return x.Importer
	}
	return ""
}

func (x *PatientImportReference) GetInternalReference() string {
	if x != nil {
		return x.InternalReference
	}
	return ""
}

type AddAnamnesisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Reference:
	//
	//	*AddAnamnesisRequest_PatientId
	//	*AddAnamnesisRequest_AdditionUniqueId
	//	*AddAnamnesisRequest_PatientImportReference
	Reference     isAddAnamnesisRequest_Reference `protobuf_oneof:"reference"`
	Anamnesis     *Anamnesis                      `protobuf:"bytes,4,opt,name=anamnesis,proto3" json:"anamnesis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAnamnesisRequest) Reset() {
	*x = AddAnamnesisRequest{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAnamnesisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnamnesisRequest) ProtoMessage() {}

func (x *AddAnamnesisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnamnesisRequest.ProtoReflect.Descriptor instead.
func (*AddAnamnesisRequest) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{8}
}

func (x *AddAnamnesisRequest) GetReference() isAddAnamnesisRequest_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *AddAnamnesisRequest) GetPatientId() string {
	if x != nil {
		if x, ok := x.Reference.(*AddAnamnesisRequest_PatientId); ok {
			return x.PatientId
		}
	}
	return ""
}

func (x *AddAnamnesisRequest) GetAdditionUniqueId() string {
	if x != nil {
		if x, ok := x.Reference.(*AddAnamnesisRequest_AdditionUniqueId); ok {
			return x.AdditionUniqueId
		}
	}
	return ""
}

func (x *AddAnamnesisRequest) GetPatientImportReference() *PatientImportReference {
	if x != nil {
		if x, ok := x.Reference.(*AddAnamnesisRequest_PatientImportReference); ok {
			return x.PatientImportReference
		}
	}
	return nil
}

func (x *AddAnamnesisRequest) GetAnamnesis() *Anamnesis {
	if x != nil {
		return x.Anamnesis
	}
	return nil
}

type isAddAnamnesisRequest_Reference interface {
	isAddAnamnesisRequest_Reference()
}

type AddAnamnesisRequest_PatientId struct {
	PatientId string `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3,oneof"`
}

type AddAnamnesisRequest_AdditionUniqueId struct {
	AdditionUniqueId string `protobuf:"bytes,2,opt,name=addition_unique_id,json=additionUniqueId,proto3,oneof"`
}

type AddAnamnesisRequest_PatientImportReference struct {
	PatientImportReference *PatientImportReference `protobuf:"bytes,3,opt,name=patient_import_reference,json=patientImportReference,proto3,oneof"`
}

func (*AddAnamnesisRequest_PatientId) isAddAnamnesisRequest_Reference() {}

func (*AddAnamnesisRequest_AdditionUniqueId) isAddAnamnesisRequest_Reference() {}

func (*AddAnamnesisRequest_PatientImportReference) isAddAnamnesisRequest_Reference() {}

type GetAnamnesisRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	PatientId string                 `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	// TimeRange might be set to limit which anamnesis entries should be returned.
	TimeRange *v1.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// ReadMask can be set to specify which fields of the GetAnamnesisResponse
	// message should be returned.
	// By default, only the anamnesis field is set.
	// To also include the Patient data, set the read_mask to ["patient", "anamnesis"]
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAnamnesisRequest) Reset() {
	*x = GetAnamnesisRequest{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnamnesisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnamnesisRequest) ProtoMessage() {}

func (x *GetAnamnesisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnamnesisRequest.ProtoReflect.Descriptor instead.
func (*GetAnamnesisRequest) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{9}
}

func (x *GetAnamnesisRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *GetAnamnesisRequest) GetTimeRange() *v1.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GetAnamnesisRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type GetAnamnesisResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patient       *Patient               `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Species       *v11.Species           `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	Anamnesis     []*Anamnesis           `protobuf:"bytes,2,rep,name=anamnesis,proto3" json:"anamnesis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAnamnesisResponse) Reset() {
	*x = GetAnamnesisResponse{}
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnamnesisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnamnesisResponse) ProtoMessage() {}

func (x *GetAnamnesisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tkd_customer_v1_patient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnamnesisResponse.ProtoReflect.Descriptor instead.
func (*GetAnamnesisResponse) Descriptor() ([]byte, []int) {
	return file_tkd_customer_v1_patient_proto_rawDescGZIP(), []int{10}
}

func (x *GetAnamnesisResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *GetAnamnesisResponse) GetSpecies() *v11.Species {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *GetAnamnesisResponse) GetAnamnesis() []*Anamnesis {
	if x != nil {
		return x.Anamnesis
	}
	return nil
}

var File_tkd_customer_v1_patient_proto protoreflect.FileDescriptor

const file_tkd_customer_v1_patient_proto_rawDesc = "" +
	"\n" +
	"\x1dtkd/customer/v1/patient.proto\x12\x0ftkd.customer.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x18tkd/common/v1/date.proto\x1a\x1etkd/common/v1/time_range.proto\x1a\x1etkd/common/v1/descriptor.proto\x1a\x1bbuf/validate/validate.proto\x1a\x1etkd/treatment/v1/species.proto\"\xf8\x05\n" +
	"\aPatient\x12\x1f\n" +
	"\vcustomer_id\x18\x01 \x01(\tR\n" +
	"customerId\x12!\n" +
	"\fpatient_name\x18\x02 \x01(\tR\vpatientName\x12\x18\n" +
	"\aspecies\x18\x03 \x01(\tR\aspecies\x12\x14\n" +
	"\x05breed\x18\x0e \x01(\tR\x05breed\x12/\n" +
	"\bbirthday\x18\x04 \x01(\v2\x13.tkd.common.v1.DateR\bbirthday\x126\n" +
	"\x06gender\x18\x05 \x01(\x0e2\x1e.tkd.customer.v1.PatientGenderR\x06gender\x12\x18\n" +
	"\acomment\x18\x06 \x01(\tR\acomment\x12\x1d\n" +
	"\n" +
	"patient_id\x18\a \x01(\tR\tpatientId\x12\x19\n" +
	"\bis_alive\x18\b \x01(\bR\aisAlive\x12\x1f\n" +
	"\vchip_number\x18\x0f \x01(\tR\n" +
	"chipNumber\x12\x14\n" +
	"\x05color\x18\x10 \x01(\tR\x05color\x126\n" +
	"\n" +
	"extra_data\x18\x11 \x01(\v2\x17.google.protobuf.StructR\textraData\x12,\n" +
	"\x12addition_unique_id\x18\x12 \x01(\tR\x10additionUniqueId\x12-\n" +
	"\x12internal_reference\x18\t \x01(\tR\x11internalReference\x12\x1a\n" +
	"\bimporter\x18\n" +
	" \x01(\tR\bimporter\x129\n" +
	"\n" +
	"first_seen\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tfirstSeen\x12=\n" +
	"\flast_updated\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12&\n" +
	"\x0flast_updated_by\x18\r \x01(\tR\rlastUpdatedBy\x122\n" +
	"\x15assigned_species_name\x18\x13 \x01(\tR\x13assignedSpeciesName\"-\n" +
	"\x15QueryPatientsRequests\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"\x82\x01\n" +
	"\x15QueryPatientsResponse\x124\n" +
	"\bpatients\x18\x01 \x03(\v2\x18.tkd.customer.v1.PatientR\bpatients\x123\n" +
	"\aspecies\x18\x02 \x03(\v2\x19.tkd.treatment.v1.SpeciesR\aspecies\"H\n" +
	"\x1cGetPatientsByCustomerRequest\x12(\n" +
	"\vcustomer_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\n" +
	"customerId\"\x8a\x01\n" +
	"\x1dGetPatientsByCustomerResponse\x124\n" +
	"\bpatients\x18\x01 \x03(\v2\x18.tkd.customer.v1.PatientR\bpatients\x123\n" +
	"\aspecies\x18\x02 \x03(\v2\x19.tkd.treatment.v1.SpeciesR\aspecies\"v\n" +
	"\x11GetPatientRequest\x12\x1d\n" +
	"\tanimal_id\x18\x01 \x01(\tH\x00R\banimalId\x122\n" +
	"\x14additional_unique_id\x18\x02 \x01(\tH\x00R\x12additionalUniqueIdB\x0e\n" +
	"\x04kind\x12\x06\xfa\xf7\x18\x02\b\x01\"\xa6\x01\n" +
	"\tAnamnesis\x12!\n" +
	"\fanamnesis_id\x18\x01 \x01(\tR\vanamnesisId\x12.\n" +
	"\x04time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x12\n" +
	"\x04text\x18\x03 \x01(\tR\x04text\x12\x1c\n" +
	"\tdiagnosis\x18\x04 \x01(\tR\tdiagnosis\x12\x14\n" +
	"\x05order\x18\x05 \x01(\x03R\x05order\"c\n" +
	"\x16PatientImportReference\x12\x1a\n" +
	"\bimporter\x18\x01 \x01(\tR\bimporter\x12-\n" +
	"\x12internal_reference\x18\x02 \x01(\tR\x11internalReference\"\xa3\x02\n" +
	"\x13AddAnamnesisRequest\x12\x1f\n" +
	"\n" +
	"patient_id\x18\x01 \x01(\tH\x00R\tpatientId\x12.\n" +
	"\x12addition_unique_id\x18\x02 \x01(\tH\x00R\x10additionUniqueId\x12c\n" +
	"\x18patient_import_reference\x18\x03 \x01(\v2'.tkd.customer.v1.PatientImportReferenceH\x00R\x16patientImportReference\x12A\n" +
	"\tanamnesis\x18\x04 \x01(\v2\x1a.tkd.customer.v1.AnamnesisB\a\xfa\xf7\x18\x03\xc8\x01\x01R\tanamnesisB\x13\n" +
	"\treference\x12\x06\xfa\xf7\x18\x02\b\x01\"\xaf\x01\n" +
	"\x13GetAnamnesisRequest\x12&\n" +
	"\n" +
	"patient_id\x18\x01 \x01(\tB\a\xfa\xf7\x18\x03\xc8\x01\x01R\tpatientId\x127\n" +
	"\n" +
	"time_range\x18\x02 \x01(\v2\x18.tkd.common.v1.TimeRangeR\ttimeRange\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\xb9\x01\n" +
	"\x14GetAnamnesisResponse\x122\n" +
	"\apatient\x18\x01 \x01(\v2\x18.tkd.customer.v1.PatientR\apatient\x123\n" +
	"\aspecies\x18\x03 \x01(\v2\x19.tkd.treatment.v1.SpeciesR\aspecies\x128\n" +
	"\tanamnesis\x18\x02 \x03(\v2\x1a.tkd.customer.v1.AnamnesisR\tanamnesis*\xab\x01\n" +
	"\rPatientGender\x12\x1e\n" +
	"\x1aPATIENT_GENDER_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13PATIENT_GENDER_MALE\x10\x01\x12\x19\n" +
	"\x15PATIENT_GENDER_FEMALE\x10\x02\x12!\n" +
	"\x1dPATIENT_GENDER_MALE_CASTRATED\x10\x03\x12#\n" +
	"\x1fPATIENT_GENDER_FEMALE_CASTRATED\x10\x042\x83\x04\n" +
	"\x0ePatientService\x12f\n" +
	"\rQueryPatients\x12&.tkd.customer.v1.QueryPatientsRequests\x1a&.tkd.customer.v1.QueryPatientsResponse\"\x05\xb2~\x02\b\x01\x12}\n" +
	"\x15GetPatientsByCustomer\x12-.tkd.customer.v1.GetPatientsByCustomerRequest\x1a..tkd.customer.v1.GetPatientsByCustomerResponse\"\x05\xb2~\x02\b\x01\x12Q\n" +
	"\n" +
	"GetPatient\x12\".tkd.customer.v1.GetPatientRequest\x1a\x18.tkd.customer.v1.Patient\"\x05\xb2~\x02\b\x01\x12S\n" +
	"\fAddAnamnesis\x12$.tkd.customer.v1.AddAnamnesisRequest\x1a\x16.google.protobuf.Empty\"\x05\xb2~\x02\b\x01\x12b\n" +
	"\fGetAnamnesis\x12$.tkd.customer.v1.GetAnamnesisRequest\x1a%.tkd.customer.v1.GetAnamnesisResponse\"\x05\xb2~\x02\b\x01B\xca\x01\n" +
	"\x13com.tkd.customer.v1B\fPatientProtoP\x01ZGgithub.com/tierklinik-dobersberg/apis/gen/go/tkd/customer/v1;customerv1\xa2\x02\x03TCX\xaa\x02\x0fTkd.Customer.V1\xca\x02\x0fTkd\\Customer\\V1\xe2\x02\x1bTkd\\Customer\\V1\\GPBMetadata\xea\x02\x11Tkd::Customer::V1b\x06proto3"

var (
	file_tkd_customer_v1_patient_proto_rawDescOnce sync.Once
	file_tkd_customer_v1_patient_proto_rawDescData []byte
)

func file_tkd_customer_v1_patient_proto_rawDescGZIP() []byte {
	file_tkd_customer_v1_patient_proto_rawDescOnce.Do(func() {
		file_tkd_customer_v1_patient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tkd_customer_v1_patient_proto_rawDesc), len(file_tkd_customer_v1_patient_proto_rawDesc)))
	})
	return file_tkd_customer_v1_patient_proto_rawDescData
}

var file_tkd_customer_v1_patient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tkd_customer_v1_patient_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tkd_customer_v1_patient_proto_goTypes = []any{
	(PatientGender)(0),                    // 0: tkd.customer.v1.PatientGender
	(*Patient)(nil),                       // 1: tkd.customer.v1.Patient
	(*QueryPatientsRequests)(nil),         // 2: tkd.customer.v1.QueryPatientsRequests
	(*QueryPatientsResponse)(nil),         // 3: tkd.customer.v1.QueryPatientsResponse
	(*GetPatientsByCustomerRequest)(nil),  // 4: tkd.customer.v1.GetPatientsByCustomerRequest
	(*GetPatientsByCustomerResponse)(nil), // 5: tkd.customer.v1.GetPatientsByCustomerResponse
	(*GetPatientRequest)(nil),             // 6: tkd.customer.v1.GetPatientRequest
	(*Anamnesis)(nil),                     // 7: tkd.customer.v1.Anamnesis
	(*PatientImportReference)(nil),        // 8: tkd.customer.v1.PatientImportReference
	(*AddAnamnesisRequest)(nil),           // 9: tkd.customer.v1.AddAnamnesisRequest
	(*GetAnamnesisRequest)(nil),           // 10: tkd.customer.v1.GetAnamnesisRequest
	(*GetAnamnesisResponse)(nil),          // 11: tkd.customer.v1.GetAnamnesisResponse
	(*v1.Date)(nil),                       // 12: tkd.common.v1.Date
	(*structpb.Struct)(nil),               // 13: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),         // 14: google.protobuf.Timestamp
	(*v11.Species)(nil),                   // 15: tkd.treatment.v1.Species
	(*v1.TimeRange)(nil),                  // 16: tkd.common.v1.TimeRange
	(*fieldmaskpb.FieldMask)(nil),         // 17: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                 // 18: google.protobuf.Empty
}
var file_tkd_customer_v1_patient_proto_depIdxs = []int32{
	12, // 0: tkd.customer.v1.Patient.birthday:type_name -> tkd.common.v1.Date
	0,  // 1: tkd.customer.v1.Patient.gender:type_name -> tkd.customer.v1.PatientGender
	13, // 2: tkd.customer.v1.Patient.extra_data:type_name -> google.protobuf.Struct
	14, // 3: tkd.customer.v1.Patient.first_seen:type_name -> google.protobuf.Timestamp
	14, // 4: tkd.customer.v1.Patient.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 5: tkd.customer.v1.QueryPatientsResponse.patients:type_name -> tkd.customer.v1.Patient
	15, // 6: tkd.customer.v1.QueryPatientsResponse.species:type_name -> tkd.treatment.v1.Species
	1,  // 7: tkd.customer.v1.GetPatientsByCustomerResponse.patients:type_name -> tkd.customer.v1.Patient
	15, // 8: tkd.customer.v1.GetPatientsByCustomerResponse.species:type_name -> tkd.treatment.v1.Species
	14, // 9: tkd.customer.v1.Anamnesis.time:type_name -> google.protobuf.Timestamp
	8,  // 10: tkd.customer.v1.AddAnamnesisRequest.patient_import_reference:type_name -> tkd.customer.v1.PatientImportReference
	7,  // 11: tkd.customer.v1.AddAnamnesisRequest.anamnesis:type_name -> tkd.customer.v1.Anamnesis
	16, // 12: tkd.customer.v1.GetAnamnesisRequest.time_range:type_name -> tkd.common.v1.TimeRange
	17, // 13: tkd.customer.v1.GetAnamnesisRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 14: tkd.customer.v1.GetAnamnesisResponse.patient:type_name -> tkd.customer.v1.Patient
	15, // 15: tkd.customer.v1.GetAnamnesisResponse.species:type_name -> tkd.treatment.v1.Species
	7,  // 16: tkd.customer.v1.GetAnamnesisResponse.anamnesis:type_name -> tkd.customer.v1.Anamnesis
	2,  // 17: tkd.customer.v1.PatientService.QueryPatients:input_type -> tkd.customer.v1.QueryPatientsRequests
	4,  // 18: tkd.customer.v1.PatientService.GetPatientsByCustomer:input_type -> tkd.customer.v1.GetPatientsByCustomerRequest
	6,  // 19: tkd.customer.v1.PatientService.GetPatient:input_type -> tkd.customer.v1.GetPatientRequest
	9,  // 20: tkd.customer.v1.PatientService.AddAnamnesis:input_type -> tkd.customer.v1.AddAnamnesisRequest
	10, // 21: tkd.customer.v1.PatientService.GetAnamnesis:input_type -> tkd.customer.v1.GetAnamnesisRequest
	3,  // 22: tkd.customer.v1.PatientService.QueryPatients:output_type -> tkd.customer.v1.QueryPatientsResponse
	5,  // 23: tkd.customer.v1.PatientService.GetPatientsByCustomer:output_type -> tkd.customer.v1.GetPatientsByCustomerResponse
	1,  // 24: tkd.customer.v1.PatientService.GetPatient:output_type -> tkd.customer.v1.Patient
	18, // 25: tkd.customer.v1.PatientService.AddAnamnesis:output_type -> google.protobuf.Empty
	11, // 26: tkd.customer.v1.PatientService.GetAnamnesis:output_type -> tkd.customer.v1.GetAnamnesisResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_tkd_customer_v1_patient_proto_init() }
func file_tkd_customer_v1_patient_proto_init() {
	if File_tkd_customer_v1_patient_proto != nil {
		return
	}
	file_tkd_customer_v1_patient_proto_msgTypes[5].OneofWrappers = []any{
		(*GetPatientRequest_AnimalId)(nil),
		(*GetPatientRequest_AdditionalUniqueId)(nil),
	}
	file_tkd_customer_v1_patient_proto_msgTypes[8].OneofWrappers = []any{
		(*AddAnamnesisRequest_PatientId)(nil),
		(*AddAnamnesisRequest_AdditionUniqueId)(nil),
		(*AddAnamnesisRequest_PatientImportReference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tkd_customer_v1_patient_proto_rawDesc), len(file_tkd_customer_v1_patient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tkd_customer_v1_patient_proto_goTypes,
		DependencyIndexes: file_tkd_customer_v1_patient_proto_depIdxs,
		EnumInfos:         file_tkd_customer_v1_patient_proto_enumTypes,
		MessageInfos:      file_tkd_customer_v1_patient_proto_msgTypes,
	}.Build()
	File_tkd_customer_v1_patient_proto = out.File
	file_tkd_customer_v1_patient_proto_goTypes = nil
	file_tkd_customer_v1_patient_proto_depIdxs = nil
}
