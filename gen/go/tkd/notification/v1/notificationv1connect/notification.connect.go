// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tkd/notification/v1/notification.proto

package notificationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tierklinik-dobersberg/apis/gen/go/tkd/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "tkd.notification.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceSendSMSProcedure is the fully-qualified name of the NotificationService's
	// SendSMS RPC.
	NotificationServiceSendSMSProcedure = "/tkd.notification.v1.NotificationService/SendSMS"
	// NotificationServiceSendEMailProcedure is the fully-qualified name of the NotificationService's
	// SendEMail RPC.
	NotificationServiceSendEMailProcedure = "/tkd.notification.v1.NotificationService/SendEMail"
)

// NotificationServiceClient is a client for the tkd.notification.v1.NotificationService service.
type NotificationServiceClient interface {
	// SendSMS schedules sending a SMS message to one or more reciepients.
	SendSMS(context.Context, *connect_go.Request[v1.SendSMSRequest]) (*connect_go.Response[v1.SendSMSResponse], error)
	// SendEmail scheduls sending an E-Mail to one or more reciepients.
	SendEMail(context.Context, *connect_go.Request[v1.SendEMailRequest]) (*connect_go.Response[v1.SendEMailResponse], error)
}

// NewNotificationServiceClient constructs a client for the tkd.notification.v1.NotificationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		sendSMS: connect_go.NewClient[v1.SendSMSRequest, v1.SendSMSResponse](
			httpClient,
			baseURL+NotificationServiceSendSMSProcedure,
			opts...,
		),
		sendEMail: connect_go.NewClient[v1.SendEMailRequest, v1.SendEMailResponse](
			httpClient,
			baseURL+NotificationServiceSendEMailProcedure,
			opts...,
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	sendSMS   *connect_go.Client[v1.SendSMSRequest, v1.SendSMSResponse]
	sendEMail *connect_go.Client[v1.SendEMailRequest, v1.SendEMailResponse]
}

// SendSMS calls tkd.notification.v1.NotificationService.SendSMS.
func (c *notificationServiceClient) SendSMS(ctx context.Context, req *connect_go.Request[v1.SendSMSRequest]) (*connect_go.Response[v1.SendSMSResponse], error) {
	return c.sendSMS.CallUnary(ctx, req)
}

// SendEMail calls tkd.notification.v1.NotificationService.SendEMail.
func (c *notificationServiceClient) SendEMail(ctx context.Context, req *connect_go.Request[v1.SendEMailRequest]) (*connect_go.Response[v1.SendEMailResponse], error) {
	return c.sendEMail.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the tkd.notification.v1.NotificationService
// service.
type NotificationServiceHandler interface {
	// SendSMS schedules sending a SMS message to one or more reciepients.
	SendSMS(context.Context, *connect_go.Request[v1.SendSMSRequest]) (*connect_go.Response[v1.SendSMSResponse], error)
	// SendEmail scheduls sending an E-Mail to one or more reciepients.
	SendEMail(context.Context, *connect_go.Request[v1.SendEMailRequest]) (*connect_go.Response[v1.SendEMailResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	notificationServiceSendSMSHandler := connect_go.NewUnaryHandler(
		NotificationServiceSendSMSProcedure,
		svc.SendSMS,
		opts...,
	)
	notificationServiceSendEMailHandler := connect_go.NewUnaryHandler(
		NotificationServiceSendEMailProcedure,
		svc.SendEMail,
		opts...,
	)
	return "/tkd.notification.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceSendSMSProcedure:
			notificationServiceSendSMSHandler.ServeHTTP(w, r)
		case NotificationServiceSendEMailProcedure:
			notificationServiceSendEMailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) SendSMS(context.Context, *connect_go.Request[v1.SendSMSRequest]) (*connect_go.Response[v1.SendSMSResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.notification.v1.NotificationService.SendSMS is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendEMail(context.Context, *connect_go.Request[v1.SendEMailRequest]) (*connect_go.Response[v1.SendEMailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tkd.notification.v1.NotificationService.SendEMail is not implemented"))
}
